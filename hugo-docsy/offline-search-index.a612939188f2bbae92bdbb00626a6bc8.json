











































































































[{"body":" This is a placeholder page that shows you how to use this template site.\n The Overview is where your users find out about your project. Depending on the size of your docset, you can have a separate overview page (like this one) or put your overview contents in the Documentation landing page (like in the Docsy User Guide).\nTry answering these questions for your user in this page:\nWhat is it? Introduce your project, including what it does or lets you do, why you would use it, and its primary goal (and how it achieves it). This should be similar to your README description, though you can go into a little more detail here if you want.\nWhy do I want it? Help your user know if your project will help them. Useful information can include:\n  What is it good for?: What types of problems does your project solve? What are the benefits of using it?\n  What is it not good for?: For example, point out situations that might intuitively seem suited for your project, but aren’t for some reason. Also mention known limitations, scaling issues, or anything else that might let your users know if the project is not for them.\n  What is it not yet good for?: Highlight any useful features that are coming soon.\n  Where should I go next? Give your users next steps from the Overview. For example:\n Getting Started: Get started with $project Examples: Check out some example code!  ","categories":"","description":"Here's where your user finds out if your project is for them.\n","excerpt":"Here's where your user finds out if your project is for them.\n","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/overview/","tags":"","title":"Overview"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90’s four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven’t heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026B. I love this life we live in.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header.  Next level leggings before they sold out, PBR\u0026B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a “mixed” task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin' Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\";  Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) }  Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.  Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this.  ","categories":"","description":"A short lead description about this content page. It can be **bold** or _italic_ and can be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. It can be **bold** …","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/tasks/beds/","tags":"","title":"Bed and Chair Metrics"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90’s four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven’t heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026B. I love this life we live in.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header.  Next level leggings before they sold out, PBR\u0026B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a “mixed” task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin' Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\";  Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) }  Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.  Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this.  ","categories":"","description":"A short lead description about this content page. It can be **bold** or _italic_ and can be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. It can be **bold** …","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/tasks/ponycopters/configuring-ponycopters/","tags":"","title":"Configuring Ponycopters"},{"body":" This is a placeholder page that shows you how to use this template site.\n Information in this section helps your user try your project themselves.\n  What do your users need to do to start using your project? This could include downloading/installation instructions, including any prerequisites or system requirements.\n  Introductory “Hello World” example, if appropriate. More complex tutorials should live in the Tutorials section.\n  Consider using the headings below for your getting started page. You can delete any that are not applicable to your project.\nPrerequisites Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nInstallation Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nSetup Is there any initial setup users need to do after installation to try your project?\nTry it out! Can your users test their installation, for example by running a command or deploying a Hello World example?\n","categories":"","description":"What does your user need to know to try your project?\n","excerpt":"What does your user need to know to try your project?\n","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/getting-started/","tags":"","title":"Getting Started"},{"body":" This is a placeholder page that shows you how to use this template site.\n Do you have any example applications or code for your users in your repo or elsewhere? Link to your examples here.\n","categories":"","description":"See your project in action!\n","excerpt":"See your project in action!\n","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/examples/","tags":"","title":"Examples"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90’s four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven’t heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026B. I love this life we live in.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header.  Next level leggings before they sold out, PBR\u0026B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a “mixed” task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin' Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\";  Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) }  Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.  Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this.  ","categories":"","description":"A short lead description about this content page. It can be **bold** or _italic_ and can be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. It can be **bold** …","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/tasks/ponycopters/launching-ponycopters/","tags":"","title":"Launching Ponycopters"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90’s four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven’t heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026B. I love this life we live in.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header.  Next level leggings before they sold out, PBR\u0026B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a “mixed” task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin' Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\";  Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) }  Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.  Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this.  ","categories":"","description":"A short lead description about this content page. It can be **bold** or _italic_ and can be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. It can be **bold** …","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/tutorials/multi-bear/","tags":"","title":"Multi-Bear Domicile Setup"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90’s four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven’t heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026B. I love this life we live in.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header.  Next level leggings before they sold out, PBR\u0026B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a “mixed” task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin' Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\";  Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) }  Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.  Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this.  ","categories":"","description":"A short lead description about this content page. It can be **bold** or _italic_ and can be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. It can be **bold** …","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/tasks/porridge/","tags":"","title":"Porridge Assessment"},{"body":" This is a placeholder page that shows you how to use this template site.\n For many projects, users may not need much information beyond the information in the Overview, so this section is optional. However if there are areas where your users will need a more detailed understanding of a given term or feature in order to do anything useful with your project (or to not make mistakes when using it) put that information in this section. For example, you may want to add some conceptual pages if you have a large project with many components and a complex architecture.\nRemember to focus on what the user needs to know, not just what you think is interesting about your project! If they don’t need to understand your original design decisions to use or contribute to the project, don’t put them in, or include your design docs in your repo and link to them. Similarly, most users will probably need to know more about how features work when in use rather than how they are implemented. Consider a separate architecture page for more detailed implementation and system design information that potential project contributors can consult.\n","categories":"","description":"What does your user need to understand about your project in order to use it - or potentially contribute to it? \n","excerpt":"What does your user need to understand about your project in order to …","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/concepts/","tags":"","title":"Concepts"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90’s four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven’t heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026B. I love this life we live in.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header.  Next level leggings before they sold out, PBR\u0026B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a “mixed” task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin' Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\";  Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) }  Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.  Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this.  ","categories":"","description":"A short lead description about this content page. It can be **bold** or _italic_ and can be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. It can be **bold** …","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/tasks/task/","tags":"","title":"Another Task"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90’s four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven’t heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026B. I love this life we live in.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header.  Next level leggings before they sold out, PBR\u0026B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a “mixed” task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin' Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\";  Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) }  Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.  Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this.  ","categories":"","description":"A short lead description about this content page. It can be **bold** or _italic_ and can be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. It can be **bold** …","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/tutorials/tutorial2/","tags":"","title":"Another Tutorial"},{"body":" Warning This document refers to v5.\n Stroom Proxy defaults to listening for HTTP on port 9080. It is recommended that Apache is used to listen on the standard HTTP port 80 and forward requests on via the Apache mod_jk module and the AJP protocol (on 9009). Apache can also perform HTTPS on port 443 and pass over requests to Tomcat using the same AJP protocol.\nIt is additionally recommended that Stroom Proxy is used to front data ingest and so Apache is configured to route traffic to http(s)://server/stroom/datafeed to Stroom Proxy.\nPrerequisites  tomcat-connectors-1.2.31-src.tar.gz  Setup Apache  As root Patch mod_jk  cd ~/tmp tar -xvzf tomcat-connectors-1.2.31-src.tar.gz cd tomcat-connectors-1.2.31-src/native ./configure --with-apxs=/usr/sbin/apxs make sudo cp apache-2.0/mod_jk.so /etc/httpd/modules/ cd   Put the web server cert, private key, and CA cert into the web servers conf directory /etc/httpd/conf. E.g.  [user@node1 stroom-doc]$ ls -al /etc/httpd/conf .... -rw-r--r-- 1 root root 1729 Aug 27 2013 host.crt -rw-r--r-- 1 root root 1675 Aug 27 2013 host.key -rw-r--r-- 1 root root 1289 Aug 27 2013 CA.crt ....   Make changes to /etc/http/conf.d/ssl.conf as per below  JkMount /stroom/datafeed* loadbalancer_proxy JkMount /stroom* loadbalancer_proxy  JkOptions +ForwardKeySize +ForwardURICompat +ForwardSSLCertChain -ForwardDirectories SSLCertificateFile /etc/httpd/conf/[YOUR SERVER].crt SSLCertificateKeyFile /etc/httpd/conf/[YOUR SERVER].key SSLCertificateChainFile /etc/httpd/conf/[YOUR CA].crt SSLCACertificateFile /etc/httpd/conf/[YOUR CA APPENDED LIST].crt   Remove /etc/httpd/conf.d/nss.conf to avoid a 8443 port clash  rm /etc/httpd/conf.d/nss.conf   Create a /etc/httpd/conf.d/mod_jk.conf configuration  LoadModule jk_module modules/mod_jk.so JkWorkersFile conf/workers.properties JkLogFile logs/mod_jk.log JkLogLevel info JkLogStampFormat \"[%a %b %d %H:%M:%S %Y]\" JkOptions +ForwardKeySize +ForwardURICompat +ForwardSSLCertChain -ForwardDirectories JkRequestLogFormat \"%w %V %T\"  JkMount /stroom/datafeed* loadbalancer_proxy JkMount /stroom* loadbalancer_proxy  JkShmFile logs/jk.shm \u003cLocation /jkstatus/\u003e JkMount status Order deny,allow Deny from all Allow from 127.0.0.1 \u003c/Location\u003e   Setup stroom-setup/cluster.txt, generate the workers file and copy into Apache. (as root and replace stroomuser with your processing user)  /home/stroomuser/stroom-setup/workers.properties.sh --cluster=/home/stroomuser/cluster.txt \u003e /etc/httpd/conf/workers.properties   Inspect /etc/httpd/conf/workers.properties to make sure it looks as you expect for your cluster  worker.list=loadbalancer_proxy,local_proxy worker.stroom_1_proxy.port=9009 worker.stroom_1_proxy.host=localhost worker.stroom_1_proxy.type=ajp13 worker.stroom_1_proxy.lbfactor=1 worker.stroom_1_proxy.max_packet_size=65536 .... .... worker.loadbalancer_proxy.type=lb worker.loadbalancer_proxy.balance_workers=stroom_1_proxy,stroom_2_proxy worker.loadbalancer_proxy.sticky_session=1 worker.local_proxy.type=lb worker.local_proxy.balance_workers=stroom_1_proxy worker.local_proxy.sticky_session=1   Create a simple redirect page to the stroom web app for the root URL (e.g. DocumentRoot “/var/www/html”, index.html)  \u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;meta http-equiv=\"Refresh\" content=\"0; URL=stroom\"\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;/html\u0026gt;   Restart Apache and then test default http / https access.  sudo /etc/init.d/httpd restart  ","categories":"","description":"","excerpt":" Warning This document refers to v5.\n Stroom Proxy defaults to …","ref":"/stroom-docs/hugo-docsy/docs/proxy/apache-forwarding/","tags":"","title":"Apache Forwarding"},{"body":" TODO This document is out of date and needs updating to refer to the stroom-proxy docker stack.  Clone and build stroom-proxy git clone https://github.com/gchq/stroom-proxy.git mvn clean install  Unpack the stroom-proxy distribution in preparation for building the docker iamge cd stroom-proxy-distribution unzip target/stroom-proxy-distribution-\u003cversion\u003e-bin.zip -d target  Building and running the docker image Here you need to say where you want data to be sent by stroom-proxy. This is done using a --build-arg (external link) parameter of STROOM_PROXY_TYPE. These values can be forward, store, or store_nodb. See the stroom-proxy section in the stroom documentation (external link) documentation for more details about these options.\ndocker stop stroom-proxy docker rm stroom-proxy docker rmi stroom-proxy docker build --build-arg STROOM_PROXY_TYPE=store_nodb --tag=stroom-proxy:latest target/stroom-proxy docker run -p 8080:8080 --name=stroom-proxy stroom-proxy  ","categories":"","description":"","excerpt":" TODO This document is out of date and needs updating to refer to the …","ref":"/stroom-docs/hugo-docsy/docs/proxy/docker/","tags":["proxy","docker"],"title":"Running with docker"},{"body":" Warning This document refers to v5.\n Prerequisites  Linux Server’s with at least 4GB RAM Install files stroom-proxy-X-Y-Z-distribution.zip, stroom-deploy-X-Y-Z-distribution.zip Temporarily allow port 9080 if not relying on Apache Forwarding (see below)  Processing User Setup See Processing User Setup.\nInstalling Stroom Proxy As the processing user unpack the stroom-proxy-X-Y-Z-distribution.zip installation files in the processing users home directory.\nunzip stroom-proxy-X-Y-Z-distribution.zip  Stroom Proxy can be setup as follows:\n forward - as an aggregation point to store and forwarding onto another Stroom or Stroom / Proxy store - to front Stroom for data ingest  Stroom Proxy - forward In forward mode you need to know the server address that data is being sent onto. Run the setup script to capture the basic settings required to run Stroom Proxy in forward mode.\n @@ NODE @@ - Each Stroom instance in the cluster needs a unique name, if this is a reinstall ensure you use the previous deployment. This name needs match the name used in your worker.properties (e.g. ‘node1’ in the case ‘node1.my.org’) @@ PORT PREFIX @@ - By default Stroom Proxy will run on port 9080  [stroomuser@node1 ~]$ ./stroom-proxy/bin/setup.sh forward [stroomuser@dev1 ~]$ ./stroom-proxy/bin/setup.sh forward ... Parameters ========== @@NODE@@ : Unique node name for install [node1 ] : node1 @@PORT_PREFIX@@ : HTTP prefix to use [90 ] : 90 @@REPO_DIR@@ : Stroom Proxy Repository Dir [/stroomdata/stroom-proxy ] : /home/stroomuser/stroom-proxy-repo @@FORWARD_SERVER@@ : Server to forward data on to [hostname ] : audit.my.org @@JAVA_OPTS@@ : Optional tomcat JVM settings [\"-Xms512m -Xmx1g\" ] : ...  Stroom Proxy - store In store mode you need to know the mysql details to validate incoming data with.\n[stroomuser@node1 ~]$ ./stroom-proxy-app/bin/setup.sh store ... @@NODE@@ : Unique node name for install [node ] : @@PORT_PREFIX@@ : HTTP prefix to use [90 ] : 72 @@REPO_DIR@@ : Stroom Proxy Repository Dir [/stroomdata/stroom-proxy ] : /home/stroomuser/stroom-proxy-repo-2 @@JDBC_CLASSNAME@@ : JDBC class name [com.mysql.jdbc.Driver ] : @@JDBC_URL@@ : JDBC URL (jdbc:mysql://[HOST]/[DBNAME]) [jdbc:mysql://localhost/stroom ] : @@DB_USERNAME@@ : Database username [ ] : stroomuser @@DB_PASSWORD@@ : Database password [ ] : @@JAVA_OPTS@@ : Optional tomcat JVM settings [\"-Xms512m -Xmx1g\" ] :  Install Check Start the installed instance:\n./stroom-deploy/start.sh  Inspect the logs:\ntail -f stroom-proxy-app/instance/logs/stroom.log  Stroom Proxy Properties The following properties can be configured in the stroom.properties file.\nTODO - Could do with a column indicating which proxy mode these properties apply to, e.g. store/forward\n   Property Name Description     repoDir Optional Repository DIR. If set any incoming request will be written to the file system.   logRequest Optional log line with header attributes output as defined by this property   bufferSize Override default (8192) JDK buffer size to use   forwardUrl Optional The URL’s to forward onto This is pass-through mode if repoDir is not set   forwardThreadCount Number of threads to forward with   forwardTimeoutMs Time out when forwarding   forwardChunkSize Chunk size to use over http(s) if not set requires buffer to be fully loaded into memory   rollCron Interval to roll any writing repositories.   readCron Cron style interval (e.g. every hour ‘0 * *’, every half hour ‘0,30 * *') to read any ready repositories (if not defined we read all the time).   maxAggregation Aggregate size to break at when building an aggregate.   zipFilenameDelimiter The delimiter used to separate the id ihe zip filename from the templated part   zipFilenameTemplate A template for naming the zip files in the repository where files will be named nnn!zipFilenameTemplate.zip where nnn is the id prefix, ! is the configurable delimiter and zipFilenameTemplate will be something like ‘${feed}!${headerMapKey1}!${headerMapKey2}’. The naem of each variable must exactly match a key in the meta data else it will resolve to ‘’.   requestDelayMs Sleep time used to aid with testing   forwardDelayMs Debug setting to add a delay   dbRequestValidatorContext Database Feed Validator - Data base JDBC context   dbRequestValidatorJndiName Database Feed Validator - Data base JDBC JNDI name   dbRequestValidatorFeedQuery Database Feed Validator - SQL to check feed status   dbRequestValidatorAuthQuery Database Feed Validator - SQL to check authorisation required   remotingUrl Url to use for remoting services   remotingReadTimeoutMs Change from the default JVM settings.   remotingConnectTimeoutMs Change from the default JVM settings.   maxStreamSize Stream size to break at when building an aggregate.   maxFileScan Max number of files to scan over during forwarding. Once this limit is it it will wait until next read interval   cacheTimeToIdleSeconds Time to idle settings to used for validating feed information   cacheTimeToLiveSeconds Time to live settings to used for validating feed information    Apache Forwarding See Apache Forwarding.\nJava Key Store Setup If you require that Stroom Proxy communicates over 2-way https you will need to set up Java Key Stores.\nSee Java Key Store Setup.\nSecuring Stroom See Securing Stroom.\n","categories":"","description":"","excerpt":" Warning This document refers to v5.\n Prerequisites  Linux Server’s …","ref":"/stroom-docs/hugo-docsy/docs/proxy/install/","tags":["proxy","v5"],"title":"Stroom Proxy Installation"},{"body":" This is a placeholder page that shows you how to use this template site.\n Think about your project’s features and use cases. Use these to choose your core tasks. Each granular use case (enable x, configure y) should have a corresponding tasks page or tasks page section. Users should be able to quickly refer to your core tasks when they need to find out how to do one specific thing, rather than having to look for the instructions in a bigger tutorial or example. Think of your tasks pages as a cookbook with different procedures your users can combine to create something more substantial.\nYou can give each task a page, or you can group related tasks together in a page, such as tasks related to a particular feature. As well as grouping related tasks in single pages, you can also group task pages in nested folders with an index page as an overview, as seen in this example site. Or if you have a small docset like the Docsy User Guide with no Tutorials or Concepts pages, consider adding your feature-specific pages at the top level of your docs rather than in a Tasks section.\nEach task should give the user\n The prerequisites for this task, if any (this can be specified at the top of a multi-task page if they’re the same for all the page’s tasks. “All these tasks assume that you understand….and that you have already….\"). What this task accomplishes. Instructions for the task. If it involves editing a file, running a command, or writing code, provide code-formatted example snippets to show the user what to do! If there are multiple steps, provide them as a numbered list. If appropriate, links to related concept, tutorial, or example pages.  ","categories":"","description":"What can your user do with your project?\n","excerpt":"What can your user do with your project?\n","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/tasks/","tags":"","title":"Core Tasks"},{"body":" This is a placeholder page that shows you how to use this template site.\n Tutorials are complete worked examples made up of multiple tasks that guide the user through a relatively simple but realistic scenario: building an application that uses some of your project’s features, for example. If you have already created some Examples for your project you can base Tutorials on them. This section is optional. However, remember that although you may not need this section at first, having tutorials can be useful to help your users engage with your example code, especially if there are aspects that need more explanation than you can easily provide in code comments.\n","categories":"","description":"Show your user how to work through some end to end examples.\n","excerpt":"Show your user how to work through some end to end examples.\n","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/tutorials/","tags":"","title":"Tutorials"},{"body":" This is a placeholder page that shows you how to use this template site.\n If your project has an API, configuration, or other reference - anything that users need to look up that’s at an even lower level than a single task - put (or link to it) here. You can serve and link to generated reference docs created using Doxygen, Javadoc, or other doc generation tools by putting them in your static/ directory. Find out more in Adding static content. For OpenAPI reference, Docsy also provides a Swagger UI layout and shortcode that renders Swagger UI using any OpenAPI YAML or JSON file as source.\n","categories":"","description":"Low level reference docs for your project.\n","excerpt":"Low level reference docs for your project.\n","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/reference/","tags":"","title":"Reference"},{"body":"In this quick-start guide you will learn how to use Stroom to get from this CSV, which looks like this:\nid,guid,from_ip,to_ip,application 1,10990cde-1084-4006-aaf3-7fe52b62ce06,159.161.108.105,217.151.32.69,Tres-Zap 2,633aa1a8-04ff-442d-ad9a-03ce9166a63a,210.14.34.58,133.136.48.23,Sub-Ex ...  To this XML:\n\u003c?xml version=\"1.1\" encoding=\"UTF-8\"?\u003e \u003cEvents xmlns:stroom=\"stroom\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003e \u003cEvent\u003e \u003cId\u003e1\u003c/Id\u003e \u003cGuid\u003e10990cde-1084-4006-aaf3-7fe52b62ce06\u003c/Guid\u003e \u003cFromIp\u003e159.161.108.105\u003c/FromIp\u003e \u003cToIp\u003e217.151.32.69\u003c/ToIp\u003e \u003cApplication\u003eTres-Zap\u003c/Application\u003e \u003c/Event\u003e \u003cEvent\u003e \u003cId\u003e2\u003c/Id\u003e \u003cGuid\u003e633aa1a8-04ff-442d-ad9a-03ce9166a63a\u003c/Guid\u003e \u003cFromIp\u003e210.14.34.58\u003c/FromIp\u003e \u003cToIp\u003e133.136.48.23\u003c/ToIp\u003e \u003cApplication\u003eSub-Ex\u003c/Application\u003e \u003c/Event\u003e ...  You will go from a clean vanilla Stroom to having a simple pipeline that takes in CSV data and outputs that data transformed into XML. Stroom is a generic and powerful tool for ingesting and processing data: it’s flexible because it’s generic so if you do want to start processing data we would recommend you follow this tutorial otherwise you’ll find yourself struggling.\nWe’re going to do the following:\n Get, configure, and run Stroom Get some data into Stroom Set up a pipeline to process the data Index the data Show the data on a dashboard  All the things we create here are available as a content pack (external link), so if you just wanted to see it running you could get there quite easily.\n Note: The CSV data used in mock_stroom_data.csv (linked to above) is randomly generated and any association with any real world IP address or name is entirely coincidental.\n ","categories":"","description":"","excerpt":"In this quick-start guide you will learn how to use Stroom to get from …","ref":"/stroom-docs/hugo-docsy/docs/quick-start-guide/","tags":"","title":"Quick Start Guide"},{"body":"Getting and Running Stroom For this quick start you want a simple single-node Stroom. You will want to follow these instructions. They do require Docker and Docker Compose, so make sure you’ve installed those first.\nAt the risk of sowing confusion you should know that there are different ways of running Stroom. Here are the full options:\n Run using Docker Hub images (recommended) Install a stroom v5.x release Install a stroom v6.x release From source you can:  Build and run from IntelliJ    Basic configuration Enable processing of data streams Automatic processing isn’t enabled by default: you might first want to check other settings (for example nodes, properties, and volumes). So we need to enable Stream Processing. This is in Tools -\u003e Jobs menu:: Next we need to enable Stream Processor jobs:\nBelow the list of jobs is the properties pane. The Stream Processor’s properties show the list of nodes. You should have one. You’ll need to enable it by scrolling right:\nSo now we’ve done that lets get data into stroom.\n","categories":"","description":"","excerpt":"Getting and Running Stroom For this quick start you want a simple …","ref":"/stroom-docs/hugo-docsy/docs/quick-start-guide/running/","tags":"","title":"Running Stroom"},{"body":"Markdown style conventions Sentence per line Each sentence should start on a new line, even in numbered/bulleted lists. This makes it easier to move sentences around or to remove them. e.g.:\nThis is the first sentence of the paragraph. This is the second. This it the third and final one. This is the start of a new paragraph.  No hard line breaks. Long lines should not be hard wrapped by adding line breaks. You should instead rely on your editor to soft wrap long lines that cannot fit on the visible screen area. The process of hard wrapping long lines will vary from editor to editor and not all editors support re-wrapping lines after the content has changed.\n## Don't do this This is a very long line that has had hard breaks added to it. Don't do it.  Blank lines and spacing  A heading line should be preceded by two blank lines and followed by one blank line. This makes the headings clearer in the markdown source. A fenced code block should be surrounded by one blank line. Paragraphs should be separated by one blank line. Bulleted and numbered lists should be surrounded by one blank line.  e.g:\nThe text belonging to the previous heading. ## A Heading The text of this heading. Another line. A new paragraph. Another line. Here are some bullets: * Bullet 1 * Bullet 2 * Bullet 3 Here are some numbered steps: 1. Step 1 1. Step 2 1. Step 3 Another random line.  Headings The page title uses heading level one (#  in markdown) so all markdown headings should be \u003e= 2 (## , ### , #### , etc.). Headings should have two blank lines above them for clarity in the raw markdown. The # characters should always be followed by one space character\nThe following is an exmaple of the heading levels.\n# Heading level 1 ## Heading level 2 ### Heading level 3 #### Heading level 4 ##### Heading level 5 ###### Heading level 6  Markdown supports an alternate style for headings, as shown below. Don’t use this style as it is not clear from the symbols what the heading level is.\nHeading level 1 =============== Don't use this style. Heading level 2 --------------- Don't use this style.  Table of contents The page table of contents (right hand pane) is controlled by this in config.toml.\n[markup] [markup.tableOfContents] endLevel = 4 ordered = false startLevel = 2  The maximum depth of the table of contents can be controlled with endLevel.\nHeading example (level 2) This is an example of a level 2 heading.\nHeading example (level 3) This is an example of a level 3 heading.\nHeading example (level 4) This is an example of a level 4 heading.\nHeading example (level 5) This is an example of a level 5 heading.\nHeading example (level 6) This is an example of a level 6 heading.\nBlock quotes A simple paragraph block quote.\n This is a simple block quote. This is the second sentence.\n A pair of spaces at the end of a line can be used to force line breaks, e.g.:\n This is a multi line block quote.\nThis is the second line.\nThis is the third line.\n Lists Bulleted list  Item 1. This is some extra content for item 1. Item 2.  Item 2a. Item 2b.   Item 3.  Numbered List  Item 1. This is some extra content for step 1. Item 2.  Item 2a. Item 2b.   Item 3.  Check List  Item 1. This is some extra content for item 1. Item 2.  Item 2a. Item 2b.   Item 3.  Definition list  Name Godzilla Birthplace Japan Color Green  Tables Tables should ideally have its columns aligned in the markdown for clarity in the source.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    However this will produce the same result.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    Links A link to an anchor on this page.\nA link link to an anchor on page that is a sibling of this one.\nA link link to an anchor on page above this one, using a relative path.\nA link link to an anchor on page above this one, using an absolute path, that will be converted to a relative one.\nCode highlighting Inline code Inline code looks like this.\nCode blocks Code blocks should be surrounded with fences and the language type always specified to ensure correct syntax highlighting. If the language type is not supplied then styling will be different to fenced blocks with a language. The list of supported languages can be found here (external). If the content of the fenced block has no supported language or is just plain text then use language none or text. This ensures the correct default styling is used and makes it explicitly clear to anyone editing the markdown what the content of the block is.\nThe following are some example of code blocks:\nPlain text\nid,date,time,guid,from_ip,to_ip,application 1,6/2/2018,10:18,10990cde-1084-4006-aaf3-7fe52b62ce06,159.161.108.105,217.151.32.69,Tres-Zap 2,12/6/2017,5:58,633aa1a8-04ff-442d-ad9a-03ce9166a63a,210.14.34.58,133.136.48.23,Sub-Ex 3,6/7/2018,11:58,fabdeb8a-936f-4e1e-a410-3ca5f2ac3ed6,153.216.143.195,152.3.51.83,Otcom  YAML\n--- root: someKey: \"value\"  Bash\necho \"${VAR}\"  XML\n\u003croot\u003e \u003cchild attr=\"xxx\"\u003esome val\u003c/child\u003e \u003c/root\u003e  Alerts Warning block Quote Warning This is a warning that can contain markdown.  Page level warning Warning This is a warning that can contain markdown.\n Note block Quote Note This is a note that can contain markdown.  Page level info This is some info that can contain markdown.\n TODO block Quote TODO This is a TODO that can contain markdown.  Cards Cards can be used to display related conent side by side. Each card can contain markdown and/or Hugo short codes. The cards will be displayed horizopntally across the page.\nYAML  --- root: someKey: \"value\"    XML  \u003croot\u003e \u003cchild attr=\"xxx\"\u003esome val\u003c/child\u003e \u003c/root\u003e     ","categories":"","description":"","excerpt":"Markdown style conventions Sentence per line Each sentence should …","ref":"/stroom-docs/hugo-docsy/docs/style-guide/basic-elements/","tags":["style"],"title":"Basic Page Elements"},{"body":" These basic sample guidelines assume that your Docsy site is deployed using Netlify and your files are stored in GitHub. You can use the guidelines “as is” or adapt them with your own instructions: for example, other deployment options, information about your doc project’s file structure, project-specific review guidelines, versioning guidelines, or any other information your users might find useful when updating your site. Kubeflow has a great example.\nDon’t forget to link to your own doc repo rather than our example site! Also make sure users can find these guidelines from your doc repo README: either add them there and link to them from this page, add them here and link to them from the README, or include them in both locations.\n We use Hugo to format and generate our website, the Docsy theme for styling and site structure, and Netlify to manage the deployment of the site. Hugo is an open-source static site generator that provides us with templates, content organisation in a standard directory structure, and a website generation engine. You write the pages in Markdown (or HTML if you want), and Hugo wraps them up into a website.\nAll submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.\nQuick start with Netlify Here’s a quick guide to updating the docs. It assumes you’re familiar with the GitHub workflow and you’re happy to use the automated preview of your doc updates:\n Fork the Goldydocs repo on GitHub. Make your changes and send a pull request (PR). If you’re not yet ready for a review, add “WIP” to the PR name to indicate it’s a work in progress. (Don’t add the Hugo property “draft = true” to the page front matter, because that prevents the auto-deployment of the content preview described in the next point.) Wait for the automated PR workflow to do some checks. When it’s ready, you should see a comment like this: deploy/netlify — Deploy preview ready! Click Details to the right of “Deploy preview ready” to see a preview of your updates. Continue updating your doc and pushing your changes until you’re happy with the content. When you’re ready for a review, add a comment to the PR, and remove any “WIP” markers.  Updating a single page If you’ve just spotted something you’d like to change while using the docs, Docsy has a shortcut for you:\n Click Edit this page in the top right hand corner of the page. If you don’t already have an up to date fork of the project repo, you are prompted to get one - click Fork this repository and propose changes or Update your Fork to get an up to date version of the project to edit. The appropriate page in your fork is displayed in edit mode. Follow the rest of the Quick start with Netlify process above to make, preview, and propose your changes.  Previewing your changes locally If you want to run your own local Hugo server to preview your changes as you work:\n  Follow the instructions in Getting started to install Hugo and any other tools you need. You’ll need at least Hugo version 0.45 (we recommend using the most recent available version), and it must be the extended version, which supports SCSS.\n  Fork the Goldydocs repo repo into your own project, then create a local copy using git clone. Don’t forget to use --recurse-submodules or you won’t pull down some of the code you need to generate a working site.\ngit clone --recurse-submodules --depth 1 https://github.com/google/docsy-example.git    Run hugo server in the site root directory. By default your site will be available at http://localhost:1313/. Now that you’re serving your site locally, Hugo will watch for changes to the content and automatically refresh your site.\n  Continue with the usual GitHub workflow to edit files, commit them, push the changes up to your fork, and create a pull request.\n  Creating an issue If you’ve found a problem in the docs, but you’re not sure how to fix it yourself, please create an issue in the Goldydocs repo. You can also create an issue about a specific page by clicking the Create Issue button in the top right hand corner of the page.\nUseful resources  Docsy user guide: All about Docsy, including how it manages navigation, look and feel, and multi-language support. Hugo documentation: Comprehensive reference for Hugo. Github Hello World!: A basic introduction to GitHub concepts and workflow.  ","categories":"","description":"How to contribute to the docs\n","excerpt":"How to contribute to the docs\n","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/contribution-guidelines/","tags":"","title":"Contribution Guidelines"},{"body":"Getting data into Stroom Create the feed In real life you might configure Stroom to watch for new files in a directory. In this tutorial we’ll be uploading data but the result will be the same: raw event data sitting on a feed.\nA lot of Stroom’s functionality is available through right-click context menus. If you right-click System in the tree you can create new things. Create a new folder and call it something like Stroom 101:\nRight-click again and create a feed. The name needs to be capitalised, e.g. CSV_IN.\n This will open a new tab for the feed. We want to add some data to the feed so click on Data at the top of the tab.\n  Then click the green up arrow () to get the file upload dialog.\n  We’re going to be putting in unprocessed events, known in Stroom as raw events. That’s the type of stream this feed will contain, so that’s the Stream Type you need to select.\n  Download this file, then click choose file from the dialog, select the file, and then ok everything until you’re back at the feed.  That’s it, there’s now data in Stroom. You should be able to see it in the data table (you might need to click the refresh () button:\nNow you can do all sorts of things with the data: transform it, visualise it, index it. It’s Pipelines that allow all these things to happen.\n","categories":"","description":"","excerpt":"Getting data into Stroom Create the feed In real life you might …","ref":"/stroom-docs/hugo-docsy/docs/quick-start-guide/feed/","tags":["feed"],"title":"Feeds"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/docs/","tags":"","title":"Documentation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/news/news/","tags":"","title":"News About Stroom"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/news/releases/","tags":"","title":"New Releases"},{"body":" TODO Add the resources dir to /assets and fix all the img links  The HOWTOs are broken down into different functional concepts or areas of Stroom.\nNOTE: These HOWTOs will match the development of Stroom and as a result, various elements will be updated over time, including screen captures. In some instances, screen captures will contain timestamps and so you may note inconsistent date or time movements within a complete HOWTO, although if a sequence of captures is contained within a section of a document, they all will be replaced.\nInstallation The Installation Scenarios HOWTO is provided to assist users in setting up a number of different Stroom deployments.\nEvent Feed Processing The Event Feed Processing HOWTO is provided to assist users in setting up Stroom to process inbound event logs and transform them into the Stroom Event Logging XML Schema.\nThe Apache HTTPD Event Feed is interwoven into other HOWTOs that utilise this feed as a datasource.\nReference Feeds Reference Feeds are used to provide look up data for a translation. The reference feed HOWTOs illustrate how to create reference feeds and how to use look up reference data maps to enrich the data you are processing.\nSearches and Indexing This section covers Indexing and Searching for data in Stroom\n Search using bash Elasticsearch integration Solr integration  General Raw Source Tracking show how to associate a processed Event with the source line that generated it\nOther topics in this section are\n Feed Management. Tasks  ","categories":"","description":"This is a series of *HOWTOs* that are designed to get one started with Stroom.\n","excerpt":"This is a series of *HOWTOs* that are designed to get one started with …","ref":"/stroom-docs/hugo-docsy/docs/howtos/","tags":"","title":"How Tos"},{"body":"Create a pipeline Pipelines control how data is processed in Stroom. Typically you’re going to want to do a lot of the same stuff for every pipeline, i.e. similar transformations, indexing, writing out data. You can actually create a template pipeline and inherit from it, tweaking what you need to for this or that feed. We’re not doing that now because we want to show how to create one from scratch.\n Create a pipeline by right-clicking our Stroom 101 folder. Call it something like CSV to XML pipeline. Select Structure from the top of the new tab. This is the most important view for the pipeline because it shows what will actually happen on the pipeline. Check Advanced Mode so that we can actually edit things.  We already have a Source element. Unlike most other pipeline elements this isn’t something we need to configure. It’s just there to show the starting point. Data gets into the pipeline via other means - we’ll describe this in detail later.\nAdd a data splitter Data splitters are powerful, and a lot we can say about them. Here we’re just going to make a basic one.\nCreate a CSV splitter We have CSV in the following form:\nid,guid,from_ip,to_ip,application 1,10990cde-1084-4006-aaf3-7fe52b62ce06,159.161.108.105,217.151.32.69,Tres-Zap 2,633aa1a8-04ff-442d-ad9a-03ce9166a63a,210.14.34.58,133.136.48.23,Sub-Ex  To process this we need to know if there’s a header row, and what the delimiters are. This is a job for a Data Splitter.\nThe splitter is actually a type of Text Converter, so lets create one of those:\nCall it something like CSV splitter. In the new tab you need to tell the Text Converter that it’ll be a Data Splitter:\nNow go to the Conversion tab. What you need to put in here is specific to the built-in Data Splitter functionality, so I’m just going to tell you what you’re going to need:\n\u003c?xml version=\"1.1\" encoding=\"UTF-8\"?\u003e \u003cdataSplitter xmlns=\"data-splitter:3\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"data-splitter:3 file://data-splitter-v3.0.1.xsd\" version=\"3.0\"\u003e \u003c!-- The first line contains the field names --\u003e \u003csplit delimiter=\"\\n\" maxMatch=\"1\"\u003e \u003cgroup\u003e \u003csplit delimiter=\",\" containerStart=\"\u0026#34;\" containerEnd=\"\u0026#34;\"\u003e \u003cvar id=\"heading\" /\u003e \u003c/split\u003e \u003c/group\u003e \u003c/split\u003e \u003c!-- All subsequent lines are records --\u003e \u003csplit delimiter=\"\\n\"\u003e \u003cgroup\u003e \u003csplit delimiter=\",\" containerStart=\"\u0026#34;\" containerEnd=\"\u0026#34;\"\u003e \u003cdata name=\"$heading$1\" value=\"$1\" /\u003e \u003c/split\u003e \u003c/group\u003e \u003c/split\u003e \u003c/dataSplitter\u003e  You can see that it uses the data-splitter-v3.0.1.xsd that we imported earlier. Save it by clicking the save icon ().\nSo we now have a configured, re-usable data splitter for CSV files that have headers. We need to add this to our pipeline as a filter, so head back to the pipeline’s Structure section and add a DSParser, as below. Call it something like CSV splitter filter: Now we have a pipeline that looks like this:\nClick on the CSV splitter filter element and the pane below will show it’s properties. We need to tell it to use our newly created CSV splitter. Double click the textConverter property and change Value to the actual CSV splitter:\nTest the csv splitter So now we have CSV data in Stroom and a pipeline that is configured to process CSV data. We’ve done a fair few things so far and are we sure the pipeline is correctly configured? We can do some debugging and find out.\nIn Stroom you can step through you records and see what the output is at each stage. It’s easy to start doing this. The first thing to do is to open your CSV_FEED feed, then click the big blue stepping button at the bottom right:\nYou’ll be asked to select a pipeline:\nNow you get a view that’s similar to your feed view, except it also shows the pipeline:\nIt also has stepping controls. Click the green step forward icon (). You should see something like this:\nGreat! If you don’t see this then there’s something wrong. Click on CSV splitter filter. You’ll see the conversion code and hopefully some errors. Some issues might be: did you remember to import the data splitter schema into Stroom? Did you remember to confgure the Text Converter to be a Data Splitter?\nIf everything went fine then click the step forward button a few more times and you’ll see the yellow selection move down as you process each row.\nWhat we actually want to see is the output from the Text Converter, so click on CSV splitter filter. You’ll see the conversion code we entered earlier and below two panes, one containing the CSV and one containing the split-up text, in XML form:\nSo here we have some XML in a basic format we call the records format. You can see the schema for records in the XML schemas folder.\nAdd XSLT to transform records format XML into something else Create the XSLT filter This process is very similar to creating the CSV splitter:\n Create the XSLT filter Add it to the pipeline Step through to make sure it’s doing what we expect  Create the XSLT filter, calling it something like XSLT:\nOn the new tab click on XSLT. This is another big text field but this one accepts XSLT. This one will be very basic and just takes the split up data and puts it into fields. The XSLT for this is below but if you’d like to tinker then go ahead.\n\u003c?xml version=\"1.1\" encoding=\"UTF-8\" ?\u003e \u003cxsl:stylesheet xpath-default-namespace=\"records:2\" xmlns:stroom=\"stroom\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\"\u003e \u003cxsl:template match=\"records\"\u003e \u003cEvents\u003e \u003cxsl:apply-templates /\u003e \u003c/Events\u003e \u003c/xsl:template\u003e \u003cxsl:template match=\"record\"\u003e \u003cxsl:variable name=\"id\" select=\"data[@name='id']/@value\" /\u003e \u003cxsl:variable name=\"guid\" select=\"data[@name='guid']/@value\" /\u003e \u003cxsl:variable name=\"from_ip\" select=\"data[@name='from_ip']/@value\" /\u003e \u003cxsl:variable name=\"to_ip\" select=\"data[@name='to_ip']/@value\" /\u003e \u003cxsl:variable name=\"application\" select=\"data[@name='application']/@value\" /\u003e \u003cEvent\u003e \u003cId\u003e\u003cxsl:value-of select=\"$id\" /\u003e\u003c/Id\u003e \u003cGuid\u003e\u003cxsl:value-of select=\"$guid\" /\u003e\u003c/Guid\u003e \u003cFromIp\u003e\u003cxsl:value-of select=\"$from_ip\" /\u003e\u003c/FromIp\u003e \u003cToIp\u003e\u003cxsl:value-of select=\"$to_ip\" /\u003e\u003c/ToIp\u003e \u003cApplication\u003e\u003cxsl:value-of select=\"$application\" /\u003e\u003c/Application\u003e \u003c/Event\u003e \u003c/xsl:template\u003e \u003c/xsl:stylesheet\u003e  Make sure you save it.\nGo back to the Structure section of the pipeline and add an XSLTFilter element. Call it something like XSLT filter.\nSelect the XSLT filter and configure it to use the actual XSLT you just created by double-clicking xslt in the properties:\nIn the dialog make sure the value is the XSLT filter. Save the pipeline.\nTest the XSLT filter We’re going to test this in the same way we tested the CSV splitter, by clicking the big blue button on the feed. Click the step forward button () a few times to make sure it’s working then click on the XSLT element. This time you should see the XSLT filter there too, as well as the basic XML being transformed into more useful XML:\nFantastic! Data converted! Well done if you’ve got this far. Really, there are lots of steps and things that could go wrong and you’ve persevered. There’s a few more things to get this pipeline ready for doing this task for real. We need to get this data to a destination.\nOutputting the transformed data Create the XML writer What’s an XML Writer and why do you need one? The XSLT filter doesn’t actually write XML but instead just passes XML events from one filter to another. In order to write XML out you need an XML writer. You don’t need to create one outside the pipeline (in the way you did with the CSV splitter and the XSLT filter). An XML writer is just added to the pipeline like this:\nThat’s it, no other configuration necessary.\nCreate the destination We need to do something with the serialised XML. We’ll write it to a stream. To do this we create a stream appender:\nUnlike the Source element this element needs to be configured. We need to configure two things: the streamType and the destination feed.\nSetting the feed We’ll send the output to the CSV_FEED - all data associated with this feed will be in the same place. To do that we edit the feed property and set it to CSV_FEED:\nWe also need to edit the streamType property:We set the streamType to Events:\nThat’s it! Our pipeline is configured!\nTest the destination We can test the XML writer and the streamAppender using the same stepping feature. Make sure you’ve saved the pipeline and set a new stepping session running. If you click on the stream appender you’ll see something like this:\nSet the pipeline running Obviously you don’t want to step through your data one by one. This all needs automation, and this is what Processors are for. The processor works in the background to take any unprocessed data from a feed and put it through a pipeline. So far everything on our EXAMPLE_IN feed is unprocessed.\nCreate a processor Processors are created from the Processors section of the pipeline:\nClick the add button and configure the huge dialog. You only need to set the incoming feed and the stream types:\n(Now you’ll see a very wide table looking something like this:\nThis shows two things:\n The processor for the pipeline The filter that determines what data is passed to the processor  If you scroll all the way over to the right you’ll see the Enabled checkbox:\nCheck enabled for the processor and the filter you’ve just created. This is it, everything we’ve done is about to start working on its own, just like it would in a real configuration.\nIf you keep refreshing this table it will show you the processing status which should change after a few seconds to show that the data you have uploaded is being or has been processed. Once this has happened you should be able to open the destination feed and see the output data (or errors if there were any).\nYou can see that there are the Raw Events and the processed Events. If you click on the Events then you can see all the XML that we’ve produced.\nTroubleshooting If nothing happens you might need to enable stream processing. This was explained earlier.\nNow you’ve processed your data you can go ahead and index it.\n","categories":"","description":"","excerpt":"Create a pipeline Pipelines control how data is processed in Stroom. …","ref":"/stroom-docs/hugo-docsy/docs/quick-start-guide/process/","tags":["processing"],"title":"Pipeline Processing"},{"body":"Before you can visualise your data with dashboards you have to index the data; First I opted for creating a specific volume to hold my data, just because I wanted to keep my shards away from the default volumes;\nGo to the Tools ➔ Volumes menu\nOnce the volumes dialogue opens click the blue plus sign at the top left of the window to add a new one\nSelect the node where you want the volume to be and the path you want to create, (because we are following the quick-start guide we just have one node and limited size, but we do want to set it as active so we can write documents to it and we want it to be public, because we might want other indexes to use it; your needs might be different.\nClick ok and we’re good to go.\nThen we can create an index by selecting index item in the explorer tree. You do this in the same way you create any of the items. Just select/create a folder that you want to create the new index in and right click, select New Index.\nChoose a name for your new index\nIn the settings tab we need to specify the volume where we will store our shards\nNow you need to add fields to this index.\nFirstly there are two mandatory fields that need to be added: StreamId and EventId\nBoth should be of type Id, stored and indexed with the Keyword analyser\nIf you were following the quick-start instruction on ingesting the mock_stroom_data.csv, we’ll use those fields here.\nOpen the fields tab then create the following fields:\n   Name Type Store Index Positions Analyser Case Sensitive     StreamId Id Yes Yes No Keyword false   EventId Id Yes Yes No Keyword false   Id Text Yes Yes No Keyword false   Guid Text Yes Yes No Alpha numeric false   FromIp Text Yes Yes Yes Keyword false   ToIp Text Yes Yes Yes Keyword false   Application Text Yes Yes Yes Alpha numeric false    We are creating fields in our index to match the fields we have ingested to provide a place for the data to go that Stroom can reference.\nWhen you’ve done that, save the new index.\nNow create a new XSLT. We are going to convert xml data into something indexable by Stroom.\nTo make things manageable we create our new XSLT with the same name as the index in the same folder. After you’ve set the name just save it and close it, we’ll add some code in there later.\nNow we get to send data to the index\nCreate a new pipeline called Indexing (we are going to make this a template for future indexing requirements).\nEdit the structure of the pipeline\nAdd the following element types with the specified names\n   Type Name     XMLParser parser   SplitFilter splitFilter   IdEnrichmentFilter idEnrichmentFilter   XSLTFilter xsltFilter   IndexingFilter indexingFilter    So it looks like this (excluding the ReadRecordCountFilter and WriteRecordCountFilter elements)\nOnce the elements have been added you need to set the following property on the elements:\n   Element Property Value     splitFilter splitCount 100    To do this we select the element then double click the property value in the property panel which is below it.\nThe dialogue pops up where you can set the values\nSave the pipeline, using the top left icon (), then close the pipeline tab.\nNow create a new pipeline\nWhich we will base on our new “Indexing” template pipeline\nOn our structure tab\nClick in the “Inherit From” window\nSelect our Indexing pipeline template that we just created\nNow we need to set the XSLT property on the xsltFilter to point at the XSLT we created earlier and set the index on the indexFilter to point to the index we created. This will appear as below (excluding the ReadRecordCountFilter and WriteRecordCountFilter elements)\nOnce that’s done you can save your new pipeline\nNext we need to create an XSLT that the IndexingFilter understands.\nOpen the feed we created in the quick-start guide if you find some processed data in your feed - i.e. browse the data\nClick the stepping button Select your new pipeline\nPaste the following into your xsltFilter\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e \u003cxsl:stylesheet xmlns=\"records:2\" xmlns:stroom=\"stroom\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\"\u003e \u003cxsl:template match=\"/Events\"\u003e \u003crecords xsi:schemaLocation=\"records:2 file://records-v2.0.xsd\" version=\"2.0\"\u003e \u003cxsl:apply-templates /\u003e \u003c/records\u003e \u003c/xsl:template\u003e \u003cxsl:template match=\"Event\"\u003e \u003crecord\u003e \u003cdata name=\"StreamId\"\u003e \u003cxsl:attribute name=\"value\" select=\"@StreamId\" /\u003e \u003c/data\u003e \u003cdata name=\"EventId\"\u003e \u003cxsl:attribute name=\"value\" select=\"@EventId\" /\u003e \u003c/data\u003e \u003cxsl:apply-templates select=\"*\" /\u003e \u003c/record\u003e \u003c/xsl:template\u003e \u003c!-- Index the Id --\u003e \u003cxsl:template match=\"Id\"\u003e \u003cdata name=\"Id\"\u003e \u003cxsl:attribute name=\"value\" select=\"text()\" /\u003e \u003c/data\u003e \u003c/xsl:template\u003e \u003c!-- Index the Guid --\u003e \u003cxsl:template match=\"Guid\"\u003e \u003cdata name=\"Guid\"\u003e \u003cxsl:attribute name=\"value\" select=\"text()\" /\u003e \u003c/data\u003e \u003c/xsl:template\u003e \u003c!-- Index the FromIp --\u003e \u003cxsl:template match=\"FromIp\"\u003e \u003cdata name=\"FromIp\"\u003e \u003cxsl:attribute name=\"value\" select=\"text()\" /\u003e \u003c/data\u003e \u003c/xsl:template\u003e \u003c!-- Index the ToIp --\u003e \u003cxsl:template match=\"ToIp\"\u003e \u003cdata name=\"ToIp\"\u003e \u003cxsl:attribute name=\"value\" select=\"text()\" /\u003e \u003c/data\u003e \u003c/xsl:template\u003e \u003c!-- Index the Application --\u003e \u003cxsl:template match=\"Application\"\u003e \u003cdata name=\"Application\"\u003e \u003cxsl:attribute name=\"value\" select=\"text()\" /\u003e \u003c/data\u003e \u003c/xsl:template\u003e \u003c/xsl:stylesheet\u003e  Which should look like this\nWhat we are trying to do is turn the data into Stroom record format. This is basically name value pairs that we pass to the index. Step through the data using the top right arrows to ensure the XSLT produces correct output.\nWe’re nearly there for indexing the data - you just need to tell the pipeline to pick up all processed data and index it.\nGo back to your pipeline and go to the processors tab.\nAdd a filter using () and tell it to process all Events data when the filter dialogue opens so it looks like this\nEnable the processor and the filter by clicking the enabled tick boxes\nStroom should then index the data, assuming everything is correct\nIf there are errors you’ll see error streams produced in the data browsing page, i.e. where you would normally see your processed and raw data. If no errors have occurred, there will be no rows in the data page.\nIf it all goes to plan you’ll see index shards appear if you open the index you created and click the shards tab.\nThe document count doesn’t update immediately so don’t worry if the count is 0. The count is updated on shard flush and happens in the background.\nNow that we have finished indexing we can display data on a dashboard.\n","categories":"","description":"","excerpt":"Before you can visualise your data with dashboards you have to index …","ref":"/stroom-docs/hugo-docsy/docs/quick-start-guide/index/","tags":["index"],"title":"Indexing"},{"body":"Create a new dashboard the same way you create anything else\nOn the query pane click the settings () button on the top right of the panel.\nChoose the index you just created as your data source.\nNow add a term to the query to get a handle on the data\nFor our simple example we’re using a wildcard that captures all documents with an Id set.\nWithin the table panel we now need to set a few defaults. On the table pane click the settings () button on the top right of the panel. Extract Values needs to be ticked. If grouping is to be used and the content of the groups is to be viewed then Show Group Detail should also be ticked. The Maximum Results field may also be changed from default if required to limit the results or if more results are expected than the default value. Be aware that setting this value too high may result in excessive memory being used by the query process though.\nWe now need to select a pipeline to display the results in the table by setting Extraction Pipeline. The simplest way is to create and save a new pipeline based on the existing Search Extraction template pipeline. Within this new pipeline, use either the XSLT used for indexing the data or preferably a copy of this XSLT saved elsewhere. The extraction pipeline and the dashboard itself should then be saved.\nIn the table panel we can add the fields we are interested in, in this case we wanted to sort the application field and count how many time the application name appears.\nIf at this point, we decide that we’d like to see additional fields in the table extracted from each record then the Extraction Pipeline XSLT can be modified to extract them from the Event:\n... \u003cxsl:template match=\"/xpath/to/usefulField\"\u003e \u003cdata name=\"UsefulField\"\u003e \u003cxsl:attribute name=\"value\" select=\"text()\" /\u003e \u003c/data\u003e \u003c/xsl:template\u003e ...  To be able to select this new field from the table drop-down, it needs to be added back into the list of fields in the original index:\n   Name Type Store Index Positions Analyser Case Sensitive     UsefulField Text No No No Keyword false    If any additionals are made at this point, the index must first be saved and then the dashboard closed and reopened. UsefulField will then be available as a drop-down option in the table.\nStart the query and we should get this\nThen we can add an element from the top again and this time use visualisation\nIn the visualisation panel that has been added to the bottom, click the settings () button on the top right of the panel.\nIn our example we have used the Bubble visualisation\nWhich gives us this visualisation when the query is executed\nWhere you can hover over elements and get a summary of that representation.\n","categories":"","description":"","excerpt":"Create a new dashboard the same way you create anything else\nOn the …","ref":"/stroom-docs/hugo-docsy/docs/quick-start-guide/dashboard/","tags":["dashboard"],"title":"Dashboards"},{"body":"","categories":"","description":"Stroom Proxy acts as a proxy when sending data to a Stroom instance. Stroom Proxy has various modes such as storing, aggregating and forwarding the received data. Stroom Proxies can forward to other Stroom Proxy instances.\n","excerpt":"Stroom Proxy acts as a proxy when sending data to a Stroom instance. …","ref":"/stroom-docs/hugo-docsy/docs/proxy/","tags":["proxy"],"title":"Stroom Proxy"},{"body":"This page can be used as a reference for finding icons and their filenames to use them in the documentation.\nGeneral icons add-above.svg  add-below.svg  add.svg  alert.svg  clear.svg  close-grey.svg  close.svg  collapse-up.svg  copy.svg  database.svg  delete.svg  deleted.svg  dependencies.svg  disable.svg  down.svg  download.svg  drop-down.svg  edit.svg  ellipses-horizontal.svg  ellipses-vertical.svg  error.svg  expand-down.svg  explorer.svg  fast-backward-green.svg  fast-backward.svg  fast-forward-green.svg  fast-forward.svg  fatal.svg  favourites.svg  feed.svg  field.svg  file-formatted.svg  file-raw.svg  file.svg  filter.svg  folder-tree.svg  folder.svg  format.svg  function.svg  generate.svg  help.svg  hide.svg  history.svg  info-deleted.svg  info-warning.svg  info.svg  jobs.svg  key.svg  lock-green.svg  locked-amber.svg  logo.svg  logout.svg  monitoring.svg  move.svg  nodes.svg  oo.svg  operator.svg  password.svg  pause.svg  play-green.svg  play.svg  process.svg  properties.svg  raw.svg  refresh-green.svg  refresh.svg  remove.svg  ruleset.svg  save.svg  saveas.svg  settings-blue.svg  settings-grey.svg  settings.svg  shard-close.svg  shard-flush.svg  show.svg  spinner.svg  step-backward-green.svg  step-backward.svg  step-forward-green.svg  step-forward.svg  step.svg  stepping.svg  stop-red.svg  stop.svg  table-nested.svg  table.svg  tree-closed.svg  tree-leaf.svg  tree-open.svg  undo.svg  unlock-amber.svg  unlocked-green.svg  up.svg  upload.svg  user-disabled.svg  user.svg  users-disabled.svg  users.svg  volumes.svg   Pipeline element icons ElasticSearch.svg  StroomStatsStore.svg  analyticOutput.svg  apache_kafka-icon.svg  file.svg  files.svg  hadoop-elephant-logo.svg  id.svg  index.svg  json.svg  kafka.svg  recordCount.svg  recordOutput.svg  referenceData.svg  search.svg  solr.svg  split.svg  statistics.svg  stream.svg  stroomStats.svg  text.svg  xml.svg  xmlSearch.svg  xsd.svg  xslt.svg   Document type icons AnalyticOutputStore.svg  AnnotationsIndex.svg  Dashboard.svg  Dictionary.svg  ElasticIndex.svg  Feed.svg  Folder.svg  Index.svg  KafkaConfig.svg  Pipeline.svg  ReceiveDataRuleSet.svg  Script.svg  SelectAllOrNone.svg  SolrIndex.svg  StatisticStore.svg  StroomStatsStore.svg  System.svg  TextConverter.svg  Visualisation.svg  XMLSchema.svg  XSLT.svg  searchable.svg   ","categories":"","description":"A gallery of all the icons in use in stroom for reference.\n","excerpt":"A gallery of all the icons in use in stroom for reference.\n","ref":"/stroom-docs/hugo-docsy/docs/style-guide/icon-gallery/","tags":"","title":"Icon Gallery"},{"body":"","categories":"","description":"Example content from docsy-example\n","excerpt":"Example content from docsy-example\n","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/","tags":"","title":"Docsy Examples (DRAFT)"},{"body":"Assumptions The following assumptions are used in this document.\n the user has reasonable RHEL/Centos System administration skills installations are on Centos 7.3 minimal systems (fully patched) the security of the HTTPD deployment should be reviewed for a production environment.  Installation of Apache httpd and Mod_JK Software To deploy Stroom using Apache’s httpd web service as a front end (https) and Apache’s mod_jk as the interface between Apache and the Stroom tomcat applications, we also need\n apr apr-util apr-devel gcc httpd httpd-devel mod_ssl epel-release tomcat-native apache’s mod_jk tomcat connector plugin  Most of the required software are packages available via standard repositories and hence we can simply execute\nsudo yum -y install apr apr-util apr-devel gcc httpd httpd-devel mod_ssl epel-release sudo yum -y install tomcat-native  The reason for the distinct tomcat-native installation is that this package is from the EPEL (external link) repository so it must be installed first.\nFor the Apache mod_jk Tomcat connector we need to acquire a recent release (external link) and install it. The following commands achieve this for the 1.2.42 release.\nsudo bash cd /tmp V=1.2.42 wget https://www.apache.org/dist/tomcat/tomcat-connectors/jk/tomcat-connectors-${V}-src.tar.gz tar xf tomcat-connectors-${V}-src.tar.gz cd tomcat-connectors-*-src/native ./configure --with-apxs=/bin/apxs make \u0026\u0026 make install cd /tmp rm -rf tomcat-connectors-*-src  Although you could remove the gcc compiler at this point, we leave it installed as one should continue to upgrade the Tomcat Connectors to later releases.\nConfigure Apache httpd We need to configure Apache as the root user.\nIf the Apache httpd service is ‘fronting’ a Stroom user interface, we should create an index file (/var/www/html/index.html) on all nodes so browsing to the root of the node will present the Stroom UI. This is not needed if you are deploying a Forwarding or Standalone Stroom proxy.\nForwarding file for Stroom User Interface deployments F=/var/www/html/index.html printf '\u003chtml\u003e\\n' \u003e ${F} printf '\u003chead\u003e\\n' \u003e\u003e ${F} printf ' \u003cmeta http-equiv=\"Refresh\" content=\"0; URL=stroom\"/\u003e\\n' \u003e\u003e ${F} printf '\u003c/head\u003e\\n' \u003e\u003e ${F} printf '\u003c/html\u003e\\n' \u003e\u003e ${F} chmod 644 ${F}  Remember, deploy this file on all nodes running the Stroom Application.\nHttpd.conf Configuration We modify /etc/httpd/conf/httpd.conf on all nodes, but backup the file first with\ncp /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.ORIG  Irrespective of the Stroom scenario being deployed - Multi Node Stroom (Application and Proxy), single Standalone Stroom Proxy or single Forwarding Stroom Proxy, the configuration of the /etc/httpd/conf/httpd.conf file is the same.\nWe start by modify the configuration file by, add just before the ServerRoot directive the following directives which are designed to make the httpd service more secure.\n# Stroom Change: Start - Apply generic security directives ServerTokens Prod ServerSignature Off FileETag None RewriteEngine On RewriteCond %{THE_REQUEST} !HTTP/1.1$ RewriteRule .* - [F] Header set X-XSS-Protection \"1; mode=block\" # Stroom Change: End  That is,\n... # Do not add a slash at the end of the directory path. If you point # ServerRoot at a non-local disk, be sure to specify a local disk on the # Mutex directive, if file-based mutexes are used. If you wish to share the # same ServerRoot for multiple httpd daemons, you will need to change at # least PidFile. # ServerRoot \"/etc/httpd\" # # Listen: Allows you to bind Apache to specific IP addresses and/or ...  becomes\n... # Do not add a slash at the end of the directory path. If you point # ServerRoot at a non-local disk, be sure to specify a local disk on the # Mutex directive, if file-based mutexes are used. If you wish to share the # same ServerRoot for multiple httpd daemons, you will need to change at # least PidFile. # # Stroom Change: Start - Apply generic security directives ServerTokens Prod ServerSignature Off FileETag None RewriteEngine On RewriteCond %{THE_REQUEST} !HTTP/1.1$ RewriteRule .* - [F] Header set X-XSS-Protection \"1; mode=block\" # Stroom Change: End ServerRoot \"/etc/httpd\" # # Listen: Allows you to bind Apache to specific IP addresses and/or ...  We now block access to the /var/www directory by commenting out\n\u003cDirectory \"/var/www\"\u003e AllowOverride None # Allow open access: Require all granted \u003c/Directory\u003e  that is\n... # # Relax access to content within /var/www. # \u003cDirectory \"/var/www\"\u003e AllowOverride None # Allow open access: Require all granted \u003c/Directory\u003e # Further relax access to the default document root: ...  becomes\n... # # Relax access to content within /var/www. # # Stroom Change: Start - Block access to /var/www # \u003cDirectory \"/var/www\"\u003e # AllowOverride None # # Allow open access: # Require all granted # \u003c/Directory\u003e # Stroom Change: End # Further relax access to the default document root: ...  then within the /var/www/html directory turn off Indexes FollowSymLinks by commenting out the line\nOptions Indexes FollowSymLinks  That is\n... # The Options directive is both complicated and important. Please see # http://httpd.apache.org/docs/2.4/mod/core.html#options # for more information. # Options Indexes FollowSymLinks # # AllowOverride controls what directives may be placed in .htaccess files. # It can be \"All\", \"None\", or any combination of the keywords: ...  becomes\n... # The Options directive is both complicated and important. Please see # http://httpd.apache.org/docs/2.4/mod/core.html#options # for more information. # # Stroom Change: Start - turn off indexes and FollowSymLinks # Options Indexes FollowSymLinks # Stroom Change: End # # AllowOverride controls what directives may be placed in .htaccess files. # It can be \"All\", \"None\", or any combination of the keywords: ...  Then finally we add two new log formats and configure the access log to use the new format. This is done within the \u003cIfModule logio_module\u003e by adding the two new LogFormat directives\nLogFormat \"%a/%{REMOTE_PORT}e %X %t %l \\\"%u\\\" \\\"%r\\\" %s/%\u003es %D %I/%O/%B \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %V/%p\" blackboxUser LogFormat \"%a/%{REMOTE_PORT}e %X %t %l \\\"%{SSL_CLIENT_S_DN}x\\\" \\\"%r\\\" %s/%\u003es %D %I/%O/%B \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %V/%p\" blackboxSSLUser  and replacing the CustomLog directive\nCustomLog \"logs/access_log\" combined  with\nCustomLog logs/access_log blackboxSSLUser  That is\n... LogFormat \"%h %l %u %t \\\"%r\\\" %\u003es %b\" common \u003cIfModule logio_module\u003e # You need to enable mod_logio.c to use %I and %O LogFormat \"%h %l %u %t \\\"%r\\\" %\u003es %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %I %O\" combinedio \u003c/IfModule\u003e # # The location and format of the access logfile (Common Logfile Format). # If you do not define any access logfiles within a \u003cVirtualHost\u003e # container, they will be logged here. Contrariwise, if you *do* # define per-\u003cVirtualHost\u003e access logfiles, transactions will be # logged therein and *not* in this file. # #CustomLog \"logs/access_log\" common # # If you prefer a logfile with access, agent, and referer information # (Combined Logfile Format) you can use the following directive. # CustomLog \"logs/access_log\" combined \u003c/IfModule\u003e ...  becomes\n... LogFormat \"%h %l %u %t \\\"%r\\\" %\u003es %b\" common \u003cIfModule logio_module\u003e # You need to enable mod_logio.c to use %I and %O LogFormat \"%h %l %u %t \\\"%r\\\" %\u003es %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %I %O\" combinedio # Stroom Change: Start - Add new logformats LogFormat \"%a/%{REMOTE_PORT}e %X %t %l \\\"%u\\\" \\\"%r\\\" %s/%\u003es %D %I/%O/%B \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %V/%p\" blackboxUser LogFormat \"%a/%{REMOTE_PORT}e %X %t %l \\\"%{SSL_CLIENT_S_DN}x\\\" \\\"%r\\\" %s/%\u003es %D %I/%O/%B \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %V/%p\" blackboxSSLUser # Stroom Change: End \u003c/IfModule\u003e # Stroom Change: Start - Add new logformats without the additional byte values \u003cIfModule !logio_module\u003e LogFormat \"%a/%{REMOTE_PORT}e %X %t %l \\\"%u\\\" \\\"%r\\\" %s/%\u003es %D 0/0/%B \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %V/%p\" blackboxUser LogFormat \"%a/%{REMOTE_PORT}e %X %t %l \\\"%{SSL_CLIENT_S_DN}x\\\" \\\"%r\\\" %s/%\u003es %D 0/0/%B \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %V/%p\" blackboxSSLUser \u003c/IfModule\u003e # Stroom Change: End # # The location and format of the access logfile (Common Logfile Format). # If you do not define any access logfiles within a \u003cVirtualHost\u003e # container, they will be logged here. Contrariwise, if you *do* # define per-\u003cVirtualHost\u003e access logfiles, transactions will be # logged therein and *not* in this file. # #CustomLog \"logs/access_log\" common # # If you prefer a logfile with access, agent, and referer information # (Combined Logfile Format) you can use the following directive. # # Stroom Change: Start - Make the access log use a new format # CustomLog \"logs/access_log\" combined CustomLog logs/access_log blackboxSSLUser # Stroom Change: End \u003c/IfModule\u003e ...  Remember, deploy this file on all nodes.\nConfiguration of ssl.conf We modify /etc/httpd/conf.d/ssl.conf on all nodes, backing up first,\ncp /etc/httpd/conf.d/ssl.conf /etc/httpd/conf.d/ssl.conf.ORIG  The configuration of the /etc/httpd/conf.d/ssl.conf does change depending on the Stroom scenario deployed. In the following we will indicate differences by tagged sub-headings. If the configuration applies irrespective of scenario, then All scenarios is the tag, else the tag indicated the type of Stroom deployment.\nssl.conf: HTTP to HTTPS Redirection - All scenarios Before the context we add http to https redirection by adding the directives (noting we specify the actual server name)\n\u003cVirtualHost *:80\u003e ServerName stroomp00.strmdev00.org Redirect permanent \"/\" \"https://stroomp00.strmdev00.org/\" \u003c/VirtualHost\u003e  That is, we change\n... ## SSL Virtual Host Context ## \u003cVirtualHost _default_:443\u003e ...  to\n... ## SSL Virtual Host Context ## # Stroom Change: Start - Add http redirection to https \u003cVirtualHost *:80\u003e ServerName stroomp00.strmdev00.org Redirect permanent \"/\" \"https://stroomp00.strmdev00.org/\" \u003c/VirtualHost\u003e # Stroom Change: End \u003cVirtualHost _default_:443\u003e  ssl.conf: VirtualHost directives - Multi Node ‘Application and Proxy’ deployment Within the context we set the directives, in this case, we use the CNAME stroomp.strmdev00.org\nServerName stroomp.strmdev00.org JkMount /stroom* loadbalancer JkMount /stroom/remoting/cluster* local JkMount /stroom/datafeed* loadbalancer_proxy JkMount /stroom/remoting* loadbalancer_proxy JkMount /stroom/datafeed/direct* loadbalancer JkOptions +ForwardKeySize +ForwardURICompat +ForwardSSLCertChain -ForwardDirectories  That is, we change\n... \u003cVirtualHost _default_:443\u003e # General setup for the virtual host, inherited from global configuration #DocumentRoot \"/var/www/html\" #ServerName www.example.com:443 # Use separate log files for the SSL virtual host; note that LogLevel # is not inherited from httpd.conf. ...  to\n... \u003cVirtualHost _default_:443\u003e # General setup for the virtual host, inherited from global configuration #DocumentRoot \"/var/www/html\" #ServerName www.example.com:443 # Stroom Change: Start - Set servername and mod_jk connectivity ServerName stroomp.strmdev00.org JkMount /stroom* loadbalancer JkMount /stroom/remoting/cluster* local JkMount /stroom/datafeed* loadbalancer_proxy JkMount /stroom/remoting* loadbalancer_proxy JkMount /stroom/datafeed/direct* loadbalancer JkOptions +ForwardKeySize +ForwardURICompat +ForwardSSLCertChain -ForwardDirectories # Stroom Change: End # Use separate log files for the SSL virtual host; note that LogLevel # is not inherited from httpd.conf. ...  ssl.conf: VirtualHost directives - Standalone or Forwarding Proxy deployment Within the context set the directives, in this case, for a node named say stroomfp0.strmdev00.org\nServerName stroomfp0.strmdev00.org JkMount /stroom/datafeed* local_proxy JkOptions +ForwardKeySize +ForwardURICompat +ForwardSSLCertChain -ForwardDirectories  That is, we change\n... \u003cVirtualHost _default_:443\u003e # General setup for the virtual host, inherited from global configuration #DocumentRoot \"/var/www/html\" #ServerName www.example.com:443 # Use separate log files for the SSL virtual host; note that LogLevel # is not inherited from httpd.conf. ...  to\n... \u003cVirtualHost _default_:443\u003e # General setup for the virtual host, inherited from global configuration #DocumentRoot \"/var/www/html\" #ServerName www.example.com:443 # Stroom Change: Start - Set servername and mod_jk connectivity ServerName stroomfp0.strmdev00.org JkMount /stroom/datafeed* local_proxy JkOptions +ForwardKeySize +ForwardURICompat +ForwardSSLCertChain -ForwardDirectories # Stroom Change: End # Use separate log files for the SSL virtual host; note that LogLevel # is not inherited from httpd.conf. ...  ssl.conf: VirtualHost directives - Single Node ‘Application and Proxy’ deployment Within the context set the directives, in this case, for a node name stroomp00.strmdev00.org\nServerName stroomp00.strmdev00.org JkMount /stroom* local JkMount /stroom/remoting/cluster* local JkMount /stroom/datafeed* local_proxy JkMount /stroom/remoting* local_proxy JkMount /stroom/datafeed/direct* local JkOptions +ForwardKeySize +ForwardURICompat +ForwardSSLCertChain -ForwardDirectories  That is, we change\n... \u003cVirtualHost _default_:443\u003e # General setup for the virtual host, inherited from global configuration #DocumentRoot \"/var/www/html\" #ServerName www.example.com:443 # Use separate log files for the SSL virtual host; note that LogLevel # is not inherited from httpd.conf. ...  to\n... \u003cVirtualHost _default_:443\u003e # General setup for the virtual host, inherited from global configuration #DocumentRoot \"/var/www/html\" #ServerName www.example.com:443 # Stroom Change: Start - Set servername and mod_jk connectivity ServerName stroomp00.strmdev00.org JkMount /stroom* local JkMount /stroom/remoting/cluster* local JkMount /stroom/datafeed* local_proxy JkMount /stroom/remoting* local_proxy JkMount /stroom/datafeed/direct* local JkOptions +ForwardKeySize +ForwardURICompat +ForwardSSLCertChain -ForwardDirectories # Stroom Change: End # Use separate log files for the SSL virtual host; note that LogLevel # is not inherited from httpd.conf. ...  ssl.conf: Certificate file changes - All scenarios We replace the standard certificate files with the generated certificates. In the example below, we are using the multi node scenario, in that the key file names are stroomp.crt and stroomp.key. For other scenarios, use the appropriate file names generated. We replace\nSSLCertificateFile /etc/pki/tls/certs/localhost.crt  with\nSSLCertificateFile /home/stroomuser/stroom-jks/public/stroomp.crt  and\nSSLCertificateKeyFile /etc/pki/tls/private/localhost.key  with\nSSLCertificateKeyFile /home/stroomuser/stroom-jks/private/stroomp.key  That is, change\n... # pass phrase. Note that a kill -HUP will prompt again. A new # certificate can be generated using the genkey(1) command. SSLCertificateFile /etc/pki/tls/certs/localhost.crt # Server Private Key: # If the key is not combined with the certificate, use this # directive to point at the key file. Keep in mind that if # you've both a RSA and a DSA private key you can configure # both in parallel (to also allow the use of DSA ciphers, etc.) SSLCertificateKeyFile /etc/pki/tls/private/localhost.key # Server Certificate Chain: # Point SSLCertificateChainFile at a file containing the ...  to\n... # pass phrase. Note that a kill -HUP will prompt again. A new # certificate can be generated using the genkey(1) command. # Stroom Change: Start - Replace with Stroom server certificate # SSLCertificateFile /etc/pki/tls/certs/localhost.crt SSLCertificateFile /home/stroomuser/stroom-jks/public/stroomp.crt # Stroom Change: End # Server Private Key: # If the key is not combined with the certificate, use this # directive to point at the key file. Keep in mind that if # you've both a RSA and a DSA private key you can configure # both in parallel (to also allow the use of DSA ciphers, etc.) # Stroom Change: Start - Replace with Stroom server private key file # SSLCertificateKeyFile /etc/pki/tls/private/localhost.key SSLCertificateKeyFile /home/stroomuser/stroom-jks/private/stroomp.key # Stroom Change: End # Server Certificate Chain: # Point SSLCertificateChainFile at a file containing the ...  ssl.conf: Certificate Bundle/NO-CA Verification - All scenarios If you have signed your Stroom server certificate with a Certificate Authority, then change\nSSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt  to be your own certificate bundle which you should probably store as ~stroomuser/stroom-jks/public/stroomp-ca-bundle.crt.\nNow if you are using a self signed certificate, you will need to set the Client Authentication to have a value of\nSSLVerifyClient optional_no_ca  noting that this may change if you actually use a CA. That is, changing\n... # Client Authentication (Type): # Client certificate verification type and depth. Types are # none, optional, require and optional_no_ca. Depth is a # number which specifies how deeply to verify the certificate # issuer chain before deciding the certificate is not valid. #SSLVerifyClient require #SSLVerifyDepth 10 # Access Control: # With SSLRequire you can do per-directory access control based ...  to\n... # Client Authentication (Type): # Client certificate verification type and depth. Types are # none, optional, require and optional_no_ca. Depth is a # number which specifies how deeply to verify the certificate # issuer chain before deciding the certificate is not valid. #SSLVerifyClient require #SSLVerifyDepth 10 # Stroom Change: Start - Set optional_no_ca (given we have a self signed certificate) SSLVerifyClient optional_no_ca # Stroom Change: End # Access Control: # With SSLRequire you can do per-directory access control based ...  ssl.conf: Servlet Protection - Single or Multi Node scenarios (not for Standalone/Forwarding Proxy) We now need to secure certain Stroom Application servlets, to ensure they are only accessed under appropriate control.\nThis set of servlets will be accessible by all nodes in the subnet 192.168.2 (as well as localhost). We achieve this by adding after the example Location directives\n\u003cLocation ~ \"stroom/(status|echo|sessionList|debug)\" \u003e Require all denied Require ip 127.0.0.1 192.168.2 \u003c/Location\u003e  We further restrict the clustercall and export servlets to just the localhost. If we had multiple Stroom processing nodes, you would specify each node, or preferably, the subnet they are on. In our multi node case this is 192.168.2.\n\u003cLocation ~ \"stroom/export/|stroom/remoting/clustercall.rpc\" \u003e Require all denied Require ip 127.0.0.1 192.168.2 \u003c/Location\u003e  That is, the following\n... # and %{TIME_WDAY} \u003e= 1 and %{TIME_WDAY} \u003c= 5 \\ # and %{TIME_HOUR} \u003e= 8 and %{TIME_HOUR} \u003c= 20 ) \\ # or %{REMOTE_ADDR} =~ m/^192\\.76\\.162\\.[0-9]+$/ #\u003c/Location\u003e # SSL Engine Options: # Set various options for the SSL engine. # o FakeBasicAuth: ...  changes to\n... # and %{TIME_WDAY} \u003e= 1 and %{TIME_WDAY} \u003c= 5 \\ # and %{TIME_HOUR} \u003e= 8 and %{TIME_HOUR} \u003c= 20 ) \\ # or %{REMOTE_ADDR} =~ m/^192\\.76\\.162\\.[0-9]+$/ #\u003c/Location\u003e # Stroom Change: Start - Lock access to certain servlets \u003cLocation ~ \"stroom/(status|echo|sessionList|debug)\" \u003e Require all denied Require ip 127.0.0.1 192.168.2 \u003c/Location\u003e # Lock these Servlets more securely - to just localhost and processing node(s) \u003cLocation ~ \"stroom/export/|stroom/remoting/clustercall.rpc\" \u003e Require all denied Require ip 127.0.0.1 192.168.2 \u003c/Location\u003e # Stroom Change: End # SSL Engine Options: # Set various options for the SSL engine. # o FakeBasicAuth: ...  ssl.conf: Log formats - All scenarios Finally, as we make use of the Black Box Apache log format, we replace the standard format\nCustomLog logs/ssl_request_log \\ \"%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \\\"%r\\\" %b\"  with\nCustomLog logs/ssl_request_log blackboxSSLUser  That is, change\n... # Per-Server Logging: # The home of a custom SSL log file. Use this when you want a # compact non-error SSL logfile on a virtual host basis. CustomLog logs/ssl_request_log \\ \"%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \\\"%r\\\" %b\" \u003c/VirtualHost\u003e  to\n... # Per-Server Logging: # The home of a custom SSL log file. Use this when you want a # compact non-error SSL logfile on a virtual host basis. # Stroom Change: Start - Change ssl_request log to use our BlackBox format # CustomLog logs/ssl_request_log \\ # \"%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \\\"%r\\\" %b\" CustomLog logs/ssl_request_log blackboxSSLUser # Stroom Change: End \u003c/VirtualHost\u003e  Remember, in the case of Multi node stroom Application servers, deploy this file on all servers.\nApache Mod_JK configuration Apache Mod_JK has two configuration files\n /etc/httpd/conf.d/mod_jk.conf - for the http server configuration /etc/httpd/conf/workers.properties - to configure the Tomcat workers  In multi node scenarios, /etc/httpd/conf.d/mod_jk.conf is the same on all servers, but the /etc/httpd/conf/workers.properties file is different. The contents of these two configuration files differ depending on the Stroom deployment. The following provide the various deployment scenarios.\nMod_JK Multi Node Application and Proxy Deployment For a Stroom Multi node Application and Proxy server,\n we configure /etc/httpd/conf.d/mod_jk.conf as per  F=/etc/httpd/conf.d/mod_jk.conf printf 'LoadModule jk_module modules/mod_jk.so\\n' \u003e ${F} printf 'JkWorkersFile conf/workers.properties\\n' \u003e\u003e ${F} printf 'JkLogFile logs/mod_jk.log\\n' \u003e\u003e ${F} printf 'JkLogLevel info\\n' \u003e\u003e ${F} printf 'JkLogStampFormat \"[%%a %%b %%d %%H:%%M:%%S %%Y]\"\\n' \u003e\u003e ${F} printf 'JkOptions +ForwardKeySize +ForwardURICompat +ForwardSSLCertChain -ForwardDirectories\\n' \u003e\u003e ${F} printf 'JkRequestLogFormat \"%%w %%V %%T\"\\n' \u003e\u003e ${F} printf 'JkMount /stroom* loadbalancer\\n' \u003e\u003e ${F} printf 'JkMount /stroom/remoting/cluster* local\\n' \u003e\u003e ${F} printf 'JkMount /stroom/datafeed* loadbalancer_proxy\\n' \u003e\u003e ${F} printf 'JkMount /stroom/remoting* loadbalancer_proxy\\n' \u003e\u003e ${F} printf 'JkMount /stroom/datafeed/direct* loadbalancer\\n' \u003e\u003e ${F} printf '# Note: Replaced JkShmFile logs/jk.shm due to SELinux issues. Refer to\\n' \u003e\u003e ${F} printf '# https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=225452\\n' \u003e\u003e ${F} printf '# The following makes use of the existing /run/httpd directory\\n' \u003e\u003e ${F} printf 'JkShmFile run/jk.shm\\n' \u003e\u003e ${F} printf '\u003cLocation /jkstatus/\u003e\\n' \u003e\u003e ${F} printf ' JkMount status\\n' \u003e\u003e ${F} printf ' Order deny,allow\\n' \u003e\u003e ${F} printf ' Deny from all\\n' \u003e\u003e ${F} printf ' Allow from 127.0.0.1\\n' \u003e\u003e ${F} printf '\u003c/Location\u003e\\n' \u003e\u003e ${F} chmod 640 ${F}   we configure /etc/httpd/conf/workers.properties as per  Since we are deploying for a cluster with load balancing, we need a workers.properties file per node. Executing the following will result in two files (workers.properties.stroomp00 and workers.properties.stroomp01) which should be deployed to their respective servers.\ncd /tmp # Set the list of nodes Nodes=\"stroomp00.strmdev00.org stroomp01.strmdev00.org\" for oN in ${Nodes}; do _n=`echo ${oN} | cut -f1 -d\\.` ( printf '# Workers.properties for Stroom Cluster member: %s %s\\n' ${oN} printf 'worker.list=loadbalancer,loadbalancer_proxy,local,local_proxy,status\\n' L_t=\"\" Lp_t=\"\" for FQDN in ${Nodes}; do N=`echo ${FQDN} | cut -f1 -d\\.` printf 'worker.%s.port=8009\\n' ${N} printf 'worker.%s.host=%s\\n' ${N} ${FQDN} printf 'worker.%s.type=ajp13\\n' ${N} printf 'worker.%s.lbfactor=1\\n' ${N} printf 'worker.%s.max_packet_size=65536\\n' ${N} printf 'worker.%s_proxy.port=9009\\n' ${N} printf 'worker.%s_proxy.host=%s\\n' ${N} ${FQDN} printf 'worker.%s_proxy.type=ajp13\\n' ${N} printf 'worker.%s_proxy.lbfactor=1\\n' ${N} printf 'worker.%s_proxy.max_packet_size=65536\\n' ${N} L_t=\"${L_t}${N},\" Lp_t=\"${Lp_t}${N}_proxy,\" done L=`echo $L_t | sed -e 's/.$//'` Lp=`echo $Lp_t | sed -e 's/.$//'` printf 'worker.loadbalancer.type=lb\\n' printf 'worker.loadbalancer.balance_workers=%s\\n' $L printf 'worker.loadbalancer.sticky_session=1\\n' printf 'worker.loadbalancer_proxy.type=lb\\n' printf 'worker.loadbalancer_proxy.balance_workers=%s\\n' $Lp printf 'worker.loadbalancer_proxy.sticky_session=1\\n' printf 'worker.local.type=lb\\n' printf 'worker.local.balance_workers=%s\\n' ${_n} printf 'worker.local.sticky_session=1\\n' printf 'worker.local_proxy.type=lb\\n' printf 'worker.local_proxy.balance_workers=%s_proxy\\n' ${_n} printf 'worker.local_proxy.sticky_session=1\\n' printf 'worker.status.type=status\\n' ) \u003e workers.properties.${_n} chmod 640 workers.properties.${_n} done  Now depending in the node you are on, copy the relevant workers.properties.nodename file to /etc/httpd/conf/workers.properties. The following command makes this simple.\ncp workers.properties.`hostname -s` /etc/httpd/conf/workers.properties  If you were to add an additional node to a multi node cluster, say the node stroomp02.strmdev00.org, then you would re-run the above script with\nNodes=\"stroomp00.strmdev00.org stroomp01.strmdev00.org stroomp02.strmdev00.org\"  then redeploy all three files to the respective servers. Also note, that for the newly created workers.properties files for the existing nodes to take effect you will need to restart the Apache Httpd service on both nodes.\nRemember, in multi node cluster deployments, the following files are the same and hence can be created on one node, but copied to the others not forgetting to backup the other node’s original files. That is, the files\n /var/www/html/index.html /etc/httpd/conf.d/mod_jk.conf /etc/httpd/conf/httpd.conf  are to be the same on all nodes. Only the /etc/httpd/conf.d/ssl.conf and /etc/httpd/conf/workers.properties files change.\nMod_JK Standalone or Forwarding Stroom Proxy Deployment For a Stroom Standalone or Forwarding proxy,\n we configure /etc/httpd/conf.d/mod_jk.conf as per  F=/etc/httpd/conf.d/mod_jk.conf printf 'LoadModule jk_module modules/mod_jk.so\\n' \u003e ${F} printf 'JkWorkersFile conf/workers.properties\\n' \u003e\u003e ${F} printf 'JkLogFile logs/mod_jk.log\\n' \u003e\u003e ${F} printf 'JkLogLevel info\\n' \u003e\u003e ${F} printf 'JkLogStampFormat \"[%%a %%b %%d %%H:%%M:%%S %%Y]\"\\n' \u003e\u003e ${F} printf 'JkOptions +ForwardKeySize +ForwardURICompat +ForwardSSLCertChain -ForwardDirectories\\n' \u003e\u003e ${F} printf 'JkRequestLogFormat \"%%w %%V %%T\"\\n' \u003e\u003e ${F} printf 'JkMount /stroom/datafeed* local_proxy\\n' \u003e\u003e ${F} printf '# Note: Replaced JkShmFile logs/jk.shm due to SELinux issues. Refer to\\n' \u003e\u003e ${F} printf '# https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=225452\\n' \u003e\u003e ${F} printf '# The following makes use of the existing /run/httpd directory\\n' \u003e\u003e ${F} printf 'JkShmFile run/jk.shm\\n' \u003e\u003e ${F} printf '\u003cLocation /jkstatus/\u003e\\n' \u003e\u003e ${F} printf ' JkMount status\\n' \u003e\u003e ${F} printf ' Order deny,allow\\n' \u003e\u003e ${F} printf ' Deny from all\\n' \u003e\u003e ${F} printf ' Allow from 127.0.0.1\\n' \u003e\u003e ${F} printf '\u003c/Location\u003e\\n' \u003e\u003e ${F} chmod 640 ${F}   we configure /etc/httpd/conf/workers.properties as per  The variable N in the script below is to be the node name (not FQDN) of your sever (i.e. stroomfp0).\nN=stroomfp0 FQDN=`hostname -f` F=/etc/httpd/conf/workers.properties printf 'worker.list=local_proxy,status\\n' \u003e ${F} printf 'worker.%s_proxy.port=9009\\n' ${N} \u003e\u003e ${F} printf 'worker.%s_proxy.host=%s\\n' ${N} ${FQDN} \u003e\u003e ${F} printf 'worker.%s_proxy.type=ajp13\\n' ${N} \u003e\u003e ${F} printf 'worker.%s_proxy.lbfactor=1\\n' ${N} \u003e\u003e ${F} printf 'worker.local_proxy.type=lb\\n' \u003e\u003e ${F} printf 'worker.local_proxy.balance_workers=%s_proxy\\n' ${N} \u003e\u003e ${F} printf 'worker.local_proxy.sticky_session=1\\n' \u003e\u003e ${F} printf 'worker.status.type=status\\n' \u003e\u003e ${F} chmod 640 ${F}  Mod_JK Single Node Application and Proxy Deployment For a Stroom Single node Application and Proxy server,\n we configure /etc/httpd/conf.d/mod_jk.conf as per  F=/etc/httpd/conf.d/mod_jk.conf printf 'LoadModule jk_module modules/mod_jk.so\\n' \u003e ${F} printf 'JkWorkersFile conf/workers.properties\\n' \u003e\u003e ${F} printf 'JkLogFile logs/mod_jk.log\\n' \u003e\u003e ${F} printf 'JkLogLevel info\\n' \u003e\u003e ${F} printf 'JkLogStampFormat \"[%%a %%b %%d %%H:%%M:%%S %%Y]\"\\n' \u003e\u003e ${F} printf 'JkOptions +ForwardKeySize +ForwardURICompat +ForwardSSLCertChain -ForwardDirectories\\n' \u003e\u003e ${F} printf 'JkRequestLogFormat \"%%w %%V %%T\"\\n' \u003e\u003e ${F} printf 'JkMount /stroom* local\\n' \u003e\u003e ${F} printf 'JkMount /stroom/remoting/cluster* local\\n' \u003e\u003e ${F} printf 'JkMount /stroom/datafeed* local_proxy\\n' \u003e\u003e ${F} printf 'JkMount /stroom/remoting* local_proxy\\n' \u003e\u003e ${F} printf 'JkMount /stroom/datafeed/direct* local\\n' \u003e\u003e ${F} printf '# Note: Replaced JkShmFile logs/jk.shm due to SELinux issues. Refer to\\n' \u003e\u003e ${F} printf '# https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=225452\\n' \u003e\u003e ${F} printf '# The following makes use of the existing /run/httpd directory\\n' \u003e\u003e ${F} printf 'JkShmFile run/jk.shm\\n' \u003e\u003e ${F} printf '\u003cLocation /jkstatus/\u003e\\n' \u003e\u003e ${F} printf ' JkMount status\\n' \u003e\u003e ${F} printf ' Order deny,allow\\n' \u003e\u003e ${F} printf ' Deny from all\\n' \u003e\u003e ${F} printf ' Allow from 127.0.0.1\\n' \u003e\u003e ${F} printf '\u003c/Location\u003e\\n' \u003e\u003e ${F} chmod 640 ${F}   we configure /etc/httpd/conf/workers.properties as per  The variable N in the script below is to be the node name (not FQDN) of your sever (i.e. stroomp00).\nN=stroomp00 FQDN=`hostname -f` F=/etc/httpd/conf/workers.properties printf 'worker.list=local,local_proxy,status\\n' \u003e ${F} printf 'worker.%s.port=8009\\n' ${N} \u003e\u003e ${F} printf 'worker.%s.host=%s\\n' ${N} ${FQDN} \u003e\u003e ${F} printf 'worker.%s.type=ajp13\\n' ${N} \u003e\u003e ${F} printf 'worker.%s.lbfactor=1\\n' ${N} \u003e\u003e ${F} printf 'worker.%s.max_packet_size=65536\\n' ${N} \u003e\u003e ${F} printf 'worker.%s_proxy.port=9009\\n' ${N} \u003e\u003e ${F} printf 'worker.%s_proxy.host=%s\\n' ${N} ${FQDN} \u003e\u003e ${F} printf 'worker.%s_proxy.type=ajp13\\n' ${N} \u003e\u003e ${F} printf 'worker.%s_proxy.lbfactor=1\\n' ${N} \u003e\u003e ${F} printf 'worker.%s_proxy.max_packet_size=65536\\n' ${N} \u003e\u003e ${F} printf 'worker.local.type=lb\\n' \u003e\u003e ${F} printf 'worker.local.balance_workers=%s\\n' ${N} \u003e\u003e ${F} printf 'worker.local.sticky_session=1\\n' \u003e\u003e ${F} printf 'worker.local_proxy.type=lb\\n' \u003e\u003e ${F} printf 'worker.local_proxy.balance_workers=%s_proxy\\n' ${N} \u003e\u003e ${F} printf 'worker.local_proxy.sticky_session=1\\n' \u003e\u003e ${F} printf 'worker.status.type=status\\n' \u003e\u003e ${F} chmod 640 ${F}  Final host configuration and web service enablement Now tidy up the SELinux context for access on all nodes and files via the commands\nsetsebool -P httpd_enable_homedirs on setsebool -P httpd_can_network_connect on chcon --reference /etc/httpd/conf.d/README /etc/httpd/conf.d/mod_jk.conf chcon --reference /etc/httpd/conf/magic /etc/httpd/conf/workers.properties  We also enable both http and https services via the firewall on all nodes. If you don’t want to present a http access point, then don’t enable it in the firewall setting. This is done with\nfirewall-cmd --zone=public --add-service=http --permanent firewall-cmd --zone=public --add-service=https --permanent firewall-cmd --reload firewall-cmd --zone=public --list-all  Finally enable then start the httpd service, correcting any errors. It should be noted that on any errors, the suggestion of a systemctl status or viewing the journal are good, but also review information in the httpd error logs found in /var/log/httpd/.\nsystemctl enable httpd.service systemctl start httpd.service  ","categories":"","description":"The following is a HOWTO to assist users in configuring Apache's HTTPD with Mod_JK for Stroom.\n","excerpt":"The following is a HOWTO to assist users in configuring Apache's HTTPD …","ref":"/stroom-docs/hugo-docsy/docs/howtos/install/installhttpdhowto/","tags":["httpd","installation"],"title":"Apache Httpd/Mod_JK configuration for Stroom"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/certificates/","tags":"","title":"certificates"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/cluster/","tags":"","title":"cluster"},{"body":"A Reference Feed is a temporal set of data that a pipeline’s translation can look up to gain additional information to decorate the subject data of the translation. For example, an XML Event.\nA Reference Feed is temporal, in that, each time a new set of reference data is loaded into Stroom, the effective date (for the data) is also recorded. Thus by using a timestamp field with the subject data, the appropriate batch of reference data can be accessed.\nA typical reference data set to support the Stroom XML Event schema might be on that relates to devices. Such a data set can contain the device logical identifiers such as fully qualified domain name and ip address and their geographical location information such as country, site, building, room and timezone.\nThe following example will describe how to create a reference feed for such device data. we will call the reference feed GeoHost-V1.0-REFERENCE.\nReference Data Our reference data will be supplied in a  separated file containing the fields\n the device Fully Qualified Domain Name the device IP Address the device Country location (using ISO 3166-1 alpha-3 codes) the device Site location the device Building location the device TimeZone location (both standard then daylight timezone offsets from UTC)  For simplicity, our example will use a file with just 3 entries\nFQDN\tIPAddress\tCountry\tSite\tBuilding\tRoom\tTimeZones stroomnode00.strmdev00.org\t192.168.2.245\tGBR\tBristol-S00\tGZero\tR00\t+00:00/+01:00 stroomnode01.strmdev01.org\t192.168.3.117\tAUS\tSydney-S04\tR6\t5-134\t+10:00/+11:00 host01.company4.org\t192.168.4.220\tUSA\tLosAngeles-S19\tILM\tC5-54-2\t-08:00/-07:00  A copy of this sample data source can be found here. Save a copy of this data to your local environment for use later in this HOWTO. Save this file as a text document with ANSI encoding.\nCreation To create our Reference Event stream we need to create:\n the Feed a Pipeline to automatically process and store the Reference data a Text Parser to convert the text file into simple XML record format, and a Translation to create reference data maps  Create Feed First, within the Explorer pane, and with the cursor having selected the Event Sources group, right click the mouse to have the object context menu appear.\nIf you hover over the icon then the New sub-context menu will be revealed.\nNow hover the mouse over the icon and right click to select.\nWhen the New Feed selection windows comes up, navigate to the Event Sources system group. Then enter the name of the reference feed GeoHost-V1.0-REFERENCE onto the Name: text entry box. On pressing the OK button we will see the following Feed configuration tab appear.\nClick on the Settings sub-item in the GeoHost-V1.0-REFERENCE Feed tab to populate the initial Settings configuration. Enter an appropriate description, classification and click on the Reference Feed check box\nand we then use the Stream Type drop-down menu to set the stream type as Raw Reference. At this point we save our configuration so far, by clicking on the icon. The save icon becomes ghosted and our feed configuration has been saved.\nLoad sample Reference data At this point we want to load our sample reference data, in order to develop our reference feed. We can do this two ways - posting the file to our Stroom web server, or directly upload the data using the user interface. For this example we will use Stroom’s user interface upload facility.\nFirst, open the Data sub-item in the GeoHost-V1.0-REFERENCE feed configuration tab to reveal\nNote the Upload icon in the bottom left of the Stream table (top pane). On clicking the Upload icon, we are presented with the data upload selection window.\nNaturally, as this is a reference feed we are creating and this is raw data we are uploading, we select a Stream Type: of Raw Reference. We need to set the Effective: date (really a timestamp) for this specific stream of reference data. Clicking in the Effective: entry box will cause a calendar selection window to be displayed (initially set to the current date).\nWe are going to set the effective date to be late in 2019. Normally, you would choose a time stamp that matches the generation of the reference data. Click on the blue Previous Month icon (a less than symbol \u003c) on the Year/Month line to move back to December 2019.\nSelect the 1st (clicking on 1) at which point the calendar selection window will disappear and a time of 2019-12-01T00:00:00.000Z is displayed. This is the default whenever using the calendar selection window in Stroom - the resultant timestamp is that of the day selected at 00:00:00 (Zulu time). To get the calendar selection window to disappear, click anywhere outside of the timestamp entry box.\nNote, if you happen to click on the OK button before selecting the File (or Stream Type for that matter), an appropriate Alert dialog box will be displayed\nWe don’t need to set Meta Data for this stream of reference data, but we (obviously) need to select the file. For the purposes of this example, we will utilise the file GeoHostReference.log you downloaded earlier in the Reference Data section of this document. This file contains a header and three lines of reference data as per\nFQDN\tIPAddress\tCountry\tSite\tBuilding\tRoom\tTimeZones stroomnode00.strmdev00.org\t192.168.2.245\tGBR\tBristol-S00\tGZero\tR00\t+00:00/+01:00 stroomnode01.strmdev01.org\t192.168.3.117\tAUS\tSydney-S04\tR6\t5-134\t+10:00/+11:00 host01.company4.org\t192.168.4.220\tUSA\tLosAngeles-S19\tILM\tC5-54-2\t-08:00/-07:00  When we construct the pipeline for this reference feed, we will see how to make use of the header line.\nSo, click on the Choose File button to bring up a file selector window. Navigate within the selector window to the location on your location machine where you have saved the GeoHostReference.log file. On clicking Open we return to the Upload window with the file selected.\nOn clicking OK we get an Alert dialog window to advise a file has been uploaded.\nat which point we press Close.\nAt this point, the Upload selection window closes, and we see our file displayed in the GeoHost-V1.0-REFERENCE Data stream table.\nWhen we click on the newly up-loaded stream in the Stream Table pane we see the other two panes fill with information.\nThe middle pane shows the selected or Specific feed and any linked streams. A linked stream could be the resultant Reference data set generated from a Raw Reference stream. If errors occur during processing of the stream, then a linked stream could be an Error stream.\nThe bottom pane displays the selected stream’s data or meta-data. If we click on the Meta link at the top of this pane, we will see the Metadata associated with this stream. We also note that the Meta link at the bottom of the pane is now embolden.\nWe can see the metadata we set - the EffectiveTime, and implicitly, the Feed but we also see additional fields that Stroom has added that provide more detail about the data and its delivery to Stroom such as how and when it was received. We now need to switch back to the Data display as we need to author our reference feed translation.\nCreate Pipeline We now need to create the pipeline for our reference feed so that we can create our translation and hence create reference data for our feed.\nWithin the Explorer pane, and having selected the Event Sources system group, right click to bring up the object context menu, then the New sub-context menu. Move to the and left click to select. When the New Pipeline selection window appears, navigate to, then select the Feeds and Translations system group then enter the name of the reference feed, GeoHost-V1.0-REFERENCE in the Name: text entry box.\nOn pressing the OK button you will be presented with the new pipeline’s configuration tab\nWithin Settings, enter an appropriate description as per\nWe now need to select the structure this pipeline will use. We need to move from the Settings sub-item on the pipeline configuration tab to the Structure sub-item. This is done by clicking on the Structure link, at which we will see\nAs this pipeline will be processing reference data, we would use a Reference Data pipeline. This is done by inheriting it from a defined set of Standard Pipelines. To do this, click on the menu selection icon to the right of the Inherit From: test display box.\nWhen the Choose item selection window appears, navigate to Template Pipelines system group (if not already displayed), and select (left click) the Reference Data pipeline\nthen press OK. At this we will see the inherited pipeline structure of\nNoting that this pipeline has not yet been saved - indicated by the * in the tab label and the highlighted , click on the to save, which results in\nThis ends the first stage of the pipeline creation. We need to author the feed’s translation.\nCreate Text Converter To turn our tab delimited data in Stroom reference data, we first need to convert the text into simple XML. We do this using a Text Converter. Test Converters use a Stroom Data Splitter to convert text into simple XML.\nWithin the Explorer pane, and having selected the Event Sources system group, right click to bring up the object context menu. Navigate to the , click on the item and left click to select.\nWhen the New Text Converter selection window comes up, navigate to and select Event Sources system group, then enter the name of the feed, GeoHost-V1.0-REFERENCE into the Name: text entry box as per\nOn pressing the OK button we see the next text converter’s configuration tab displayed.\nEnter an appropriate description into the Description: text entry box, for instance\nText converter for device Logical and Geographic reference feed holding FQDN, IPAddress, Country, Site, Building, Room and Time Zones. Feed has a header and is tab separated.  Set the Converter Type: to be Data Splitter from the drop-down menu.\nWe next press the Conversion sub-item on the TextConverter tab to bring up the Data Splitter editing window.\nThe following is our Data Splitter code (see Data Splitter documentation for more complete details)\n\u003c?xml version=\"1.1\" encoding=\"UTF-8\"?\u003e \u003cdataSplitter xmlns=\"data-splitter:3\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"data-splitter:3 file://data-splitter-v3.0.1.xsd\" version=\"3.0\"\u003e \u003c!-- GEOHOST REFERENCE FEED: CHANGE HISTORY v1.0.0 - 2020-02-09 John Doe This is a reference feed for device Logical and Geographic data. The feed provides for each device * the device FQDN * the device IP Address * the device Country location (using ISO 3166-1 alpha-3 codes) * the device Site location * the device Building location * the device Room location *the device TimeZone location (both standard then daylight timezone offsets from UTC) The data is a TAB delimited file with the first line providing headings. Example data: FQDN\tIPAddress\tCountry\tSite\tBuilding\tRoom\tTimeZones stroomnode00.strmdev00.org\t192.168.2.245\tGBR\tBristol-S00\tGZero\tR00\t+00:00/+01:00 stroomnode01.strmdev01.org\t192.168.3.117\tAUS\tSydney-S04\tR6\t5-134\t+10:00/+11:00 host01.company4.org\t192.168.4.220\tUSA\tLosAngeles-S19\tILM\tC5-54-2\t-08:00/-07:00 --\u003e \u003c!-- Match the heading line - split on newline and match a maximum of one line --\u003e \u003csplit delimiter=\"\\n\" maxMatch=\"1\"\u003e \u003c!-- Store each heading and note we split fields on the TAB (\u0026#9;) character --\u003e \u003cgroup\u003e \u003csplit delimiter=\"\u0026#9;\"\u003e \u003cvar id=\"heading\"/\u003e \u003c/split\u003e \u003c/group\u003e \u003c/split\u003e \u003c!-- Match all other data lines - splitting on newline --\u003e \u003csplit delimiter=\"\\n\"\u003e \u003cgroup\u003e \u003c!-- Store each field using the column heading number for each column ($heading$1) and note we split fields on the TAB (\u0026#9;) character --\u003e \u003csplit delimiter=\"\u0026#9;\"\u003e \u003cdata name=\"$heading$1\" value=\"$1\"/\u003e \u003c/split\u003e \u003c/group\u003e \u003c/split\u003e \u003c/dataSplitter\u003e  At this point we want to save our Text Converter, so click on the icon.\nA copy of this data splitter can be found here.\nAssign Text Converter to Pipeline To test our Text Converter, we need to modify our GeoHost-V1.0-REFERENCE pipeline to use it. Select the GeoHost-V1.0-REFERENCE pipeline tab and then select the Structure sub-item\nTo associate our new Text Converter with the pipeline, click on the icon then move the cursor to the Property (middle) pane then double click on the textConverter Property Name to allow you to edit the property as per\nWe leave the Property Source: as Inherit but we need to change the Property Value: from None to be our newly created GeoHost-V1.0-REFERENCE text Converter\nthen press OK. At this we will see the Property Value set\nAgain press OK to finish editing this property and we then see that the textConverter property has been set to GeoHost-V1.0-REFERENCE. Similarly set the type property Value to “Data Splitter”.\nAt this point, we should save our changes, by clicking on the highlighted icon. The combined Parser window panes should now look like\nTest Text Converter To test our Text Converter, we select the GeoHost-V1.0-REFERENCE Feed tab then click on our uploaded stream in the Stream Table pane, then click the check box of the Raw Reference stream in the Specific Stream table (middle pane)\nWe now want to step our data through the Text Converter. We enter Stepping Mode by pressing the stepping button found at the bottom of the right of the stream Raw Data display.\nYou will then be requested to choose a pipeline to step with, at which, you should navigate to the GeoHost-V1.0-REFERENCE pipeline as per\nthen press OK.\nAt this point we enter the pipeline Stepping tab\nwhich initially displays the Raw Reference data from our stream.\nWe click on the icon, to display.\nThis stepping window is divided into three sub-panes. the top one is the Text Converter editor and it will allow you to adjust the text conversion should you wish too. The bottom left window displays the input to the Text Converter. The bottom right window displays the output from the Text Converter for the given input.\nWe now click on the pipeline Step Forward button to single step the Raw reference data throughout text converter. We see that the Stepping function has displayed the heading and first data line of our raw reference data in the input sub-pane and the resultant simple records XML (adhering to the Stroom records v2.0 schema) in the output pane.\nIf we again press the button we see the second line in our raw reference data in the input sub-pane and the resultant simple records XML in the output pane.\nPressing the Step Forward button again displays our third and last line of our raw and converted data.\nWe have now successfully tested the Text Converter for our reference feed. Our next step is to author our translation to generate reference data records that Stroom can use.\nCreate XSLT Translation We now need to create our translation. This XSLT translation will convert simple records XML data into ReferenceData records - see the Stroom reference-data v2.0.1 Schema for details.\nWe first need to create an XSLT translation for our feed. Move back to the Explorer window, and with the cursor having selected the Event Sources system group, right click the mouse to display the object context menu, select New\nand then move the cursor to the item, then left click to select.\nWhen the New XSLT selection window comes up, navigate to the Event Sources system group and enter the name of the reference feed - GeoHost-V1.0-REFERENCE into the Name: text entry box as per\nOn pressing the OK button we see the XSL tab for our translation and as previously, we enter an appropriate description before selecting the XSLT sub-item.\nOn selection of the XSLT sub-item, we are presented with the XSLT editor window\nAt this point, rather than edit the translation in this editor and then assign this translation to the GeoHost-V1.0-REFERENCE pipeline, we will first make the assignment in the pipeline and then develop the translation whilst stepping through the raw data. This is to demonstrate there are a number of ways to develop a translation.\nSo, to start, save the XSLT by clicking on the icon, then click on the GeoHost-V1.0-REFERENCE pipeline tab to raise the GeoHost-V1.0-REFERENCE pipeline. Then select the Structure sub-item followed by selecting the XSL translationFilter icon. We now see the XSL translationFilter Property Table for our pipeline in the middle pane.\nTo associate our new translation with the pipeline, move the cursor to the Property Table, click on the grayed out xslt Property Name and then click on the Edit Property icon to allow you to edit the property as per\nWe leave the Property Source: as Inherit and we need to change the Property Value: from None to be our newly created GeoHost-V1.0-REFERENCE XSL translation. To do this, position the cursor over the menu selection icon of the Value: chooser and right click, at which the Choose item selection window appears. Navigate to the Event Sources system group then select the GeoHost-V1.0-REFERENCE xsl translation.\nthen press OK. At this point we will see the property Value: set\nAgain press OK to finish editing this property and we see that the xslt property has been set to GeoHost-V1.0-REFERENCE.\nAt this point, we should save our changes, by clicking on the highlighted icon.\nTest XSLT Translation We now go back to the GeoHost-V1.0-REFERENCE Feed tab then click on our uploaded stream in the Stream Table pane. Next click the check box of the Raw Reference stream in the Specific Stream table (middle pane) as per\nWe now want to step our data through the xslt Translation. We enter Stepping Mode by pressing the stepping button found at the bottom of the right of the stream Raw Data display.\nYou will then be requested to choose a pipeline to step with, at which, you should navigate to the GeoHost-V1.0-REFERENCE pipeline as per\nthen press OK.\nAt this point we enter the pipeline through the Stepping tab which initially displays the Raw Reference data from our stream.\nWe click on the icon to enter the xslt Translation stepping window and all panes are empty.\nAs for the Text Converter, this translation stepping window is divided into three sub-panes. The top one is the XSLT Translation. The bottom right window displays the output from the XSLT Translation for the given input.\nWe now click on the pipeline Step Forward button to single step the Raw reference data through our translation. We see that the Stepping function has displayed the first records XML entry in the input sub-pane and the same data is displayed in the output sub-pane.\nBut we also note if we move along the pipeline structure to the we will see a schema fault is displayed .\nIn essence, since the translation has done nothing, and the data is simple records XML, the system is indicating that it expects the output data to be in the reference-data v2.0.1 format.\nWe can correct this by adding the skeleton xslt translation for reference data into our translationFilter. Move back to the icon on the pipeline structure and add the following to the xsl window\n\u003c?xml version=\"1.1\" encoding=\"UTF-8\" ?\u003e \u003cxsl:stylesheet xpath-default-namespace=\"records:2\" xmlns=\"reference-data:2\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:stroom=\"stroom\" xmlns:evt=\"event-logging:3\" version=\"2.0\"\u003e \u003cxsl:template match=\"records\"\u003e \u003creferenceData xmlns=\"reference-data:2\" xsi:schemaLocation=\"reference-data:2 file://reference-data-v2.0.xsd\" version=\"2.0.1\"\u003e xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \u003cxsl:apply-templates/\u003e \u003c/referenceData\u003e \u003c/xsl:template\u003e \u003c!-- MAIN TEMPLATE --\u003e \u003cxsl:template match=\"record\"\u003e \u003creference\u003e \u003cmap\u003e\u003c/map\u003e \u003ckey\u003e\u003c/key\u003e \u003cvalue\u003e\u003c/value\u003e \u003c/reference\u003e \u003c/xsl:template\u003e \u003c/xsl:stylesheet\u003e  And on pressing the refresh button we see that the output window is an empty ReferenceData element.\nAlso note that if we move to the icon on the pipeline structure, we no longer have an “Invalid Schema Location” error.\nWe next extend the translation to actually generate reference data. The translation will now look like\n\u003c?xml version=\"1.1\" encoding=\"UTF-8\" ?\u003e \u003cxsl:stylesheet xpath-default-namespace=\"records:2\" xmlns=\"reference-data:2\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:stroom=\"stroom\" xmlns:evt=\"event-logging:3\" version=\"2.0\"\u003e \u003c!-- GEOHOST REFERENCE FEED: CHANGE HISTORY v1.0.0 - 2020-02-09 John Doe This is a reference feed for device Logical and Geographic data. The feed provides for each device * the device FQDN * the device IP Address * the device Country location (using ISO 3166-1 alpha-3 codes) * the device Site location * the device Building location * the device Room location *the device TimeZone location (both standard then daylight timezone offsets from UTC) The reference maps are FQDN_TO_IP - Fully Qualified Domain Name to IP Address IP_TO_FQDN - IP Address to FQDN (HostName) FQDN_TO_LOC - Fully Qualified Domain Name to Location element --\u003e \u003cxsl:template match=\"records\"\u003e \u003creferenceData xmlns=\"reference-data:2\" xsi:schemaLocation=\"reference-data:2 file://reference-data-v2.0.xsd\" version=\"2.0.1\"\u003e \u003cxsl:apply-templates/\u003e \u003c/referenceData\u003e \u003c/xsl:template\u003e \u003c!-- MAIN TEMPLATE --\u003e \u003cxsl:template match=\"record\"\u003e \u003c!-- FQDN_TO_IP map --\u003e \u003creference\u003e \u003cmap\u003eFQDN_TO_IP\u003c/map\u003e \u003ckey\u003e \u003cxsl:value-of select=\"lower-case(data[@name='FQDN']/@value)\" /\u003e \u003c/key\u003e \u003cvalue\u003e \u003cIPAddress\u003e \u003cxsl:value-of select=\"data[@name='IPAddress']/@value\" /\u003e \u003c/IPAddress\u003e \u003c/value\u003e \u003c/reference\u003e \u003c!-- IP_TO_FQDN map --\u003e \u003creference\u003e \u003cmap\u003eIP_TO_FQDN\u003c/map\u003e \u003ckey\u003e \u003cxsl:value-of select=\"lower-case(data[@name='IPAddress']/@value)\" /\u003e \u003c/key\u003e \u003cvalue\u003e \u003cHostName\u003e \u003cxsl:value-of select=\"data[@name='FQDN']/@value\" /\u003e \u003c/HostName\u003e \u003c/value\u003e \u003c/reference\u003e \u003c/xsl:template\u003e \u003c/xsl:stylesheet\u003e  and when we refresh, by pressing the Refresh Current Step button we see that the output window now has Reference elements within the parent ReferenceData element\nIf we press the Step Forward button we see the second record of our raw reference data in the input sub-pane and the resultant Reference elements\nAt this point it would be wise to save our translation. This is done by clicking on the highlighted icon in the top left-hand area of the window under the tabs.\nWe can now further our Reference by adding a Fully Qualified Domain Name to Location reference - FQDN_TO_LOC and so now the translation looks like\n\u003c?xml version=\"1.1\" encoding=\"UTF-8\" ?\u003e \u003cxsl:stylesheet xpath-default-namespace=\"records:2\" xmlns=\"reference-data:2\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:stroom=\"stroom\" xmlns:evt=\"event-logging:3\" version=\"2.0\"\u003e \u003c!-- GEOHOST REFERENCE FEED: CHANGE HISTORY v1.0.0 - 2020-02-09 John Doe This is a reference feed for device Logical and Geographic data. The feed provides for each device * the device FQDN * the device IP Address * the device Country location (using ISO 3166-1 alpha-3 codes) * the device Site location * the device Building location * the device Room location *the device TimeZone location (both standard then daylight timezone offsets from UTC) The reference maps are FQDN_TO_IP - Fully Qualified Domain Name to IP Address IP_TO_FQDN - IP Address to FQDN (HostName) FQDN_TO_LOC - Fully Qualified Domain Name to Location element --\u003e \u003cxsl:template match=\"records\"\u003e \u003creferenceData xmlns=\"reference-data:2\" xsi:schemaLocation=\"reference-data:2 file://reference-data-v2.0.xsd\" version=\"2.0.1\"\u003e \u003cxsl:apply-templates/\u003e \u003c/referenceData\u003e \u003c/xsl:template\u003e \u003c!-- MAIN TEMPLATE --\u003e \u003cxsl:template match=\"record\"\u003e \u003c!-- FQDN_TO_IP map --\u003e \u003creference\u003e \u003cmap\u003eFQDN_TO_IP\u003c/map\u003e \u003ckey\u003e \u003cxsl:value-of select=\"lower-case(data[@name='FQDN']/@value)\" /\u003e \u003c/key\u003e \u003cvalue\u003e \u003cIPAddress\u003e \u003cxsl:value-of select=\"data[@name='IPAddress']/@value\" /\u003e \u003c/IPAddress\u003e \u003c/value\u003e \u003c/reference\u003e \u003c!-- IP_TO_FQDN map --\u003e \u003creference\u003e \u003cmap\u003eIP_TO_FQDN\u003c/map\u003e \u003ckey\u003e \u003cxsl:value-of select=\"lower-case(data[@name='IPAddress']/@value)\" /\u003e \u003c/key\u003e \u003cvalue\u003e \u003cHostName\u003e \u003cxsl:value-of select=\"data[@name='FQDN']/@value\" /\u003e \u003c/HostName\u003e \u003c/value\u003e \u003c/reference\u003e \u003c!-- FQDN_TO_LOC map --\u003e \u003creference\u003e \u003cmap\u003eFQDN_TO_LOC\u003c/map\u003e \u003ckey\u003e \u003cxsl:value-of select=\"lower-case(data[@name='FQDN']/@value)\" /\u003e \u003c/key\u003e \u003cvalue\u003e \u003c!-- Note, when mapping to a XML node set, we make use of the Event namespace - i.e. evt: defined on our stylesheet element. This is done, so that, when the node set is returned, it is within the correct namespace. --\u003e \u003cevt:Location\u003e \u003cevt:Country\u003e \u003cxsl:value-of select=\"data[@name='Country']/@value\" /\u003e \u003c/evt:Country\u003e \u003cevt:Site\u003e \u003cxsl:value-of select=\"data[@name='Site']/@value\" /\u003e \u003c/evt:Site\u003e \u003cevt:Building\u003e \u003cxsl:value-of select=\"data[@name='Building']/@value\" /\u003e \u003c/evt:Building\u003e \u003cevt:Room\u003e \u003cxsl:value-of select=\"data[@name='Room']/@value\" /\u003e \u003c/evt:Room\u003e \u003cevt:TimeZone\u003e \u003cxsl:value-of select=\"data[@name='TimeZones']/@value\" /\u003e \u003c/evt:TimeZone\u003e \u003c/evt:Location\u003e \u003c/value\u003e \u003c/reference\u003e \u003c/xsl:template\u003e \u003c/xsl:stylesheet\u003e  and our second ReferenceData element would now look like\nWe have completed the translation and have hence completed the development of our GeoHost-V1.0-REFERENCE reference feed.\nAt this point, the reference feed is set up to accept Raw Reference data, but it will not automatically process the raw data and hence it will not place reference data into the reference data store. To have Stroom automatically process Raw Reference streams, you will need to enable Processors for this pipeline.\nEnabling the Reference Feed Processors We now create the pipeline Processors for this feed, so that the raw reference data will be transformed into Reference Data on ingest and save to Reference Data stores.\nOpen the reference feed pipeline by selecting the GeoHost-V1.0-REFERENCE pipeline tab to raise the GeoHost-V1.0-REFERENCE pipeline. Then select the Processors sub-item to show\nThis configuration tab is divided into two panes. The top pane shows the current enabled Processors and any recently processed streams and the bottom pane provides meta-data about each Processor or recently processed streams.\nFirst, move the mouse to the Add Processor icon at the top left of the top pane. Select by left clicking this icon to have displayed the Add Filter selection window\nThis selection window allows us to filter what set of data streams we want our Processor to process. As our intent is to enable processing for all GeoHost-V1.0-REFERENCE streams, both already received and yet to be received, then our filtering criteria is just to process all Raw Reference for this feed, ignoring all other conditions.\nTo do this, first click on the Add Term icon. Keep the term and operator at the default settings, and select the Choose item icon to navigate to the desired feed name (GeoHost-V1.0-REFERENCE) object\nand press OK to make the selection.\nNext, we select the required stream type. To do this click on the Add Term icon again. Click on the down arrow to change the Term selection from Feed to Type. Click in the Value position on the highlighted line (it will be currently empty). Once you have clicked here a drop-down box will appear as per\nat which point, select the Stream Type of Raw Referenceand then press OK. At this we return to the Add Processor selection window to see that the Raw Reference stream type has been added.\nNote the Processor has been added but it is in a disabled state. We enable both pipeline processor and the processor filter\nNote - if this is the first time you have set up pipeline processing on your Stroom instance you may need to check that the Stream Processor job is enabled on your Stroom instance. To do this go to the Stroom main menu and select Monitoring\u003eJobs\u003e Check the status of the Stream Processor job and enable if required. If you need to enable the job also ensure you enable the job on the individual nodes as well (go to the bottom window pane and select the enable box on the far right)\nReturning to the tab, Processors sub-item, if everything is working on your Stroom instance you should now see that Raw Reference streams are being processed by your processor - the Streams count is incrementing and the Tracker% is incrementing (when the Tracker% is 100% then all streams you selected (Filtered for) have been processed)\nNavigating back to the Data sub-item and clicking on the reference feed stream in the Stream Table we see\nIn the top pane, we see the Streams table as per normal, but in the Specific stream table we see that we have both a Raw Reference stream and its child Reference stream. By clicking on and highlighting the Reference stream we see its content in the bottom pane.\nThe complete ReferenceData for this stream is\n\u003c?xml version=\"1.1\" encoding=\"UTF-8\"?\u003e \u003creferenceData xmlns=\"reference-data:2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:stroom=\"stroom\" xmlns:evt=\"event-logging:3\" xsi:schemaLocation=\"reference-data:2 file://reference-data-v2.0.xsd\" version=\"2.0.1\"\u003e \u003creference\u003e \u003cmap\u003eFQDN_TO_IP\u003c/map\u003e \u003ckey\u003estroomnode00.strmdev00.org\u003c/key\u003e \u003cvalue\u003e \u003cIPAddress\u003e192.168.2.245\u003c/IPAddress\u003e \u003c/value\u003e \u003c/reference\u003e \u003creference\u003e \u003cmap\u003eIP_TO_FQDN\u003c/map\u003e \u003ckey\u003e192.168.2.245\u003c/key\u003e \u003cvalue\u003e \u003cHostName\u003estroomnode00.strmdev00.org\u003c/HostName\u003e \u003c/value\u003e \u003c/reference\u003e \u003creference\u003e \u003cmap\u003eFQDN_TO_LOC\u003c/map\u003e \u003ckey\u003estroomnode00.strmdev00.org\u003c/key\u003e \u003cvalue\u003e \u003cevt:Location\u003e \u003cevt:Country\u003eGBR\u003c/evt:Country\u003e \u003cevt:Site\u003eBristol-S00\u003c/evt:Site\u003e \u003cevt:Building\u003eGZero\u003c/evt:Building\u003e \u003cevt:Room\u003eR00\u003c/evt:Room\u003e \u003cevt:TimeZone\u003e+00:00/+01:00\u003c/evt:TimeZone\u003e \u003c/evt:Location\u003e \u003c/value\u003e \u003c/reference\u003e \u003creference\u003e \u003cmap\u003eFQDN_TO_IP\u003c/map\u003e \u003ckey\u003estroomnode01.strmdev01.org\u003c/key\u003e \u003cvalue\u003e \u003cIPAddress\u003e192.168.3.117\u003c/IPAddress\u003e \u003c/value\u003e \u003c/reference\u003e \u003creference\u003e \u003cmap\u003eIP_TO_FQDN\u003c/map\u003e \u003ckey\u003e192.168.3.117\u003c/key\u003e \u003cvalue\u003e \u003cHostName\u003estroomnode01.strmdev01.org\u003c/HostName\u003e \u003c/value\u003e \u003c/reference\u003e \u003creference\u003e \u003cmap\u003eFQDN_TO_LOC\u003c/map\u003e \u003ckey\u003estroomnode01.strmdev01.org\u003c/key\u003e \u003cvalue\u003e \u003cevt:Location\u003e \u003cevt:Country\u003eAUS\u003c/evt:Country\u003e \u003cevt:Site\u003eSydeny-S04\u003c/evt:Site\u003e \u003cevt:Building\u003eR6\u003c/evt:Building\u003e \u003cevt:Room\u003e5-134\u003c/evt:Room\u003e \u003cevt:TimeZone\u003e+10:00/+11:00\u003c/evt:TimeZone\u003e \u003c/evt:Location\u003e \u003c/value\u003e \u003c/reference\u003e \u003creference\u003e \u003cmap\u003eFQDN_TO_IP\u003c/map\u003e \u003ckey\u003ehost01.company4.org\u003c/key\u003e \u003cvalue\u003e \u003cIPAddress\u003e192.168.4.220\u003c/IPAddress\u003e \u003c/value\u003e \u003c/reference\u003e \u003creference\u003e \u003cmap\u003eIP_TO_FQDN\u003c/map\u003e \u003ckey\u003e192.168.4.220\u003c/key\u003e \u003cvalue\u003e \u003cHostName\u003ehost01.company4.org\u003c/HostName\u003e \u003c/value\u003e \u003c/reference\u003e \u003creference\u003e \u003cmap\u003eFQDN_TO_LOC\u003c/map\u003e \u003ckey\u003ehost01.company4.org\u003c/key\u003e \u003cvalue\u003e \u003cevt:Location\u003e \u003cevt:Country\u003eUSA\u003c/evt:Country\u003e \u003cevt:Site\u003eLosAngeles-S19\u003c/evt:Site\u003e \u003cevt:Building\u003eILM\u003c/evt:Building\u003e \u003cevt:Room\u003eC5-54-2\u003c/evt:Room\u003e \u003cevt:TimeZone\u003e-08:00/-07:00\u003c/evt:TimeZone\u003e \u003c/evt:Location\u003e \u003c/value\u003e \u003c/reference\u003e \u003c/referenceData\u003e  If we go back to the reference feed itself (and click on the button on the far right of the top and middle panes), we now see both the Reference and Raw Reference streams in the Streams Table pane.\nSelecting the Reference stream in the Stream Table will result in the Specific stream pane displaying the Raw Reference and its child Reference stream (highlighted) and the actual ReferenceData output in the Data pane at the bottom.\nSelecting the Raw Reference stream in the Streams Table will result in the Specific stream pane displaying the Raw Reference and its child Reference stream as before, but with the Raw Reference stream highlighted and the actual Raw Reference input data displayed in the Data pane at the bottom.\nThe creation of the Raw Reference is now complete.\nAt this point you may wish to organise the resources you have created within the Explorer pane to a more appropriate location such as Reference/GeoHost. Because Stroom Explorer is a flat structure you can move resources around to reorganise the content without any impact on directory paths, configurations etc.\nNow you have created the new folder structure you can move the various GeoHost resources to this location. Select all four resources by using the mouse right-click button while holding down the Shift key. Then right click on the highlighted group to display the action menu\nSelect move and the Move Multiple Items window will display. Navigate to the Reference/GeoHost folder to move the items to this destination.\nThe final structure is seen below\n","categories":"","description":"How to create a reference feed for decorating event data using reference data lookups.\n","excerpt":"How to create a reference feed for decorating event data using …","ref":"/stroom-docs/hugo-docsy/docs/howtos/referencefeeds/createsimplereferencefeeds/","tags":["reference-data"],"title":"Create a Simple Reference Feed"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/database/","tags":"","title":"database"},{"body":"Following this HOWTO will produce a simple, minimally secured database deployment. In a production environment consideration needs to be made for redundancy, better security, data-store location, increased memory usage, and the like.\nStroom has two databases. The first, stroom, is used for management of Stroom itself and the second, statistics is used for the Stroom Statistics capability. There are many ways to deploy these two databases. One could\n have a single database instance and serve both databases from it have two database instances on the same server and serve one database per instance have two separate nodes, each with it’s own database instance the list goes on.  In this HOWTO, we describe the deployment of two database instances on the one node, each serving a single database. We provide example deployments using either the MariaDB (external link) or MySQL Community (external link) versions of MySQL.\nAssumptions  we are installing the MariaDB or MySQL Community RDBMS software. the primary database node is ‘stroomdb0.strmdev00.org’. installation is on a fully patched minimal Centos 7.3 instance. we are installing BOTH databases (stroom and statistics) on the same node - ‘stroomdb0.stromdev00.org’ but with two distinct database engines. The first database will communicate on port 3307 and the second on 3308. we are deploying with SELinux in enforcing mode. any scripts or commands that should run are in code blocks and are designed to allow the user to cut then paste the commands onto their systems. in this document, when a textual screen capture is documented, data entry is identified by the data surrounded by ‘\u003c’ ‘\u003e’ . This excludes enter/return presses.  Installation of Software MariaDB Server Installation As MariaDB is directly supported by Centos 7, we simply install the database server software and SELinux policy files, as per\nsudo yum -y install policycoreutils-python mariadb-server  MySQL Community Server Installation As MySQL is not directly supported by Centos 7, we need to install it’s repository files prior to installation. We get the current MySQL Community release repository rpm and validate it’s MD5 checksum against the published value found on the MySQL Yum Repository (external link) site.\nwget https://repo.mysql.com/mysql57-community-release-el7.rpm md5sum mysql57-community-release-el7.rpm  On correct validation of the MD5 checksum, we install the repository files via\nsudo yum -y localinstall mysql57-community-release-el7.rpm  NOTE: Stroom currently does not support the latest production MySQL version - 5.7. You will need to install MySQL Version 5.6.\nNow since we must use MySQL Version 5.6 you will need to edit the MySQL repo file /etc/yum.repos.d/mysql-community.repo to disable the mysql57-community channel and enable the mysql56-community channel. We start by, backing up the repo file with\nsudo cp /etc/yum.repos.d/mysql-community.repo /etc/yum.repos.d/mysql-community.repo.ORIG  Then edit the file to change\n... # Enable to use MySQL 5.6 [mysql56-community] name=MySQL 5.6 Community Server baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/ enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql [mysql57-community] name=MySQL 5.7 Community Server baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/ enabled=1 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql ...  to become\n... # Enable to use MySQL 5.6 [mysql56-community] name=MySQL 5.6 Community Server baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/ enabled=1 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql [mysql57-community] name=MySQL 5.7 Community Server baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/ enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql ...  Next we install server software and SELinux policy files, as per\nsudo yum -y install policycoreutils-python mysql-community-server  Preparing the Database Deployment MariaDB Variant Create and instantiate both database instances To set up two MariaDB database instances on the one node, we will use mysql_multi and systemd service templates. The mysql_multi utility is a capability that manages multiple MariaDB databases on the same node and systemd service templates manage multiple services from one configuration file. A systemd service template is unique in that it has an @ character before the .service suffix.\nTo use this multiple-instance capability, we need to create two data directories for each database instance and also replace the main MariaDB configuration file, /etc/my.cnf, with one that includes configuration of key options for each instance. We will name our instances, mysqld0 and mysqld1. We will also create specific log files for each instance.\nWe will use the directories, /var/lib/mysql-mysqld0 and /var/lib/mysql-mysqld1 for the data directories and /var/log/mariadb/mysql-mysqld0.log and /var/log/mariadb/mysql-mysqld1.log for the log files. Note you should modify /etc/logrotate.d/mariadb to manage these log files. Note also, we need to set the appropriate SELinux file contexts on the created directories and any files.\nWe create the data directories and log files and set their respective SELinux contexts via\nsudo mkdir /var/lib/mysql-mysqld0 sudo chown mysql:mysql /var/lib/mysql-mysqld0 sudo semanage fcontext -a -t mysqld_db_t \"/var/lib/mysql-mysqld0(/.*)?\" sudo restorecon -Rv /var/lib/mysql-mysqld0 sudo touch /var/log/mariadb/mysql-mysqld0.log sudo chown mysql:mysql /var/log/mariadb/mysql-mysqld0.log sudo chcon --reference=/var/log/mariadb/mariadb.log /var/log/mariadb/mysql-mysqld0.log sudo mkdir /var/lib/mysql-mysqld1 sudo chown mysql:mysql /var/lib/mysql-mysqld1 sudo semanage fcontext -a -t mysqld_db_t \"/var/lib/mysql-mysqld1(/.*)?\" sudo restorecon -Rv /var/lib/mysql-mysqld1 sudo touch /var/log/mariadb/mysql-mysqld1.log sudo chown mysql:mysql /var/log/mariadb/mysql-mysqld1.log sudo chcon --reference=/var/log/mariadb/mariadb.log /var/log/mariadb/mysql-mysqld1.log  We now initialise the our two database data directories via\nsudo mysql_install_db --user=mysql --datadir=/var/lib/mysql-mysqld0 sudo mysql_install_db --user=mysql --datadir=/var/lib/mysql-mysqld1  We now replace the MySQL configuration file to set the options for each instance. Note that we will serve mysqld0 and mysqld1 via TCP ports 3307 and 3308 respectively. First backup the existing configuration file with\nsudo cp /etc/my.cnf /etc/my.cnf.ORIG  then setup /etc/my.cnf as per\nsudo bash F=/etc/my.cnf printf '[mysqld_multi]\\n' \u003e ${F} printf 'mysqld = /usr/bin/mysqld_safe --basedir=/usr\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf '[mysqld0]\\n' \u003e\u003e ${F} printf 'port=3307\\n' \u003e\u003e ${F} printf 'mysqld = /usr/bin/mysqld_safe --basedir=/usr\\n' \u003e\u003e ${F} printf 'datadir=/var/lib/mysql-mysqld0/\\n' \u003e\u003e ${F} printf 'socket=/var/lib/mysql-mysqld0/mysql.sock\\n' \u003e\u003e ${F} printf 'pid-file=/var/run/mariadb/mysql-mysqld0.pid\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf 'log-error=/var/log/mariadb/mysql-mysqld0.log\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf '# Disabling symbolic-links is recommended to prevent assorted security\\n' \u003e\u003e ${F} printf '# risks\\n' \u003e\u003e ${F} printf 'symbolic-links=0\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf '[mysqld1]\\n' \u003e\u003e ${F} printf 'mysqld = /usr/bin/mysqld_safe --basedir=/usr\\n' \u003e\u003e ${F} printf 'port=3308\\n' \u003e\u003e ${F} printf 'datadir=/var/lib/mysql-mysqld1/\\n' \u003e\u003e ${F} printf 'socket=/var/lib/mysql-mysqld1/mysql.sock\\n' \u003e\u003e ${F} printf 'pid-file=/var/run/mariadb/mysql-mysqld1.pid\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf 'log-error=/var/log/mariadb/mysql-mysqld1.log\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf '# Disabling symbolic-links is recommended to prevent assorted security risks\\n' \u003e\u003e ${F} printf 'symbolic-links=0\\n' \u003e\u003e ${F} exit # To exit the root shell  We also need to associate the ports with the mysqld_port_t SELinux context as per\nsudo semanage port -a -t mysqld_port_t -p tcp 3307 sudo semanage port -a -t mysqld_port_t -p tcp 3308  We next create the systemd service template as per\nsudo bash F=/etc/systemd/system/mysqld@.service printf '# Install in /etc/systemd/system\\n' \u003e ${F} printf '# Enable via systemctl enable mysqld@0 or systemctl enable mysqld@1\\n' \u003e\u003e ${F} printf '[Unit]\\n' \u003e\u003e ${F} printf 'Description=MySQL Multi Server for instance %%i\\n' \u003e\u003e ${F} printf 'After=syslog.target\\n' \u003e\u003e ${F} printf 'After=network.target\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf '[Service]\\n' \u003e\u003e ${F} printf 'User=mysql\\n' \u003e\u003e ${F} printf 'Group=mysql\\n' \u003e\u003e ${F} printf 'Type=forking\\n' \u003e\u003e ${F} printf 'ExecStart=/usr/bin/mysqld_multi start %%i\\n' \u003e\u003e ${F} printf 'ExecStop=/usr/bin/mysqld_multi stop %%i\\n' \u003e\u003e ${F} printf 'Restart=always\\n' \u003e\u003e ${F} printf 'PrivateTmp=true\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf '[Install]\\n' \u003e\u003e ${F} printf 'WantedBy=multi-user.target\\n' \u003e\u003e ${F} chmod 644 ${F} exit; # to exit the root shell  We next enable and start both instances via\nsudo systemctl enable mysqld@0 sudo systemctl enable mysqld@1 sudo systemctl start mysqld@0 sudo systemctl start mysqld@1  At this we should have both instances running. One should check each instance’s log file for any errors.\nSecure each database instance We secure each database engine by running the mysql_secure_installation script. One should accept all defaults, which means the only entry (aside from pressing returns) is the administrator (root) database password. Make a note of the password you use. In this case we will use Stroom5User@. The utility mysql_secure_installation expects to find the Linux socket file to access the database it’s securing at /var/lib/mysql/mysql.sock. Since we have used other locations, we temporarily link the real socket file to /var/lib/mysql/mysql.sock for each invocation of the utility. Thus we execute\nsudo ln /var/lib/mysql-mysqld0/mysql.sock /var/lib/mysql/mysql.sock sudo mysql_secure_installation  to see\nNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MariaDB to secure it, we'll need the current password for the root user. If you've just installed MariaDB, and you haven't set the root password yet, the password will be blank, so you should just press enter here. Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MariaDB root user without the proper authorisation. Set root password? [Y/n] New password: \u003c__ Stroom5User@ __\u003e Re-enter new password: \u003c__ Stroom5User@ __\u003e Password updated successfully! Reloading privilege tables.. ... Success! By default, a MariaDB installation has an anonymous user, allowing anyone to log into MariaDB without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] ... Success! Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] ... Success! By default, MariaDB comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] - Dropping test database... ... Success! - Removing privileges on test database... ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] ... Success! Cleaning up... All done! If you've completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB!  then we execute\nsudo rm /var/lib/mysql/mysql.sock sudo ln /var/lib/mysql-mysqld1/mysql.sock /var/lib/mysql/mysql.sock sudo mysql_secure_installation sudo rm /var/lib/mysql/mysql.sock  and process as before (for when running mysql_secure_installation). At this both database instances should be secure.\nMySQL Community Variant Create and instantiate both database instances To set up two MySQL database instances on the one node, we will use mysql_multi and systemd service templates. The mysql_multi utility is a capability that manages multiple MySQL databases on the same node and systemd service templates manage multiple services from one configuration file. A systemd service template is unique in that it has an @ character before the .service suffix.\nTo use this multiple-instance capability, we need to create two data directories for each database instance and also replace the main MySQL configuration file, /etc/my.cnf, with one that includes configuration of key options for each instance. We will name our instances, mysqld0 and mysqld1. We will also create specific log files for each instance.\nWe will use the directories, /var/lib/mysql-mysqld0 and /var/lib/mysql-mysqld1 for the data directories and /var/log/mysql-mysqld0.log and /var/log/mysql-mysqld1.log for the log directories. Note you should modify /etc/logrotate.d/mysql to manage these log files. Note also, we need to set the appropriate SELinux file context on the created directories and files.\nsudo mkdir /var/lib/mysql-mysqld0 sudo chown mysql:mysql /var/lib/mysql-mysqld0 sudo semanage fcontext -a -t mysqld_db_t \"/var/lib/mysql-mysqld0(/.*)?\" sudo restorecon -Rv /var/lib/mysql-mysqld0 sudo touch /var/log/mysql-mysqld0.log sudo chown mysql:mysql /var/log/mysql-mysqld0.log sudo chcon --reference=/var/log/mysqld.log /var/log/mysql-mysqld0.log sudo mkdir /var/lib/mysql-mysqld1 sudo chown mysql:mysql /var/lib/mysql-mysqld1 sudo semanage fcontext -a -t mysqld_db_t \"/var/lib/mysql-mysqld1(/.*)?\" sudo restorecon -Rv /var/lib/mysql-mysqld1 sudo touch /var/log/mysql-mysqld1.log sudo chown mysql:mysql /var/log/mysql-mysqld1.log sudo chcon --reference=/var/log/mysqld.log /var/log/mysql-mysqld1.log  We now initialise the our two database data directories via\nsudo mysql_install_db --user=mysql --datadir=/var/lib/mysql-mysqld0 sudo mysql_install_db --user=mysql --datadir=/var/lib/mysql-mysqld1  Disable the default database via\nsudo systemctl disable mysqld  We now modify the MySQL configuration file to set the options for each instance. Note that we will serve mysqld0 and mysqld1 via TCP ports 3307 and 3308 respectively. First backup the existing configuration file with\nsudo cp /etc/my.cnf /etc/my.cnf.ORIG  then setup /etc/my.cnf as per\nsudo bash F=/etc/my.cnf printf '[mysqld_multi]\\n' \u003e ${F} printf 'mysqld = /usr/bin/mysqld_safe --basedir=/usr\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf '[mysqld0]\\n' \u003e\u003e ${F} printf 'port=3307\\n' \u003e\u003e ${F} printf 'mysqld = /usr/bin/mysqld_safe --basedir=/usr\\n' \u003e\u003e ${F} printf 'datadir=/var/lib/mysql-mysqld0/\\n' \u003e\u003e ${F} printf 'socket=/var/lib/mysql-mysqld0/mysql.sock\\n' \u003e\u003e ${F} printf 'pid-file=/var/run/mysqld/mysql-mysqld0.pid\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf 'log-error=/var/log/mysql-mysqld0.log\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf '# Disabling symbolic-links is recommended to prevent assorted security\\n' \u003e\u003e ${F} printf '# risks\\n' \u003e\u003e ${F} printf 'symbolic-links=0\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf '[mysqld1]\\n' \u003e\u003e ${F} printf 'mysqld = /usr/bin/mysqld_safe --basedir=/usr\\n' \u003e\u003e ${F} printf 'port=3308\\n' \u003e\u003e ${F} printf 'datadir=/var/lib/mysql-mysqld1/\\n' \u003e\u003e ${F} printf 'socket=/var/lib/mysql-mysqld1/mysql.sock\\n' \u003e\u003e ${F} printf 'pid-file=/var/run/mysqld/mysql-mysqld1.pid\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf 'log-error=/var/log/mysql-mysqld1.log\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf '# Disabling symbolic-links is recommended to prevent assorted security risks\\n' \u003e\u003e ${F} printf 'symbolic-links=0\\n' \u003e\u003e ${F} exit # To exit the root shell  We also need to associate the ports with the mysqld_port_t SELinux context as per\nsudo semanage port -a -t mysqld_port_t -p tcp 3307 sudo semanage port -a -t mysqld_port_t -p tcp 3308  We next create the systemd service template as per\nsudo bash F=/etc/systemd/system/mysqld@.service printf '# Install in /etc/systemd/system\\n' \u003e ${F} printf '# Enable via systemctl enable mysqld@0 or systemctl enable mysqld@1\\n' \u003e\u003e ${F} printf '[Unit]\\n' \u003e\u003e ${F} printf 'Description=MySQL Multi Server for instance %%i\\n' \u003e\u003e ${F} printf 'After=syslog.target\\n' \u003e\u003e ${F} printf 'After=network.target\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf '[Service]\\n' \u003e\u003e ${F} printf 'User=mysql\\n' \u003e\u003e ${F} printf 'Group=mysql\\n' \u003e\u003e ${F} printf 'Type=forking\\n' \u003e\u003e ${F} printf 'ExecStart=/usr/bin/mysqld_multi start %%i\\n' \u003e\u003e ${F} printf 'ExecStop=/usr/bin/mysqld_multi stop %%i\\n' \u003e\u003e ${F} printf 'Restart=always\\n' \u003e\u003e ${F} printf 'PrivateTmp=true\\n' \u003e\u003e ${F} printf '\\n' \u003e\u003e ${F} printf '[Install]\\n' \u003e\u003e ${F} printf 'WantedBy=multi-user.target\\n' \u003e\u003e ${F} chmod 644 ${F} exit; # to exit the root shell  We next enable and start both instances via\nsudo systemctl enable mysqld@0 sudo systemctl enable mysqld@1 sudo systemctl start mysqld@0 sudo systemctl start mysqld@1  At this we should have both instances running. One should check each instance’s log file for any errors.\nSecure each database instance We secure each database engine by running the mysql_secure_installation script. One should accept all defaults, which means the only entry (aside from pressing returns) is the administrator (root) database password. Make a note of the password you use. In this case we will use Stroom5User@. The utility mysql_secure_installation expects to find the Linux socket file to access the database it’s securing at /var/lib/mysql/mysql.sock. Since we have used other locations, we temporarily link the real socket file to /var/lib/mysql/mysql.sock for each invocation of the utility. Thus we execute\nsudo ln /var/lib/mysql-mysqld0/mysql.sock /var/lib/mysql/mysql.sock sudo mysql_secure_installation  to see\nNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MySQL to secure it, we'll need the current password for the root user. If you've just installed MySQL, and you haven't set the root password yet, the password will be blank, so you should just press enter here. Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MySQL root user without the proper authorisation. Set root password? [Y/n] y New password: \u003c__ Stroom5User@ __\u003e Re-enter new password: \u003c__ Stroom5User@ __\u003e Password updated successfully! Reloading privilege tables.. ... Success! By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] ... Success! Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] ... Success! By default, MySQL comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] - Dropping test database... ERROR 1008 (HY000) at line 1: Can't drop database 'test'; database doesn't exist ... Failed! Not critical, keep moving... - Removing privileges on test database... ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] ... Success! All done! If you've completed all of the above steps, your MySQL installation should now be secure. Thanks for using MySQL! Cleaning up...  then we execute\nsudo rm /var/lib/mysql/mysql.sock sudo ln /var/lib/mysql-mysqld1/mysql.sock /var/lib/mysql/mysql.sock sudo mysql_secure_installation sudo rm /var/lib/mysql/mysql.sock  and process as before (for when running mysql_secure_installation). At this both database instances should be secure.\nCreate the Databases and Enable access by the Stroom processing users We now create the stroom database within the first instance, mysqld0 and the statistics database within the second instance mysqld1. It does not matter which database variant used as all commands are the same for both.\nAs well as creating the databases, we also need to establish the Stroom processing users that the Stroom processing nodes will use to access each database. For the stroom database, we will use the database user stroomuser with a password of Stroompassword1@ and for the statistics database, we will use the database user stroomstats with a password of Stroompassword2@. One identifies a processing user as \u003cuser\u003e@\u003chost\u003e on a grant SQL command.\nIn the stroom database instance, we will grant access for\n stroomuser@localhost for local access for maintenance etc. stroomuser@stroomp00.strmdev00.org for access by processing node stroomp00.strmdev00.org stroomuser@stroomp01.strmdev00.org for access by processing node stroomp01.strmdev00.org  and in the statistics database instance, we will grant access for\n stroomstats@localhost for local access for maintenance etc. stroomstats@stroomp00.strmdev00.org for access by processing node stroomp00.strmdev00.org stroomstats@stroomp01.strmdev00.org for access by processing node stroomp01.strmdev00.org  Thus for the stroom database we execute\nmysql --user=root --port=3307 --socket=/var/lib/mysql-mysqld0/mysql.sock --password  and on entering the administrator’s password, we arrive at the MariaDB [(none)]\u003e or mysql\u003e prompt. At this we create the database with\ncreate database stroom;  and then to establish the users, we execute\ngrant all privileges on stroom.* to stroomuser@localhost identified by 'Stroompassword1@'; grant all privileges on stroom.* to stroomuser@stroomp00.strmdev00.org identified by 'Stroompassword1@'; grant all privileges on stroom.* to stroomuser@stroomp01.strmdev00.org identified by 'Stroompassword1@';  then\nquit;  to exit.\nAnd for the statistics database\nmysql --user=root --port=3308 --socket=/var/lib/mysql-mysqld1/mysql.sock --password  with\ncreate database statistics;  and then to establish the users, we execute\ngrant all privileges on statistics.* to stroomstats@localhost identified by 'Stroompassword2@'; grant all privileges on statistics.* to stroomstats@stroomp00.strmdev00.org identified by 'Stroompassword2@'; grant all privileges on statistics.* to stroomstats@stroomp01.strmdev00.org identified by 'Stroompassword2@';  then\nquit;  to exit.\nClearly if we need to add more processing nodes, additional grant commands would be used. Further, if we were installing the databases in a single node Stroom environment, we would just have the first two pairs of grants.\nConfigure Firewall Next we need to modify our firewall to allow remote access to our databases which listens on ports 3307 and 3308. The simplest way to achieve this is with the commands\nsudo firewall-cmd --zone=public --add-port=3307/tcp --permanent sudo firewall-cmd --zone=public --add-port=3308/tcp --permanent sudo firewall-cmd --reload sudo firewall-cmd --zone=public --list-all  Note that this allows ANY node to connect to your databases. You should give consideration to restricting this to only allowing processing node access.\nDebugging of Mariadb for Stroom If there is a need to debug the Mariadb database and Stroom interaction, one can turn on auditing for the Mariadb service. To do so, log onto the relevant database as the administrative user as per\nmysql --user=root --port=3307 --socket=/var/lib/mysql-mysqld0/mysql.sock --password or mysql --user=root --port=3308 --socket=/var/lib/mysql-mysqld1/mysql.sock --password  and at the MariaDB [(none)]\u003e  prompt enter\ninstall plugin server_audit SONAME 'server_audit'; set global server_audit_file_path='/var/log/mariadb/mysqld-mysqld0_server_audit.log'; or set global server_audit_file_path='/var/log/mariadb/mysqld-mysqld1_server_audit.log'; set global server_audit_logging=ON; set global server_audit_file_rotate_size=10485760; install plugin SQL_ERROR_LOG soname 'sql_errlog'; quit;  The above will generate two log files,\n /var/log/mariadb/mysqld-mysqld0_server_audit.log or /var/log/mariadb/mysqld-mysqld1_server_audit.log which records all commands the respective databases run. We have configured the log file will rotate at 10MB in size. /var/lib/mysql-mysqld0/sql_errors.log or /var/lib/mysql-mysqld1/sql_errors.log which records all erroneous SQL commands. This log file will rotate at 10MB in size. Note we cannot set this filename via the UI, but it will be appear in the data directory. All files will, by default, generate up to 9 rotated files.  If you wish to rotate a log file manually, log into the database as the administrative user and execute either\n set global server_audit_file_rotate_now=1; to rotate the audit log file set global sql_error_log_rotate=1; to rotate the sql_errlog log file  Initial Database Access It should be noted that if you monitor the sql_errors.log log file on a new Stooom deployment, when the Stoom Application first starts, it’s initial access to the stroom database will result in the following attempted sql statements.\n2017-04-16 16:24:50 stroomuser[stroomuser] @ stroomp00.strmdev00.org [192.168.2.126] ERROR 1146: Table 'stroom.schema_version' doesn't exist : SELECT version FROM schema_version ORDER BY installed_rank DESC 2017-04-16 16:24:50 stroomuser[stroomuser] @ stroomp00.strmdev00.org [192.168.2.126] ERROR 1146: Table 'stroom.STROOM_VER' doesn't exist : SELECT VER_MAJ, VER_MIN, VER_PAT FROM STROOM_VER ORDER BY VER_MAJ DESC, VER_MIN DESC, VER_PAT DESC LIMIT 1 2017-04-16 16:24:50 stroomuser[stroomuser] @ stroomp00.strmdev00.org [192.168.2.126] ERROR 1146: Table 'stroom.FD' doesn't exist : SELECT ID FROM FD LIMIT 1 2017-04-16 16:24:50 stroomuser[stroomuser] @ stroomp00.strmdev00.org [192.168.2.126] ERROR 1146: Table 'stroom.FEED' doesn't exist : SELECT ID FROM FEED LIMIT 1  After this access the application will realise the database does not exist and it will initialise the database.\nIn the case of the statistics database you may note the following attempted access\n2017-04-16 16:25:09 stroomstats[stroomstats] @ stroomp00.strmdev00.org [192.168.2.126] ERROR 1146: Table 'statistics.schema_version' doesn't exist : SELECT version FROM schema_version ORDER BY installed_rank DESC  Again, at this point the application will initialise this database.\n","categories":"","description":"This HOWTO describes the installation of the Stroom databases.\n","excerpt":"This HOWTO describes the installation of the Stroom databases.\n","ref":"/stroom-docs/hugo-docsy/docs/howtos/install/installdatabasehowto/","tags":["database","installation"],"title":"Database Installation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/elastic-search/","tags":"","title":"elastic-search"},{"body":"Contents  Introduction Indexing data  Creating an index in Elasticsearch Registering the index in Stroom Setting index retention Creating an indexing pipeline Creating and activating a stream processor Checking data has been indexed Reindexing data   Searching  Stroom Elasticsearch   Security  1. Introduction Stroom v6.1 can pass data to Elasticsearch for indexing. Indices created using this process (i.e. those containing a StreamId and EventId corresponding to a particular Stroom instance) are searchable via a Stroom dashboard, much like a Stroom Lucene index.\nThis integration provides operators with the flexibility to utilise the additional capabilities of Elasticsearch, (like clustering and replication) and expose indexed data for consumption by external analytic or processing tools.\nThis guide will take you through creating an Elasticsearch index, setting up an indexing pipeline, activating a stream processor and searching the indexed data in both Stroom and Elasticsearch.\n1.1. Assumptions  You have created an Elasticsearch cluster. For test purposes, you can quickly create a single-node cluster using Docker by following the steps in the Elasticsearch Docs (external link). The Elasticsearch cluster is reachable via HTTP/S from all Stroom nodes participating in stream processing. Elasticsearch security is disabled. You have a feed containing Event data.  1.2. Key differences  Unlike with Solr indexing, Elasticsearch field mappings are managed outside of Stroom, usually via the REST API (external link). Aside from creating the mandatory StreamId and EventId field mappings, explicitly defining mappings for other fields is optional. It is however, considered good practice to define these mappings, to ensure each field’s data type is correctly parsed and represented. For text fields, it also pays to ensure that the appropriate mapping parameters are used (external link), in order to satisfy your search and analysis requirements - and meet system resource constraints. Unlike both Solr and Lucene indexing, it is not necessary to mark a field as stored (i.e. storing its raw value in the inverted index). This is because Elasticsearch stores the content of the original document in the _source field (external link), which is retrieved when populating search results. Provided the _source field is enabled (as it is by default), a field is treated as stored in Stroom and its value doesn’t need to be retrieved via an extraction pipeline.  2. Indexing data 2.1. Creating an index in Elasticsearch The following cURL command creates an index named stroom_test in Elasticsearch cluster http://localhost:9200 consisting of the following fields:\n StreamId (mandatory, must be of data type long) EventId (mandatory, must also be long) Name (text). Uses the default analyzer, which tokenizes the text for matching on terms. fielddata is enabled, which allows for aggregating on these terms (external link). State (keyword). Supports exact matching.  The created index consists of 5 shards. Note that the shard count cannot be changed after index creation, without a reindex. See this guide (external link) on shard sizing.\ncurl -X PUT \"http://localhost:9200/stroom_test?pretty\" -H 'Content-Type: application/json' -d' { \"settings\": { \"number_of_shards\": 5 }, \"mappings\": { \"properties\": { \"StreamId\": { \"type\": \"long\" }, \"EventId\": { \"type\": \"long\" }, \"Name\": { \"type\": \"text\", \"fielddata\": true }, \"State\": { \"type\": \"text\", \"fielddata\": true } } } } '  After creating the index, you can add additional field mappings. Note the limitations (external link) in doing so, particularly the fact that it will not cause existing documents to be re-indexed. It is worthwhile to test index mappings on a subset of data before committing to indexing a large event feed, to ensure the resulting search experience meets your requirements.\n2.2. Registering the index in Stroom This step creates an Elasticsearch Index in the Stroom Tree and tells Stroom how to connect to your Elasticsearch cluster and index. Note that this process needs to be repeated for each index you create.\nSteps  Right-click on the folder in the Explorer Tree where you wish to create the index Select New / Elasticsearch Index Enter a valid name for the index. It is a good idea to choose one that reflects either the feed name being indexed, or if indexing multiple feeds, the nature of data they represent. In the index tab that just opened:  Select the Settings tab Set the Index to the name of the index in Elasticsearch (e.g. stroom_test from the previous example) Set the Connection URLs to one or more Elasticsearch node URLs. If multiple, separate each URL with ,. For example, a URL like http://data-0.elastic:9200,http://data-1.elastic:9200 will balance requests to two data nodes within an Elasticsearch cluster. See this document for guidance on node roles. Click Test Connection. If the connection succeeds, and the index is found, a dialog is shown indicating the test was successful. Otherwise, an error message is displayed. If the test succeeded, click the save button in the top-left. The Fields tab will now be populated with fields from the Elasticsearch index.    Note: The field mappings list is only updated when index settings are changed, or a Stroom indexing or search task begins. The refresh button in the Fields tab does not have any effect.\n2.3. Setting index retention As with Solr indexing, index document retention is determined by defining a Stroom query.\nSetting a retention query is optional and by default, documents will be retained in an index indefinitely.\nIt is recommended for indices containing events spanning long periods of time, that Elasticsearch Index Lifecycle Management (external link) be used instead. The capabilities provided, such as automatic rollover to warm or cold storage tiers, are well worth considering, especially in high-volume production clusters.\nConsiderations when implementing ILM  It is recommended that data streams are used when indexing data. These allow easier rollover and work well with ILM policies. A data stream is essentially a container for multiple date-based indices and to a search client such as Stroom, appears and is searchable like a normal Elasticsearch index. Use of data streams requires that a @timestamp field of type date be defined for each document (instead of say, EventTime). Implementing ILM policies requires careful capacity planning, including anticipating search and retention requirements.  2.4. Creating an indexing pipeline As with Lucene and Solr indexing pipelines, indexing data using Elasticsearch uses a pipeline filter. This filter accepts \u003crecord\u003e elements and for each, sends a document to Elasticsearch for indexing.\nEach \u003cdata\u003e element contained within a \u003crecord\u003e sets the document field name and value. You should ensure the name attribute of each \u003cdata\u003e element exactly matches the mapping property of the Elasticsearch index you created.\nSteps  Create a pipeline inheriting from the built-in Indexing template. Modify the xsltFilter pipeline stage to output the correct \u003crecords\u003e XML (see the Quick-Start Guide. Delete the default indexingFilter and in its place, create an ElasticIndexingFilter (see screenshot below). Review and set the following properties:  batchSize (default: 10,000). Number of documents to send in a single request to the Elasticsearch Bulk API (external link). Should usually be set to 1,000 or more. The higher the number, the more memory is required by both Stroom and Elasticsearch when sending or receiving the request. index (required). Set this to the target Elasticsearch index in the Stroom Explorer Tree. refreshAfterEachBatch (default: false). Refreshes the Elasticsearch index after each batch has finished processing. This makes any documents ingested in the batch available for searching. Unless search results are needed in near-real-time, it is recommended this be set to false and the index refresh interval be set to an appropriate value. See this document (external link) for guidance on optimising indexing performance.    2.5. Creating and activating a stream processor Follow the steps as in this guide.\n2.6. Checking data has been indexed Query Elasticsearch, checking the fields you expect are there, and of the correct data type:\nThe following query displays five results:\ncurl -X GET \"http://localhost:9200/stroom_test/_search?size=5\"  You can also get an exact document count, to ensure this matches the number of events you are expecting:\ncurl -X GET \"http://localhost:9200/stroom_test/_count\"  For more information, see the Elasticsearch Search API documentation (external link).\n2.7. Reindexing data By default, the original document values are stored in an Elasticsearch index and may be used later on to re-index data (such as when a change is made to field mappings). This is done via the Reindex API (external link). Provided these values have not changed, it would likely be more efficient to use this API to perform a re-index, instead of processing data from scratch using a Stroom stream processor.\nOn the other hand, if the content of documents being output to Elasticsearch has changed, the Elasticsearch index will need to be re-created and the stream re-processed. Examples of where this would be required include:\n A new field is added to the indexing filter, which previously didn’t exist. That field needs to be searchable for all historical events. A field is renamed A field data type is changed  If a field is omitted from the indexing translation, there is no need for a re-index, unless you wish to reclaim the space occupied by that field.\nReindexing using a pipeline processor  Delete the index. While it is possible to delete by query (external link), it is more efficient to drop the index. Additionally, deleting by query doesn’t actually remove data from disk, until segments are merged.  curl -X DELETE \"http://localhost:9200/stroom_test\"   Re-create the index (as shown earlier) Create a new pipeline processor to index the documents  3. Searching Once indexed in Elasticsearch, you can search either using the Stroom Dashboard user interface, or directly against the Elasticsearch cluster.\nThe advantage of using Stroom to search is that it allows access to the raw source data (i.e. it is not limited to what’s stored in the index). It can also use extraction pipelines to enrich search results for export in a table.\nElasticsearch on the other hand, provides a rich Search REST API (external link) with powerful aggregations that can be used to generate reports and discover patterns and anomalies. It can also be readily queried using third-party tools.\n3.1. Stroom See the Dashboard page in the Quick-Start Guide.\nInstead of selecting a Lucene index, set the target data source to the desired Elasticsearch index in the Stroom Explorer Tree.\nOnce the target data source has been set, the Dashboard can be used as with a Lucene or Solr index data source.\n3.2. Elasticsearch Elasticsearch queries can be performed directly against the cluster using the Search API (external link).\nAlternatively, there are tools that make search and discovery easier and more intuitive, like Kibana (external link).\n4. Security It is important to note that Elasticsearch data is not encrypted at rest, unless this feature is enabled and the relevant licensing tier (external link) is purchased. Therefore, appropriate measures should be taken to control access to Elasticsearch user data at the file level.\nFor production clusters, the Elasticsearch security guidelines (external link) should be followed, in order to control access and ensure requests are audited.\nYou might want to consider implementing role-based access control (external link) to prevent unauthorised users of the native Elasticsearch API or tools like Kibana, from creating, modifying or deleting data within sensitive indices.\n","categories":"","description":"How to integrate Stroom with Elastic Search\n","excerpt":"How to integrate Stroom with Elastic Search\n","ref":"/stroom-docs/hugo-docsy/docs/howtos/search/elasticsearch/","tags":["search","elastic-search"],"title":"Elasticsearch integration"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/httpd/","tags":"","title":"httpd"},{"body":"","categories":"","description":"Various How Tos convering installation of Stroom and its dependencies\n","excerpt":"Various How Tos convering installation of Stroom and its dependencies\n","ref":"/stroom-docs/hugo-docsy/docs/howtos/install/","tags":["installation"],"title":"Installation"},{"body":"Assumptions The following assumptions are used in this document.\n the user has reasonable RHEL/Centos System administration skills. installations are on Centos 7.3 minimal systems (fully patched). the term ‘node’ is used to reference the ‘host’ a service is running on. the Stroom Proxy and Application software runs as user ‘stroomuser’ and will be deployed in this user’s home directory data will reside in a directory tree referenced via ‘/stroomdata’. It is up to the user to provision a filesystem here, noting sub-directories of it will be NFS shared in Multi Node Stroom Deployments any scripts or commands that should run are in code blocks and are designed to allow the user to cut then paste the commands onto their systems in this document, when a textual screen capture is documented, data entry is identified by the data surrounded by ‘\u003c’ ‘\u003e’ . This excludes enter/return presses. better security of password choices, networking, firewalls, data stores, etc. can and should be achieved in various ways, but these HOWTOs are just a quick means of getting a working system, so only limited security is applied better configuration of the database (e.g. more memory. redundancy) should be considered in production environments the use of self signed certificates is appropriate for test systems, but users should consider appropriate CA infrastructure in production environments the user has access to a Chrome (external link) web browser as Stroom is optimised for this browser.  Introduction This HOWTO provides guidance on a variety of simple Stroom deployments.\n Multi Node Stroom Cluster (Proxy and Application)  for an environment where multiple nodes are required to handle the processing load.\n Forwarding Stroom Proxy  for extensive networks where one wants to aggregate data through a proxy before sending data to the central Stroom processing systems.\n Standalone Stroom Proxy  for disconnected networks where collected data can be manually transferred to a Stroom processing service.\n Addition of a Node to Stroom Cluster  for when one needs to add an additional node to an existing cluster.\nNodename Nomenclature For simplicity sake, the nodenames used in this HOWTO are geared towards the Multi Node Stroom Cluster deployment. That is,\n the database nodename is stroomdb0.strmdev00.org the processing nodenames are stroomp00.strmdev00.org, stroomp01.strmdev00.org, and stroomp02.strmdev00.org the first node in our cluster, stroomp00.strmdev00.org, also has the CNAME stroomp.strmdev00.org  In the case of the Proxy only deployments,\n the forwarding Stroom proxy nodename is stoomfp0.strmdev00.org the standalone nodename will be stroomp00.strmdev00.org  Storage Both the Stroom Proxy and Application store data. The typical requirement is\n directory for Stroom proxy to store inbound data files directory for Stroom application permanent data files (events, etc.) directory for Stroom application index data files directory for Stroom application working files (temporary files, output, etc.)  Where multiple processing nodes are involved, the application’s permanent data directories need to be accessible by all participating nodes.\nThus a hierarchy for a Stroom Proxy might by\n /stroomdata/stroom-proxy  and for an Application node\n /stroomdata/stroom-data /stroomdata/stroom-index /stroomdata/stroom-working  In the following examples, the storage hierarchy proposed will more suited for a multi node Stroom cluster, including the Forwarding or Standalone proxy deployments. This is to simplify the documentation. Thus, the above structure is generalised into\n /stroomdata/stroom-working-p_nn_/proxy  and\n /stroomdata/stroom-data-p_nn_ /stroomdata/stroom-index-p_nn_ /stroomdata/stroom-working-p_nn_  where nn is a two digit node number. The reason for placing the proxy directory within the Application working area will be explained later.\nAll data should be owned by the Stroom processing user. In this HOWTO, we will use stroomuser\nMulti Node Stroom Cluster (Proxy and Application) Deployment In this deployment we will install the database on a given node then deploy both the Stroom Proxy and Stroom Application software to both our processing nodes. At this point we will then integrate a web service to run ‘in-front’ of our Stroom software and then perform the initial configuration of Stroom via the user interface.\nDatabase Installation The Stroom capability requires access to two MySQL/MariaDB databases. The first is for persisting application configuration and metadata information, and the second is for the Stroom Statistics capability. Instructions for installation of the Stroom databases can be found here. Although these instructions describe the deployment of the databases to their own node, there is no reason why one can’t just install them both on the first (or only) Stroom node.\nPrerequisite Software Installation Certain software packages are required for either the Stroom Proxy or Stroom Application to run.\nThe core software list is\n java-1.8.0-openjdk java-1.8.0-openjdk-devel policycoreutils-python unzip zip mariadb or mysql client  Most of the required software are packages available via standard repositories and hence we can simply execute\nsudo yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel policycoreutils-python unzip zip  One has a choice of database clients. MariaDB is directly supported by Centos 7 and is simplest to install. This is done via\nsudo yum -y install mariadb  One could deploy the MySQL database software as the alternative.\nTo do this you need to install the MySQL Community repository files then install the client. Instructions for installation of the MySQL Community repository files can be found here or on the MySQL Site (external link). Once you have installed the MySQL repository files, install the client via\nsudo yum -y install mysql-community-client  Note that additional software will be required for other integration components (e.g. Apache httpd/mod_jk). This is described in the Web Service Integration section of this document.\nNote also, that Standalone or Forwarding Stroom Proxy deployments do NOT need a database client deployed.\nEntropy Issues in Virtual environments Both the Stroom Application and Stroom Proxy currently run on Tomcat (Version 7) which relies on the Java SecureRandom class to provide random values for any generated session identifiers as well as other components. In some circumstances the Java runtime can be delayed if the entropy source that is used to initialise SecureRandom is short of entropy. The delay is caused by the Java runtime waiting on the blocking entropy souce /dev/random to have sufficient entropy. This quite often occurs in virtual environments were there are few sources that can contribute to a system’s entropy.\nTo view the current available entropy on a Linux system, run the command\ncat /proc/sys/kernel/random/entropy_avail  A reasonable value would be over 2000 and a poor value would be below a few hundred.\nIf you are deploying Stroom onto systems with low available entropy, the start time for the Stroom Proxy can be as high as 5 minutes and for the Application as high as 15 minutes.\nOne software based solution would be to install the haveged (external link) service that attempts to provide an easy-to-use, unpredictable random number generator based upon an adaptation of the HAVEGE algorithm. To install execute\nyum -y install haveged systemctl enable haveged systemctl start haveged  For background reading in this matter, see this reference (external link) or this reference (external link).\nStorage Scenario For the purpose of this Installation HOWTO, the following sets up the storage hierarchy for a two node processing cluster. To share our permanent data we will use NFS. Accept that the NFS deployment described here is very simple, and in a production deployment, a lot more security controls should be used. Further,\nOur hierarchy is\n Node: stroomp00.strmdev00.org /stroomdata/stroom-data-p00\t- location to store Stroom application data files (events, etc.) for this node /stroomdata/stroom-index-p00\t- location to store Stroom application index files /stroomdata/stroom-working-p00\t- location to store Stroom application working files (e.g. temporary files, output, etc.) for this node /stroomdata/stroom-working-p00/proxy\t- location for Stroom proxy to store inbound data files Node: stroomp01.strmdev00.org /stroomdata/stroom-data-p01\t- location to store Stroom application data files (events, etc.) for this node /stroomdata/stroom-index-p01\t- location to store Stroom application index files /stroomdata/stroom-working-p01\t- location to store Stroom application working files (e.g. temporary files, output, etc.) for this node /stroomdata/stroom-working-p01/proxy\t- location for Stroom proxy to store inbound data files  Creation of Storage Hierarchy So, we first create processing user on all nodes as per\nsudo useradd --system stroomuser  And the relevant commands to create the above hierarchy would be\n Node: stroomp00.strmdev00.org  sudo mkdir -p /stroomdata/stroom-data-p00 /stroomdata/stroom-index-p00 /stroomdata/stroom-working-p00 /stroomdata/stroom-working-p00/proxy sudo mkdir -p /stroomdata/stroom-data-p01 # So that this node can mount stroomp01's data directory sudo chown -R stroomuser:stroomuser /stroomdata sudo chmod -R 750 /stroomdata   Node: stroomp01.strmdev00.org  sudo mkdir -p /stroomdata/stroom-data-p01 /stroomdata/stroom-index-p01 /stroomdata/stroom-working-p01 /stroomdata/stroom-working-p01/proxy sudo mkdir -p /stroomdata/stroom-data-p00 # So that this node can mount stroomp00's data directory sudo chown -R stroomuser:stroomuser /stroomdata sudo chmod -R 750 /stroomdata  Deployment of NFS to share Stroom Storage We will use NFS to cross mount the permanent data directories. That is\n node stroomp00.strmdev00.org will mount stroomp01.strmdev00.org:/stroomdata/stroom-data-p01 and, node stroomp01.strmdev00.org will mount stroomp00.strmdev00.org:/stroomdata/stroom-data-p00.  The HOWTO guide to deploy and configure NFS for our Scenario is here\nStroom Installation Pre-installation setup Before installing either the Stroom Proxy or Stroom Application, we need establish various files and scripts within the Stroom Processing user’s home directory to support the Stroom services and their persistence. This is setup is described here.\nStroom Proxy Installation Instructions for installation of the Stroom Proxy can be found here.\nStroom Application Installation Instructions for installation of the Stroom application can be found here.\nWeb Service Integration One typically ‘fronts’ either a Stroom Proxy or Stroom Application with a secure web service such as Apache’s Httpd or NGINX. In our scenario, we will use SSL to secure the web service and further, we will use Apache’s Httpd.\nWe first need to create certificates for use by the web service. The following provides instructions for this. The created certificates can then be used when configuration the web service.\nThis HOWTO is designed to deploy Apache’s httpd web service as a front end (https) (to the user) and Apache’s mod_jk as the interface between Apache and the Stroom tomcat applications. The instructions to configure this can be found here.\nOther Web service capability can be used, for example, NGINX (external link).\nInstallation Validation We will now check that the installation and web services integration has worked.\nSanity firewall check To ensure you have the firewall correctly set up, the following command\nsudo firewall-cmd --reload sudo firewall-cmd --zone=public --list-all  should result in\npublic (active) target: default icmp-block-inversion: no interfaces: enp0s3 sources: services: dhcpv6-client http https nfs ssh ports: 8009/tcp 9080/tcp 8080/tcp 9009/tcp protocols: masquerade: no forward-ports: sourceports: icmp-blocks: rich rules:  Test Posting of data to the Stroom service You can test the data posting service with the command\ncurl -k --data-binary @/etc/group \"https://stroomp.strmdev00.org/stroom/datafeed\" -H \"Feed:TEST-FEED-V1_0\" -H \"System:EXAMPLE_SYSTEM\" -H \"Environment:EXAMPLE_ENVIRONMENT\"  which WILL result in an error as we have not configured the Stroom Application as yet. The error should look like\n\u003chtml\u003e\u003chead\u003e\u003ctitle\u003eApache Tomcat/7.0.53 - Error report\u003c/title\u003e\u003cstyle\u003e\u003c!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--\u003e\u003c/style\u003e \u003c/head\u003e\u003cbody\u003e\u003ch1\u003eHTTP Status 406 - Stroom Status 110 - Feed is not set to receive data - \u003c/h1\u003e\u003cHR size=\"1\" noshade=\"noshade\"\u003e\u003cp\u003e\u003cb\u003etype\u003c/b\u003e Status report\u003c/p\u003e\u003cp\u003e\u003cb\u003emessage\u003c/b\u003e \u003cu\u003eStroom Status 110 - Feed is not set to receive data - \u003c/u\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003edescription\u003c/b\u003e \u003cu\u003eThe resource identified by this request is only capable of generating responses with characteristics not acceptable according to the request \"accept\" headers.\u003c/u\u003e\u003c/p\u003e\u003cHR size=\"1\" noshade=\"noshade\"\u003e\u003ch3\u003eApache Tomcat/7.0.53\u003c/h3\u003e\u003c/body\u003e\u003c/html\u003e  If you view the Stroom proxy log, ~/stroom-proxy/instance/logs/stroom.log, on both processing nodes, you will see on one node, the datafeed.DataFeedRequestHandler events running under, in this case, the ajp-apr-9009-exec-1 thread indicating the failure\n... 2017-01-03T03:35:47.366Z WARN [ajp-apr-9009-exec-1] datafeed.DataFeedRequestHandler (DataFeedRequestHandler.java:131) - \"handleException()\",\"Environment=EXAMPLE_ENVIRONMENT\",\"Expect=100-continue\",\"Feed=TEST-FEED-V1_0\",\"GUID=39960cf9-e50b-4ae8-a5f2-449ee670d2eb\",\"ReceivedTime=2017-01-03T03:35:46.915Z\",\"RemoteAddress=192.168.2.220\",\"RemoteHost=192.168.2.220\",\"System=EXAMPLE_SYSTEM\",\"accept=*/*\",\"content-length=1051\",\"content-type=application/x-www-form-urlencoded\",\"host=stroomp.strmdev00.org\",\"user-agent=curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2\",\"Stroom Status 110 - Feed is not set to receive data\" 2017-01-03T03:35:47.367Z ERROR [ajp-apr-9009-exec-1] zip.StroomStreamException (StroomStreamException.java:131) - sendErrorResponse() - 406 Stroom Status 110 - Feed is not set to receive data - 2017-01-03T03:35:47.368Z INFO [ajp-apr-9009-exec-1] datafeed.DataFeedRequestHandler$1 (DataFeedRequestHandler.java:104) - \"doPost() - Took 478 ms to process (concurrentRequestCount=1) 406\",\"Environment=EXAMPLE_ENVIRONMENT\",\"Expect=100-continue\",\"Feed=TEST-FEED-V1_0\",\"GUID=39960cf9-e50b-4ae8-a5f2-449ee670d2eb\",\"ReceivedTime=2017-01-03T03:35:46.915Z\",\"RemoteAddress=192.168.2.220\",\"RemoteHost=192.168.2.220\",\"System=EXAMPLE_SYSTEM\",\"accept=*/*\",\"content-length=1051\",\"content-type=application/x-www-form-urlencoded\",\"host=stroomp.strmdev00.org\",\"user-agent=curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2\" ...  Further, if you execute the data posting command (curl) multiple times, you will see the loadbalancer working in that, the above WARN/ERROR/INFO logs will swap between the proxy services (i.e. first error will be in stroomp00.strmdev00.org’s proxy log file, then second on stroomp01.strmdev00.org’s proxy log file, then back to stroomp00.strmdev00.org and so on).\nStroom Application Configuration Although we have installed our multi node Stroom cluster, we now need to configure it. We do this via the user interface (UI).\nLogging into the Stroom UI for the first time To log into the UI of your newly installed Stroom instance, present the base URL to your Chrome (external link) browser. In this deployment, you should enter the URLS http://stroomp.strmdev00.org, or https://stroomp.strmdev00.org or https://stroomp.strmdev00.org/stroom, noting the first URLs should automatically direct you to the last URL.\nIf you have personal certificates loaded in your Chrome browser, you may be asked which certificate to use to authenticate yourself to stroomp.strmdev00.org:443. As Stroom has not been configured to use user certificates, the choice is not relevant, just choose one and continue.\nAdditionally, if you are using self-signed certificates, your browser will generate an alert as per To proceed you need to select the ADVANCED hyperlink to see\nIf you select the Proceed to stroomp.strmdev00.org (unsafe) hyper-link you will be presented with the standard Stroom UI login page.\nThis page has two panels - About Stroom and Login.\nIn the About Stroom panel we see an introductory description of Stroom in the top left and deployment details in the bottom left of the panel. The deployment details provide\n Build Version: - the build version of the Stroom application deployed Build Date: - the date the version was built Up Date: - the install date Node Name: - the node within the Stroom cluster you have connected to  Login with Stroom default Administrative User Each new Stroom deployment automatically creates the administrative user admin and this user’s password is initially set to admin. We will login as this user which also validates that the database and UI is working correctly in that you can login and the password is admin.\nCreate an Attributed User to perform configuration We should configure Stroom using an attributed user account. That is, we should create a user, in our case it will be burn (the author) and once created, we login with that account then perform the initial configuration activities. You don’t have to do this, but it is sound security practice.\nOnce you have created the user you should log out of the admin account and log back in as our user burn.\nConfigure the Volumes for our Stroom deployment Before we can store data within Stroom we need to configure the volumes we have allocated in our Storage hierarchy. The Volume Maintenance HOWTO shows how to do this.\nConfigure the Nodes for our Stroom deployment In a Stroom cluster, nodes are expected to communicate with each other on port 8080 over http. Our installation in a multi node environment ensures the firewall will allow this but we also need to configure the nodes. This is achieved via the Stroom UI where we set a Cluster URL for each node. The following Node Configuration HOWTO demonstrates how do set the Cluster URL.\nData Stream Processing To enable Stroom to process data, it’s Data Processors need to be enabled. There are NOT enabled by default on installation. The following section in our Stroom Tasks HowTo shows how to do this.\nTesting our Stroom Application and Proxy Installation To complete the installation process we will test that we can send and ingest data.\nAdd a Test Feed In order for Stroom to be able to handle various data sources, be they Apache HTTPD web access logs, MicroSoft Windows Event logs or Squid Proxy logs, Stroom must be told what the data is when it is received. This is achieved using Event Feeds. Each feed has a unique name within the system.\nTo test our installation can accept and ingest data, we will create a test Event feed. The ‘name’ of the feed will be TEST-FEED-V1_0. Note that in a production environment is is best that a well defined nomenclature is used for feed ‘names’. For our testing purposes TEST-FEED-V1_0 is sufficient.\nSending Test Data NOTE: Before testing our new feed, we should restart both our Stroom application services so that any volume changes are propagated. This can be achieved by simply running\nsudo -i -u stroomuser bin/StopServices.sh bin/StartServices.sh  on both nodes. It is suggested you first log out of Stroom, if you are currently logged in and you should monitor the Stroom application logs to ensure it has successfully restarted. Remember to use the T and Tp bash aliases we set up.\nFor this test, we will send the contents of /etc/group to our test feed. We will also send the file from the cluster’s database machine. The command to send this file is\ncurl -k --data-binary @/etc/group \"https://stroomp.strmdev00.org/stroom/datafeed\" -H \"Feed:TEST-FEED-V1_0\" -H \"System:EXAMPLE_SYSTEM\" -H \"Environment:EXAMPLE_ENVIRONMENT\"  We will test a number of features as part of our installation test. These are\n simple post of data simple post of data to validate load balancing is working simple post to direct feed interface simple post to direct feed interface to validate load balancing is working identify that the Stroom Proxy Aggregation is working correctly  As part of our testing will check the presence of the inbound data, as files, within the proxy storage area. Now as the proxy storage area is also the location from which the Stroom application automatically aggregates then ingests the data stored by the proxy, we can either turn off the Proxy Aggregation task, or attempt to perform our tests noting that proxy aggregation occurs every 10 minutes by default. For simplicity, we will turn off the Proxy Aggregation task.\nWe can now perform out tests. Follow the steps in the Data Posting Tests section of the Testing Stroom Installation HOWTO\nForwarding Stroom Proxy Deployment In this deployment will install a Stroom Forwarding Proxy which is designed to aggregate data posted to it for managed forwarding to a central Stroom processing system. This scenario is assuming we are installing on the fully patch Centos 7.3 host, stroomfp0.strmdev00.org. Further it assumes we have installed, configured and tested the destination Stroom system we will be forwarding to.\nWe will first deploy the Stroom Proxy then configure it as a Forwarding Proxy then integrate a web service to run ‘in-front’ of Proxy.\nPrerequisite Software Installation for Forwarding Proxy Certain software packages are required for the Stroom Proxy to run.\nThe core software list is\n java-1.8.0-openjdk java-1.8.0-openjdk-devel policycoreutils-python unzip zip  Most of the required software are packages available via standard repositories and hence we can simply execute\nsudo yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel policycoreutils-python unzip zip  Note that additional software will be required for other integration components (e.g. Apache httpd/mod_jk). This is described in the Web Service Integration for Forwarding Proxy section of this document.\nForwarding Proxy Storage Since we are a proxy that stores data sent to it and forwards it each minute we have only one directory.\n /stroomdata/stroom-working-fp0/proxy - location for Stroom proxy to store inbound data files prior to forwarding  You will note that these HOWTOs use a consistent storage nomenclature for simplicity of documentations.\nCreation of Storage for Forwarding Proxy We create the processing user, as per\nsudo useradd --system stroomuser  then create the storage hierarchy with the commands\nsudo mkdir -p /stroomdata/stroom-working-fp0/proxy sudo chown -R stroomuser:stroomuser /stroomdata sudo chmod -R 750 /stroomdata  Stroom Forwarding Proxy Installation Pre-installation setup Before installing the Stroom Forwarding Proxy, we need establish various files and scripts within the Stroom Processing user’s home directory to support the Stroom services and their persistence. This is setup is described here. Although this setup HOWTO is orientated towards a complete Stroom Proxy and Application installation, it does provide all the processing user setup requirements for a Stroom Proxy as well.\nStroom Forwarding Proxy Installation Instructions for installation of the Stroom Proxy can be found here, noting you should follow the steps for configuring the proxy as a Forwarding proxy.\nWeb Service Integration for Forwarding Proxy One typically ‘fronts’ a Stroom Proxy with a secure web service such as Apache’s Httpd or NGINX. In our scenario, we will use SSL to secure the web service and further, we will use Apache’s Httpd.\nWe first need to create certificates for use by the web service. The SSL Certificate Generation HOWTO provides instructions for this. The created certificates can then be used when configuration the web service. NOTE also, that for a forwarding proxy we will need to establish Key and Trust stores as well. This is also documented in the SSL Certificate Generation HOWTO here\nThis HOWTO is designed to deploy Apache’s httpd web service as a front end (https) (to the user) and Apache’s mod_jk as the interface between Apache and the Stroom tomcat applications. The instructions to configure this can be found here. Please take note of where a Stroom Proxy configuration item is different to that of a Stroom Application processing node.\nOther Web service capability can be used, for example, NGINX (external link).\nTesting our Forwarding Proxy Installation To complete the installation process we will test that we can send data to the forwarding proxy and that it forwards the files it receives to the central Stroom processing system. As stated earlier, it is assumed we have installed, configured and tested the destination central Stroom processing system and thus we will have a test Feed already established - TEST-FEED-V1_0.\nSending Test Data For this test, we will send the contents of /etc/group to our test feed - TEST-FEED-V1_0. It doesn’t matter from which host we send the file from. The command to send file is\ncurl -k --data-binary @/etc/group \"https://stroomfp0.strmdev00.org/stroom/datafeed\" -H \"Feed:TEST-FEED-V1_0\" -H \"System:EXAMPLE_SYSTEM\" -H \"Environment:EXAMPLE_ENVIRONMENT\"  Before testing, it is recommended you set up to monitor the Stroom proxy logs on the central server as well as on the Forwarding Proxy server.\nFollow the steps in the Forwarding Proxy Data Posting Tests section of the Testing Stroom Installation HOWTO\nStandalone Stroom Proxy Deployment In this deployment will install a Stroom Standalone Proxy which is designed to accept and store data posted to it for manual forwarding to a central Stroom processing system. This scenario is assuming we are installing on the fully patch Centos 7.3 host, stroomsap0.strmdev00.org.\nWe will first deploy the Stroom Proxy then configure it as a Standalone Proxy then integrate a web service to run ‘in-front’ of Proxy.\nPrerequisite Software Installation for Forwarding Proxy Certain software packages are required for the Stroom Proxy to run.\nThe core software list is\n java-1.8.0-openjdk java-1.8.0-openjdk-devel policycoreutils-python unzip zip  Most of the required software are packages available via standard repositories and hence we can simply execute\nsudo yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel policycoreutils-python unzip zip  Note that additional software will be required for other integration components (e.g. Apache httpd/mod_jk). This is described in the Web Service Integration for Standalone Proxy section of this document.\nStandalone Proxy Storage Since we are a proxy that stores data sent to it we have only one directory.\n /stroomdata/stroom-working-sap0/proxy - location for Stroom proxy to store inbound data files  You will note that these HOWTOs use a consistent storage nomenclature for simplicity of documentations.\nCreation of Storage for Standalone Proxy We create the processing user, as per\nsudo useradd --system stroomuser  then create the storage hierarchy with the commands\nsudo mkdir -p /stroomdata/stroom-working-sap0/proxy sudo chown -R stroomuser:stroomuser /stroomdata sudo chmod -R 750 /stroomdata  Stroom Standalone Proxy Installation Pre-installation setup Before installing the Stroom Standalone Proxy, we need establish various files and scripts within the Stroom Processing user’s home directory to support the Stroom services and their persistence. This is setup is described here. Although this setup HOWTO is orientated towards a complete Stroom Proxy and Application installation, it does provide all the processing user setup requirements for a Stroom Proxy as well.\nStroom Standalone Proxy Installation Instructions for installation of the Stroom Proxy can be found here, noting you should follow the steps for configuring the proxy as a Store_NoDB proxy.\nWeb Service Integration for Standalone Proxy One typically ‘fronts’ a Stroom Proxy with a secure web service such as Apache’s Httpd or NGINX. In our scenario, we will use SSL to secure the web service and further, we will use Apache’s Httpd.\nWe first need to create certificates for use by the web service. The SSL Certificate Generation HOWTO provides instructions for this. The created certificates can then be used when configuration the web service. There is no need for Trust or Key stores.\nThis HOWTO is designed to deploy Apache’s httpd web service as a front end (https) (to the user) and Apache’s mod_jk as the interface between Apache and the Stroom tomcat applications. The instructions to configure this can be found here. Please take note of where a Stroom Proxy configuration item is different to that of a Stroom Application processing node.\nOther Web service capability can be used, for example, NGINX (external link).\nTesting our Standalone Proxy Installation To complete the installation process we will test that we can send data to the standalone proxy and it stores it.\nSending Test Data For this test, we will send the contents of /etc/group to our test feed - TEST-FEED-V1_0. It doesn’t matter from which host we send the file from. The command to send file is\ncurl -k --data-binary @/etc/group \"https://stroomsap0.strmdev00.org/stroom/datafeed\" -H \"Feed:TEST-FEED-V1_0\" -H \"System:EXAMPLE_SYSTEM\" -H \"Environment:EXAMPLE_ENVIRONMENT\"  Before testing, it is recommended you set up to monitor the Standalone Proxy logs.\nFollow the steps in the Standalone Proxy Data Posting Tests section of the Testing Stroom Installation HOWTO\nAddition of a Node to a Stroom Cluster Deployment In this deployment we will deploy both the Stroom Proxy and Stroom Application software to a new processing node we wish to add to our cluster. Once we have deploy and configured the Stroom software, we will then integrate a web service to run ‘in-front’ of our Stroom software, and then perform the initial configuration of to add this node via the user interface. The node we will add is stroomp02.strmdev00.org.\nGrant access to the database for this node Connect to the Stroom database as the administrative (root) user, via the command\nsudo mysql --user=root -p  and at the MariaDB [(none)]\u003e or mysql\u003e  prompt enter\ngrant all privileges on stroom.* to stroomuser@stroomp02.strmdev00.org identified by 'Stroompassword1@'; quit;  Prerequisite Software Installation Certain software packages are required for either the Stroom Proxy or Stroom Application to run.\nThe core software list is\n java-1.8.0-openjdk java-1.8.0-openjdk-devel policycoreutils-python unzip zip mariadb or mysql client  Most of the required software are packages available via standard repositories and hence we can simply execute\nsudo yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel policycoreutils-python unzip zip sudo yum -y install mariadb  In the above instance, the database client choice is MariaDB as it is directly supported by Centos 7. One could deploy the MySQL database software as the alternative. If you have chosen a different database for the already deployed Stroom Cluster then you should use that one. See earlier in this document on how to install the MySQL Community client.\nNote that additional software will be required for other integration components (e.g. Apache httpd/mod_jk). This is described in the Web Service Integration section of this document.\nStorage Scenario To maintain our Storage Scenario them, the scenario for this node is\n Node: stroomp02.strmdev00.org /stroomdata/stroom-data-p02 - location to store Stroom application data files (events, etc.) for this node /stroomdata/stroom-index-p02 - location to store Stroom application index files /stroomdata/stroom-working-p02 - location to store Stroom application working files (e.g. tmp, output, etc.) for this node /stroomdata/stroom-working-p02/proxy - location for Stroom proxy to store inbound data files  Creation of Storage Hierarchy So, we first create processing user on our new node as per\nsudo useradd --system stroomuser  then create the storage via\nsudo mkdir -p /stroomdata/stroom-data-p02 /stroomdata/stroom-index-p02 /stroomdata/stroom-working-p02 /stroomdata/stroom-working-p02/proxy sudo mkdir -p /stroomdata/stroom-data-p00 # So that this node can mount stroomp00's data directory sudo mkdir -p /stroomdata/stroom-data-p01 # So that this node can mount stroomp01's data directory sudo chown -R stroomuser:stroomuser /stroomdata sudo chmod -R 750 /stroomdata  As we need to share this new nodes permanent data directories to the existing nodes in the Cluster, we need to create mount point directories on our existing nodes in addition to deploying NFS.\nSo we execute on\n Node: stroomp00.strmdev00.org  sudo mkdir -p /stroomdata/stroom-data-p02 sudo chmod 750 /stroomdata/stroom-data-p02 sudo chown stroomuser:stroomuser /stroomdata/stroom-data-p02  and on\n Node: stroomp01.strmdev00.org  sudo mkdir -p /stroomdata/stroom-data-p02 sudo chmod 750 /stroomdata/stroom-data-p02 sudo chown stroomuser:stroomuser /stroomdata/stroom-data-p02  Deployment of NFS to share Stroom Storage We will use NFS to cross mount the permanent data directories. That is\n node stroomp00.strmdev00.org will mount  stroomp01.strmdev00.org:/stroomdata/stroom-data-p01 and, stroomp02.strmdev00.org:/stroomdata/stroom-data-p02 and,   node stroomp01.strmdev00.org will mount  stroomp00.strmdev00.org:/stroomdata/stroom-data-p00 and stroomp02.strmdev00.org:/stroomdata/stroom-data-p02   node stroomp02.strmdev00.org will mount  stroomp00.strmdev00.org:/stroomdata/stroom-data-p00 and stroomp01.strmdev00.org:/stroomdata/stroom-data-p01    The HOWTO guide to deploy and configure NFS for our Scenario is here.\nStroom Installation Pre-installation setup Before installing either the Stroom Proxy or Stroom Application, we need establish various files and scripts within the Stroom Processing user’s home directory to support the Stroom services and their persistence. This is setup is described here. Note you should remember to set the N bash variable when generating the Environment Variable files to 02.\nStroom Proxy Installation Instructions for installation of the Stroom Proxy can be found here. Note you will be deploying a Store proxy and during the setup execution ensure you enter the appropriate values for NODE (‘stroomp02’) and REPO_DIR ('/stroomdata/stroom-working-p02/proxy'). All other values will be the same.\nStroom Application Installation Instructions for installation of the Stroom application can be found here. When executing the setup script ensure you enter the appropriate values for TEMP_DIR ('/stroomdata/stroom-working-p02') and NODE (‘stroomp02’). All other values will be the same. Note also that you will not have to wait for the ‘first’ node to initialise the Stroom database as this would have already been done when you first deployed your Stroom Cluster.\nWeb Service Integration One typically ‘fronts’ either a Stroom Proxy or Stroom Application with a secure web service such as Apache’s Httpd or NGINX. In our scenario, we will use SSL to secure the web service and further, we will use Apache’s Httpd.\nAs we are a cluster, we use the same certificate as the other nodes. Thus we need to gain the certificate package from an existing node.\nSo, on stroomp00.strmdev00.org, we replicate the directory ~stroomuser/stroom-jks to our new node. That is, tar it up, copy the tar file to stroomp02 and untar it. We can make use of the other node’s mounted file system.\nsudo -i -u stroomuser cd ~stroomuser tar cf stroom-jks.tar stroom-jks mv stroom-jks.tar /stroomdata/stroom-data-p02  then on our new node (stroomp02.strmdev00.org) we extract the data.\nsudo -i -u stroomuser cd ~stroomuser tar xf /stroomdata/stroom-data-p02/stroom-jks.tar \u0026\u0026 rm -f /stroomdata/stroom-data-p02/stroom-jks.tar  Now ensure protection, ownership and SELinux context for these files by running\nchmod 700 ~stroomuser/stroom-jks/private ~stroomuser/stroom-jks chown -R stroomuser:stroomuser ~stroomuser/stroom-jks chcon -R --reference /etc/pki ~stroomuser/stroom-jks  This HOWTO is designed to deploy Apache’s httpd web service as a front end (https) (to the user) and Apache’s mod_jk as the interface between Apache and the Stroom tomcat applications. The instructions to configure this can be found here. You should pay particular attention to the section on the Apache Mod_JK configuration as you MUST regenerate the Mod_JK workers.properties file on the existing cluster nodes as well as generating it on our new node.\nOther Web service capability can be used, for example, NGINX (external link).\nNote that once you have integrated the web services for our new node, you will need to restart the Apache systemd process on the existing two nodes that that the new Mod_JK configuration has taken place.\nInstallation Validation We will now check that the installation and web services integration has worked. We do this with a simple firewall check and later perform complete integration tests.\nSanity firewall check To ensure you have the firewall correctly set up, the following command\nsudo firewall-cmd --reload sudo firewall-cmd --zone=public --list-all  should result in\npublic (active) target: default icmp-block-inversion: no interfaces: enp0s3 sources: services: dhcpv6-client http https nfs ssh ports: 8009/tcp 9080/tcp 8080/tcp 9009/tcp protocols: masquerade: no forward-ports: sourceports: icmp-blocks: rich rules:  Stroom Application Configuration - New Node We will need to configure this new node’s Volumes, set it’s Cluster URL and enable it’s Stream Processors. We do this by logging into the Stroom User Interface (UI) with an account with Administrator privileges. It is recommended you use a attributed user for this activity. Once you have logged in you can configure this new node.\nConfigure the Volumes for our Stroom deployment Before we can store data on this new Stroom node we need to configure it’s volumes we have allocated in our Storage hierarchy. The section on adding new volumes in the Volume Maintenance HOWTO shows how to do this.\nConfigure the Nodes for our Stroom deployment In a Stroom cluster, nodes are expected to communicate with each other on port 8080 over http. Our installation in a multi node environment ensures the firewall will allow this but we also need to configure the new node. This is achieved via the Stroom UI where we set a Cluster URL for our node. The section on Configuring a new node in the Node Configuration HOWTO demonstrates how do set the Cluster URL.\nData Stream Processing To enable Stroom to process data, it’s Data Processors need to be enabled. There are NOT enabled by default on installation. The following section in our Stroom Tasks HowTo shows how to do this.\nTesting our New Node Installation To complete the installation process we will test that our new node has successfully integrated into our cluster.\nFirst we need to ensure we have restarted the Apache Httpd service (httpd.service) on the original nodes so that the new workers.properties configuration files take effect.\nWe now test the node integration by running the tests we use to validate a Multi Node Stroom Cluster Deployment found here noting we should monitor all three nodes proxy and application log files. Basically we are looking to see that this new node participates in the load balancing for the stroomp.strmdev00.org cluster.\n","categories":"","description":"This HOWTO is provided to assist users in setting up a number of different Stroom environments based on Centos 7.3 infrastructure.\n","excerpt":"This HOWTO is provided to assist users in setting up a number of …","ref":"/stroom-docs/hugo-docsy/docs/howtos/install/installhowto/","tags":["installation"],"title":"Installation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/installation/","tags":"","title":"installation"},{"body":"Assumptions  the user has reasonable RHEL/Centos System administration skills installation is on a fully patched minimal Centos 7.3 instance. the Stroom stroom database has been created and resides on the host stroomdb0.strmdev00.org listening on port 3307. the Stroom stroom database user is stroomuser with a password of Stroompassword1@. the Stroom statistics database has been created and resides on the host stroomdb0.strmdev00.org listening on port 3308. the Stroom statistics database user is stroomuser with a password of Stroompassword2@. the application user stroomuser has been created the user is or has deployed the two node Stroom cluster described here the user has set up the Stroom processing user as described here the prerequisite software has been installed when a screen capture is documented, data entry is identified by the data surrounded by ‘\u003c’ ‘\u003e’ . This excludes enter/return presses.  Confirm Prerequisite Software Installation The following command will ensure the prerequisite software has been deployed\nsudo yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel policycoreutils-python unzip zip sudo yum -y install mariadb or sudo yum -y install mysql-community-client  Test Database connectivity We need to test access to the Stroom databases on stroomdb0.strmdev00.org. We do this using the client mysql utility. We note that we must enter the stroomuser user’s password set up in the creation of the database earlier (Stroompassword1@) when connecting to the stroom database and we must enter the stroomstats user’s password (Stroompassword2@) when connecting to the statistics database.\nWe first test we can connect to the stroom database and then set the default database to be stroom.\n[burn@stroomp00 ~]$ mysql --user=stroomuser --host=stroomdb0.strmdev00.org --port=3307 --password Enter password: \u003c__ Stroompassword1@ __\u003e Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 2 Server version: 5.5.52-MariaDB MariaDB Server Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. MariaDB [(none)]\u003e use stroom; Database changed MariaDB [stroom]\u003e exit Bye [burn@stroomp00 ~]$  In the case of a MySQL Community deployment you will see\n[burn@stroomp00 ~]$ mysql --user=stroomuser --host=stroomdb0.strmdev00.org --port=3307 --password Enter password: \u003c__ Stroompassword1@ __\u003e Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 9 Server version: 5.7.18 MySQL Community Server (GPL) Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u003e use stroom; Database changed mysql\u003e quit Bye [burn@stroomp00 ~]$  We next test connecting to the statistics database and verify we can set the default database to be statistics.\n[burn@stroomp00 ~]$ mysql --user=stroomstats --host=stroomdb0.strmdev00.org --port=3308 --password Enter password: \u003c__ Stroompassword2@ __\u003e Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 2 Server version: 5.5.52-MariaDB MariaDB Server Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. MariaDB [(none)]\u003e use statistics; Database changed MariaDB [stroom]\u003e exit Bye [burn@stroomp00 ~]$  In the case of a MySQL Community deployment you will see\n[burn@stroomp00 ~]$ mysql --user=stroomstats --host=stroomdb0.strmdev00.org --port=3308 --password Enter password: \u003c__ Stroompassword2@ __\u003e Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 9 Server version: 5.7.18 MySQL Community Server (GPL) Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u003e use statistics; Database changed mysql\u003e quit Bye [burn@stroomp00 ~]$  If there are any errors, correct them.\nGet the Software The following will gain the identified, in this case release 5.0-beta.18, Stroom Application software release from github, then deploy it. You should regularly monitor the site for newer releases.\nsudo -i -u stroomuser App=5.0-beta.18 wget https://github.com/gchq/stroom/releases/download/v${App}/stroom-app-distribution-${App}-bin.zip unzip stroom-app-distribution-${App}-bin.zip chmod 750 stroom-app  Configure the Software We install the application via\nstroom-app/bin/setup.sh  during which one is prompted for a number of configuration settings. Use the following\nTEMP_DIR should be set to '/stroomdata/stroom-working-p00' or '/stroomdata/stroom-working-p01' etc depending on the node we are installing on NODE to be the hostname (not FQDN) of your host (i.e. 'stroomp00' or 'stroomp01' in our multi node scenario) RACK can be ignored, just press return PORT_PREFIX should use the default, just press return JDBC_CLASSNAME should use the default, just press return JDBC_URL to 'jdbc:mysql://stroomdb0.strmdev00.org:3307/stroom?useUnicode=yes\u0026characterEncoding=UTF-8' DB_USERNAME should be our processing user, 'stroomuser' DB_PASSWORD should be the one we set when creating the stroom database, that is 'Stroompassword1@' JPA_DIALECT should use the default, just press return JAVA_OPTS can use the defaults, but ensure you have sufficient memory, either change or accept the default STROOM_STATISTICS_SQL_JDBC_CLASSNAME should use the default, just press return STROOM_STATISTICS_SQL_JDBC_URL to 'jdbc:mysql://stroomdb0.strmdev00.org:3308/statistics?useUnicode=yes\u0026characterEncoding=UTF-8' STROOM_STATISTICS_SQL_DB_USERNAME should be our processing user, 'stroomstats' STROOM_STATISTICS_SQL_DB_PASSWORD should be the one we set when creating the stroom database, that is 'Stroompassword2@' STATS_ENGINES should use the default, just press return CONTENT_PACK_IMPORT_ENABLED should use the default, just press return CREATE_DEFAULT_VOLUME_ON_START should use the default, just press return  At this point, the script will configure the application. There should be no errors, but review the output. If you made an error then just re-run the script.\nYou will note that TEMP_DIR is the same directory we used for our STROOM_TMP environment variable when we set up the processing user scripts. Note that if you are deploying a single node environment, where the database is also running on your Stroom node, then the JDBC_URL setting can be the default.\nStart the Application service Now we start the application. In the case of multi node Stroom deployment, we start the Stroom application on the first node in the cluster, then wait until it has initialised the database commenced it’s Lifecycle task. You will need to monitor the log file to see it’s completed initialisation.\nSo as the stroomuser start the application with the command\nstroom-app/bin/start.sh  Now monitor stroom-app/instance/logs for any errors. Initially you will see the log files localhost_access_log.YYYY-MM-DD.txt and catalina.out. Check them for errors and correct (or post a question). The log4j warnings in catalina.out can be ignored. Eventually the log file stroom-app/instance/logs/stroom.log will appear. Again check it for errors and then wait for the application to be initialised. That is, wait for the Lifecycle service thread to start. This is indicated by the message\nINFO [Thread-11] lifecycle.LifecycleServiceImpl (LifecycleServiceImpl.java:166) - Started Stroom Lifecycle service  The directory stroom-app/instance/logs/events will also appear with an empty file with the nomenclature events_YYYY-MM-DDThh:mm:ss.msecZ. This is the directory for storing Stroom’s application event logs. We will return to this directory and it’s content in a later HOWTO.\nIf you have a multi node configuration, then once the database has initialised, start the application service on all other nodes. Again with\nstroom-app/bin/start.sh  and then monitor the files in its stroom-app/instance/logs for any errors. Note that in multi node configurations, you will see server.UpdateClusterStateTaskHandler messages in the log file of the form\nWARN [Stroom P2 #9 - GenericServerTask] server.UpdateClusterStateTaskHandler (UpdateClusterStateTaskHandler.java:150) - discover() - unable to contact stroomp00 - No cluster call URL has been set for node: stroomp00  This is ok as we will establish the cluster URL’s later.\nMulti Node Firewall Provision In the case of a multi node Stroom deployment, you will need to open certain ports to allow Tomcat to communicate to all nodes participating in the cluster. Execute the following on all nodes. Note you will need to drop out of the stroomuser shell prior to execution.\nexit; # To drop out of the stroomuser shell sudo firewall-cmd --zone=public --add-port=8080/tcp --permanent sudo firewall-cmd --zone=public --add-port=9080/tcp --permanent sudo firewall-cmd --zone=public --add-port=8009/tcp --permanent sudo firewall-cmd --zone=public --add-port=9009/tcp --permanent sudo firewall-cmd --reload sudo firewall-cmd --zone=public --list-all  In a production environment you would improve the above firewall settings - to perhaps limit the communication to just the Stroom processing nodes.\n","categories":"","description":"This HOWTO describes the installation and initial configuration of the Stroom Application.\n","excerpt":"This HOWTO describes the installation and initial configuration of the …","ref":"/stroom-docs/hugo-docsy/docs/howtos/install/installapplicationhowto/","tags":["installation"],"title":"Installation of Stroom Application"},{"body":"Assumptions The following assumptions are used in this document.\n the user has reasonable RHEL/Centos System administration skills. installation is on a fully patched minimal Centos 7.3 instance. the Stroom database has been created and resides on the host stroomdb0.strmdev00.org listening on port 3307. the Stroom database user is stroomuser with a password of Stroompassword1@. the application user stroomuser has been created. the user is or has deployed the two node Stroom cluster described here. the user has set up the Stroom processing user as described here. the prerequisite software has been installed. when a screen capture is documented, data entry is identified by the data surrounded by ‘\u003c’ ‘\u003e’ . This excludes enter/return presses.  Confirm Prerequisite Software Installation The following command will ensure the prerequisite software has been deployed\nsudo yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel policycoreutils-python unzip zip sudo yum -y install mariadb or sudo yum -y install mysql-community-client  Note that we do NOT need the database client software for a Forwarding or Standalone proxy.\nGet the Software The following will gain the identified, in this case release 5.1-beta.10, Stroom Application software release from github, then deploy it. You should regularly monitor the site for newer releases.\nsudo -i -u stroomuser Prx=v5.1-beta.10 wget https://github.com/gchq/stroom-proxy/releases/download/${Prx}/stroom-proxy-distribution-${Prx}.zip unzip stroom-proxy-distribution-${Prx}.zip  Configure the Software There are three different types of Stroom Proxy\n Store  A store proxy accepts batches of events, as files. It will validate the batch with the database then store the batches as files in a configured directory.\n Store_NoDB  A store_nodb proxy accepts batches of events, as files. It has no connectivity to the database, so it assumes all batches are valid, so it stores the batches as files in a configured directory.\n Forwarding  A forwarding proxy accepts batches of events, as files. It has indirect connectivity to the database via the destination proxy, so it validates the batches then stores the batches as files in a configured directory until they are periodically forwarded to the configured destination Stroom proxy.\nWe will demonstrate the installation of each.\nStore Proxy Configuration In our Store Proxy description below, we will use the multi node deployment scenario. That is we are deploying the Store proxy on multiple Stroom nodes (stroomp00, stroomp01) and we have configured our storage as per the Storage Scenario which means the directories to install the inbound batches of data are /stroomdata/stroom-working-p00/proxy and /stroomdata/stroom-working-p01/proxy depending on the node.\nTo install a Store proxy, we run\nstroom-proxy/bin/setup.sh store  during which one is prompted for a number of configuration settings. Use the following\nNODE to be the hostname (not FQDN) of your host (i.e. 'stroomp00' or 'stroomp01' depending on the node we are installing on) PORT_PREFIX should use the default, just press return REPO_DIR should be set to '/stroomdata/stroom-working-p00/proxy' or '/stroomdata/stroom-working-p01/proxy' depending on the node we are installing on REPO_FORMAT can be left as the default, just press return JDBC_CLASSNAME should use the default, just press return JDBC_URL should be set to 'jdbc:mysql://stroomdb0.strmdev00.org:3307/stroom' DB_USERNAME should be our processing user, 'stroomuser' DB_PASSWORD should be the one we set when creating the stroom database, that is 'Stroompassword1@' JAVA_OPTS can use the defaults, but ensure you have sufficient memory, either change or accept the default  At this point, the script will configure the proxy. There should be no errors, but review the output. If you make a mistake in the above, just re-run the script.\nNOTE: The selection of the REPO_DIR above and the setting of the STROOM_TMP environment variable earlier ensure that not only inbound files are placed in the REPO_DIR location but the Stroom Application itself will access the same directory when it aggregates inbound data for ingest in it’s proxy aggregation threads.\nForwarding Proxy Configuration In our Forwarding Proxy description below, we will deploy on a host named stroomfp0 and it will store the files in /stroomdata/stroom-working-fp0/proxy. Remember, we are being consistent with our Storage hierarchy to make documentation and scripting simpler. Our destination host to periodically forward the files to will be stroomp.strmdev00.org (the CNAME for stroomp00.strmdev00.org).\nTo install a Forwarding proxy, we run\nstroom-proxy/bin/setup.sh forward  during which one is prompted for a number of configuration settings. Use the following\nNODE to be the hostname (not FQDN) of your host (i.e. 'stroomfp0' in our example) PORT_PREFIX should use the default, just press return REPO_DIR should be set to '/stroomdata/stroom-working-fp0/proxy' which we created earlier. REPO_FORMAT can be left as the default, just press return FORWARD_SERVER should be set to our stroom server. (i.e. 'stroomp.strmdev00.org' in our example) JAVA_OPTS can use the defaults, but ensure you have sufficient memory, either change or accept the default  At this point, the script will configure the proxy. There should be no errors, but review the output.\nStore No Database Proxy Configuration In our Store_NoDB Proxy description below, we will deploy on a host named stroomsap0 and it will store the files in /stroomdata/stroom-working-sap0/proxy. Remember, we are being consistent with our Storage hierarchy to make documentation and scripting simpler.\nTo install a Store_NoDB proxy, we run\nstroom-proxy/bin/setup.sh store_nodb  during which one is prompted for a number of configuration settings. Use the following\nNODE to be the hostname (not FQDN) of your host (i.e. 'stroomsap0' in our example) PORT_PREFIX should use the default, just press return REPO_DIR should be set to '/stroomdata/stroom-working-sap0/proxy' which we created earlier. REPO_FORMAT can be left as the default, just press return JAVA_OPTS can use the defaults, but ensure you have sufficient memory, either change or accept the default  At this point, the script will configure the proxy. There should be no errors, but review the output.\nApache/Mod_JK change For all proxy deployments, if we are using Apache’s mod_jk then we need to ensure the proxy’s AJP connector specifies a 64K packetSize. View the file stroom-proxy/instance/conf/server.xml to ensure the Connector element for the AJP protocol has a packetSize attribute of 65536. For example,\ngrep AJP stroom-proxy/instance/conf/server.xml  shows\n\u003cConnector port=\"9009\" protocol=\"AJP/1.3\" connectionTimeout=\"20000\" redirectPort=\"8443\" maxThreads=\"200\" packetSize=\"65536\" /\u003e  This check is required for earlier releases of the Stroom Proxy. Releases since v5.1-beta.4 have set the AJP packetSize.\nStart the Proxy Service We can now manually start our proxy service. Do so as the stroomuser with the command\nstroom-proxy/bin/start.sh  Now monitor the directory stroom-proxy/instance/logs for any errors. Initially you will see the log files localhost_access_log.YYYY-MM-DD.txt and catalina.out. Check them for errors and correct (or pose a question to this arena). The context path and unknown version warnings in catalina.out can be ignored.\nEventually (about 60 seconds) the log file stroom-proxy/instance/logs/stroom.log will appear. Again check it for errors. The proxy will have completely started when you see the messages\nINFO [localhost-startStop-1] spring.StroomBeanLifeCycleReloadableContextBeanProcessor (StroomBeanLifeCycleReloadableContextBeanProcessor.java:109) - ** proxyContext 0 START COMPLETE **  and\nINFO [localhost-startStop-1] spring.StroomBeanLifeCycleReloadableContextBeanProcessor (StroomBeanLifeCycleReloadableContextBeanProcessor.java:109) - ** webContext 0 START COMPLETE **  If you leave it for a while you will eventually see cyclic (10 minute cycle) messages of the form\nINFO [Repository Reader Thread 1] repo.ProxyRepositoryReader (ProxyRepositoryReader.java:170) - run() - Cron Match at YYYY-MM-DD ...  If a proxy takes too long to start, you should read the section on Entropy Issues.\nProxy Repository Format A Stroom Proxy stores inbound files in a hierarchical file system whose root is supplied during the proxy setup (REPO_DIR) and as files arrive they are given a repository id that is a one-up number starting at one (1). The files are stored in a specific repository format. The default template is ${pathId}/${id} and this pattern will produce the following output files under REPO_DIR for the given repository id\n   Repository Id FilePath     1 000.zip   100 100.zip   1000 001/001000.zip   10000 010/010000.zip   100000 100/100000.zip    Since version v5.1-beta.4, this template can be specified during proxy setup via the entry to the Stroom Proxy Repository Format prompt\n... @@REPO_FORMAT@@ : Stroom Proxy Repository Format [${pathId}/${id}] \u003e ...  The template uses replacement variables to form the file path. As indicated above, the default template is ${pathId}/${id} where ${pathId} is the automatically generated directory for a given repository id and ${id} is the repository id.\nOther replacement variables can be used to in the template including http header meta data parameters (e.g. ‘${feed}') and time based parameters (e.g. ‘${year}'). Replacement variables that cannot be resolved will be output as ‘_’. You must ensure that all templates include the ‘${id}’ replacement variable at the start of the file name, failure to do this will result in an invalid repository.\nAvailable time based parameters are based on the file’s time of processing and are zero filled (excluding ms).\n   Parameter Description     year four digit year   month two digit month   day two digit day   hour two digit hour   minute two digit minute   second two digit second   millis three digit milliseconds value   ms milliseconds since Epoch value    Proxy Repository Template Examples For each of the following templates applied to a Store NoDB Proxy, the resultant proxy directory tree is shown after three posts were sent to the test feed TEST-FEED-V1_0 and two posts to the test feed FEED-NOVALUE-V9_0\nExample A - The default - ${pathId}/${id} [stroomuser@stroomsap0 ~]$ find /stroomdata/stroom-working-sap0/proxy/ /stroomdata/stroom-working-sap0/proxy/ /stroomdata/stroom-working-sap0/proxy/001.zip /stroomdata/stroom-working-sap0/proxy/002.zip /stroomdata/stroom-working-sap0/proxy/003.zip /stroomdata/stroom-working-sap0/proxy/004.zip /stroomdata/stroom-working-sap0/proxy/005.zip [stroomuser@stroomsap0 ~]$  Example B - A feed orientated structure - ${feed}/${year}/${month}/${day}/${pathId}/${id} [stroomuser@stroomsap0 ~]$ find /stroomdata/stroom-working-sap0/proxy/ /stroomdata/stroom-working-sap0/proxy/ /stroomdata/stroom-working-sap0/proxy/TEST-FEED-V1_0 /stroomdata/stroom-working-sap0/proxy/TEST-FEED-V1_0/2017 /stroomdata/stroom-working-sap0/proxy/TEST-FEED-V1_0/2017/07 /stroomdata/stroom-working-sap0/proxy/TEST-FEED-V1_0/2017/07/23 /stroomdata/stroom-working-sap0/proxy/TEST-FEED-V1_0/2017/07/23/001.zip /stroomdata/stroom-working-sap0/proxy/TEST-FEED-V1_0/2017/07/23/002.zip /stroomdata/stroom-working-sap0/proxy/TEST-FEED-V1_0/2017/07/23/003.zip /stroomdata/stroom-working-sap0/proxy/FEED-NOVALUE-V9_0 /stroomdata/stroom-working-sap0/proxy/FEED-NOVALUE-V9_0/2017 /stroomdata/stroom-working-sap0/proxy/FEED-NOVALUE-V9_0/2017/07 /stroomdata/stroom-working-sap0/proxy/FEED-NOVALUE-V9_0/2017/07/23 /stroomdata/stroom-working-sap0/proxy/FEED-NOVALUE-V9_0/2017/07/23/004.zip /stroomdata/stroom-working-sap0/proxy/FEED-NOVALUE-V9_0/2017/07/23/005.zip [stroomuser@stroomsap0 ~]$  Example C - A date orientated structure - ${year}/${month}/${day}/${pathId}/${id} [stroomuser@stroomsap0 ~]$ find /stroomdata/stroom-working-sap0/proxy/ /stroomdata/stroom-working-sap0/proxy/ /stroomdata/stroom-working-sap0/proxy/2017 /stroomdata/stroom-working-sap0/proxy/2017/07 /stroomdata/stroom-working-sap0/proxy/2017/07/23 /stroomdata/stroom-working-sap0/proxy/2017/07/23/001.zip /stroomdata/stroom-working-sap0/proxy/2017/07/23/002.zip /stroomdata/stroom-working-sap0/proxy/2017/07/23/003.zip /stroomdata/stroom-working-sap0/proxy/2017/07/23/004.zip /stroomdata/stroom-working-sap0/proxy/2017/07/23/005.zip [stroomuser@stroomsap0 ~]$  Example D - A feed orientated structure, but with a bad parameter - ${feed}/${badparam}/${day}/${pathId}/${id} [stroomuser@stroomsap0 ~]$ find /stroomdata/stroom-working-sap0/proxy/ /stroomdata/stroom-working-sap0/proxy/ /stroomdata/stroom-working-sap0/proxy/TEST-FEED-V1_0 /stroomdata/stroom-working-sap0/proxy/TEST-FEED-V1_0/_ /stroomdata/stroom-working-sap0/proxy/TEST-FEED-V1_0/_/23 /stroomdata/stroom-working-sap0/proxy/TEST-FEED-V1_0/_/23/001.zip /stroomdata/stroom-working-sap0/proxy/TEST-FEED-V1_0/_/23/002.zip /stroomdata/stroom-working-sap0/proxy/TEST-FEED-V1_0/_/23/003.zip /stroomdata/stroom-working-sap0/proxy/FEED-NOVALUE-V9_0 /stroomdata/stroom-working-sap0/proxy/FEED-NOVALUE-V9_0/_ /stroomdata/stroom-working-sap0/proxy/FEED-NOVALUE-V9_0/_/23 /stroomdata/stroom-working-sap0/proxy/FEED-NOVALUE-V9_0/_/23/004.zip /stroomdata/stroom-working-sap0/proxy/FEED-NOVALUE-V9_0/_/23/005.zip [stroomuser@stroomsap0 ~]$  and one would also see a warning for each post in the proxy’s log file of the form\nWARN [ajp-apr-9009-exec-4] repo.StroomFileNameUtil (StroomFileNameUtil.java:133) - Unused variables found: [badparam]  ","categories":"","description":"This HOWTO describes the installation and configuration of the Stroom Proxy software.\n","excerpt":"This HOWTO describes the installation and configuration of the Stroom …","ref":"/stroom-docs/hugo-docsy/docs/howtos/install/installproxyhowto/","tags":["installation","proxy"],"title":"Installation of Stroom Proxy"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/nfs/","tags":"","title":"NFS"},{"body":"Assumptions The following assumptions are used in this document.\n the user has reasonable RHEL/Centos System administration skills installations are on Centos 7.3 minimal systems (fully patched) the user is or has deployed the example two node Stroom cluster storage hierarchy described here the configuration of this NFS is NOT secure. It is highly recommended to improve it’s security in a production environment. This could include improved firewall configuration to limit NFS access, NFS4 with Kerberos etc.  Installation of NFS software We install NFS on each node, via\nsudo yum -y install nfs-utils  and enable the relevant services, via\nsudo systemctl enable rpcbind sudo systemctl enable nfs-server sudo systemctl enable nfs-lock sudo systemctl enable nfs-idmap sudo systemctl start rpcbind sudo systemctl start nfs-server sudo systemctl start nfs-lock sudo systemctl start nfs-idmap  Configuration of NFS exports We now export the node’s /stroomdata directory (in case you want to share the working directories) by configuring /etc/exports. For simplicity sake, we will allow all nodes with the hostname nomenclature of stroomp*.strmdev00.org to mount the /stroomdata directory. This means the same configuration applies to all nodes.\n# Share Stroom data directory /stroomdata\tstroomp*.strmdev00.org(rw,sync,no_root_squash)  This can be achieved with the following on both nodes\nsudo su -c \"printf '# Share Stroom data directory\\n' \u003e\u003e /etc/exports\" sudo su -c \"printf '/stroomdata\\tstroomp*.strmdev00.org(rw,sync,no_root_squash)\\n' \u003e\u003e /etc/exports\"  On both nodes restart the NFS service to ensure the above export takes effect via\nsudo systemctl restart nfs-server  So that our nodes can offer their filesystems, we need to enable NFS access on the firewall. This is done via\nsudo firewall-cmd --zone=public --add-service=nfs --permanent sudo firewall-cmd --reload sudo firewall-cmd --zone=public --list-all  Test Mounting You should do test mounts on each node.\n Node: stroomp00.strmdev00.org  sudo mount -t nfs4 stroomp01.strmdev00.org:/stroomdata/stroom-data-p01 /stroomdata/stroom-data-p01   Node: stroomp01.strmdev00.org  sudo mount -t nfs4 stroomp00.strmdev00.org:/stroomdata/stroom-data-p00 /stroomdata/stroom-data-p00  If you are concerned you can’t see the mount with a df try a df --type=nfs4 -a or a sudo df. Irrespective, once the mounting works, make the mounts permanent by adding the following to each node’s /etc/fstab file.\n Node: stroomp00.strmdev00.org  stroomp01.strmdev00.org:/stroomdata/stroom-data-p01 /stroomdata/stroom-data-p01 nfs4 soft,bg  achieved with\nsudo su -c \"printf 'stroomp01.strmdev00.org:/stroomdata/stroom-data-p01 /stroomdata/stroom-data-p01 nfs4 soft,bg\\n' \u003e\u003e /etc/fstab\"   Node: stroomp01.strmdev00.org  stroomp00.strmdev00.org:/stroomdata/stroom-data-p00 /stroomdata/stroom-data-p00 nfs4 soft,bg  achieved with\nsudo su -c \"printf 'stroomp00.strmdev00.org:/stroomdata/stroom-data-p00 /stroomdata/stroom-data-p00 nfs4 soft,bg\\n' \u003e\u003e /etc/fstab\"  At this point reboot all processing nodes to ensure the directories mount automatically. You may need to give the nodes a minute to do this.\nAddition of another Node If one needs to add another node to the cluster, lets say, stroomp02.strmdev00.org, on which /stroomdata follows the same storage hierarchy as the existing nodes and all nodes have added mount points (directories) for this new node, you would take the following steps in order.\n  Node: stroomp02.strmdev00.org\n Install NFS software as above Configure the exports file as per    sudo su -c \"printf '# Share Stroom data directory\\n' \u003e\u003e /etc/exports\" sudo su -c \"printf '/stroomdata\\tstroomp*.strmdev00.org(rw,sync,no_root_squash)\\n' \u003e\u003e /etc/exports\"   Restart the NFS service and make the firewall enable NFS access as per  sudo systemctl restart nfs-server sudo firewall-cmd --zone=public --add-service=nfs --permanent sudo firewall-cmd --reload sudo firewall-cmd --zone=public --list-all   Test mount the existing node file systems  sudo mount -t nfs4 stroomp00.strmdev00.org:/stroomdata/stroom-data-p00 /stroomdata/stroom-data-p00 sudo mount -t nfs4 stroomp01.strmdev00.org:/stroomdata/stroom-data-p01 /stroomdata/stroom-data-p01   Once the test mounts work, we make them permanent by adding the following to the /etc/fstab file.  stroomp00.strmdev00.org:/home/stroomdata/stroom-data-p00 /home/stroomdata/stroom-data-p00 nfs4 soft,bg stroomp01.strmdev00.org:/home/stroomdata/stroom-data-p01 /home/stroomdata/stroom-data-p01 nfs4 soft,bg  achieved with\nsudo su -c \"printf 'stroomp00.strmdev00.org:/stroomdata/stroom-data-p00 /stroomdata/stroom-data-p00 nfs4 soft,bg\\n' \u003e\u003e /etc/fstab\" sudo su -c \"printf 'stroomp01.strmdev00.org:/stroomdata/stroom-data-p01 /stroomdata/stroom-data-p01 nfs4 soft,bg\\n' \u003e\u003e /etc/fstab\"    Node: stroomp00.strmdev00.org and stroomp01.strmdev00.org\n Test mount the new node’s filesystem as per    sudo mount -t nfs4 stroomp02.strmdev00.org:/stroomdata/stroom-data-p02 /stroomdata/stroom-data-p02   Once the test mount works, make the mount permanent by adding the following to the /etc/fstab file  stroomp02.strmdev00.org:/stroomdata/stroom-data-p02 /stroomdata/stroom-data-p02 nfs4 soft,bg  achieved with\nsudo su -c \"printf 'stroomp02.strmdev00.org:/stroomdata/stroom-data-p02 /stroomdata/stroom-data-p02 nfs4 soft,bg\\n' \u003e\u003e /etc/fstab\"  ","categories":"","description":"The following is a HOWTO to assist users in the installation and set up of NFS to support the sharing of directories in a two node Stroom cluster or add a new node to an existing cluster.\n","excerpt":"The following is a HOWTO to assist users in the installation and set …","ref":"/stroom-docs/hugo-docsy/docs/howtos/install/installnfshowto/","tags":["NFS","installation"],"title":"NFS Installation and Configuration"},{"body":"Stroom HOWTO - Node Cluster URL Setup In a Stroom cluster, Nodes are expected to communicate with each other on port 8080 over http. To facilitate this, we need to set each node’s Cluster URL and the following demonstrates this process.\nAssumptions  an account with the Administrator Application Permission is currently logged in. we have a multi node Stroom cluster with two nodes, stroomp00 and stroomp01 appropriate firewall configurations have been made in the scenario of adding a new node to our multi node deployment, the node added will be stroomp02  Configure Two Nodes To configure the nodes, move to the Monitoring item of the Main Menu and select it to bring up the Monitoring sub-menu.\nthen move down and select the Nodes sub-item to be presented with the Nodes configuration tab as seen below.\nTo set stroomp00’s Cluster URL, move the it’s line in the display and select it. It will be highlighted.\nThen move the cursor to the Edit Node icon in the top left of the Nodes tab and select it. On selection the Edit Node configuration window will be displayed and into the Cluster URL: entry box, enter the first node’s URL of http://stroomp00.strmdev00.org:8080/stroom/clustercall.rpc\nthen press the at which we see the Cluster URL has been set for the first node as per\nWe next select the second node\nthen move the cursor to the Edit Node icon in the top left of the Nodes tab and select it. On selection the Edit Node configuration window will be displayed and into the Cluster URL: entry box, enter the second node’s URL of http://stroomp01.strmdev00.org:8080/stroom/clustercall.rpc\nthen press the At this we will see both nodes have the Cluster URLs set.\n.\nYou may need to press the Refresh icon found at top left of Nodes configuration tab, until both nodes show healthy pings.\n.\nIf you do not get ping results for each node, then they are not configured correctly. In that situation, review all log files and processes that you have performed.\nOnce you have set the Cluster URLs of each node you should also set the master assignment priority for each node to be different to all of the others. In the image above both have been assigned equal priority - 1. We will change stroomp00 to have a different priority - 3. You should note that the node with the highest priority gains the Master node status.\n.\nConfigure New Node When one expands a Multi Node Stroom cluster deployment, after the installation of the Stroom Proxy and Application software and services on the new node, one has to configure the new node’s Cluster URL.\nTo configure the new node, move to the Monitoring item of the Main Menu and select it to bring up the Monitoring sub-menu.\nthen move down and select the Nodes sub-item to be presented with the Nodes configuration tab as seen below.\nTo set stroomp02’s Cluster URL, move the it’s line in the display and select it. It will be highlighted.\nThen move the cursor to the Edit Node icon in the top left of the Nodes tab and select it. On selection the Edit Node configuration window will be displayed and into the Cluster URL: entry box, enter the first node’s URL of http://stroomp02.strmdev00.org:8080/stroom/clustercall.rpc\nthen press the button at which we see the Cluster URL has been set for the first node as per\nYou need to press the Refresh icon found at top left of Nodes configuration tab, until the new node shows a healthy ping.\n.\nIf you do not get a ping results for the new node, then it is not configured correctly. In that situation, review all log files and processes that you have performed.\nOnce you have set the Cluster URL you should also set the master assignment priority for each node to be different to all of the others. In the image above both stroomp01 and the new node, stroomp02, have been assigned equal priority - 1. We will change stroomp01 to have a different priority - 2. You should note that the node with the highest priority maintains the Master node status.\n.\n","categories":"","description":"Configuring Stroom cluster URLs\n","excerpt":"Configuring Stroom cluster URLs\n","ref":"/stroom-docs/hugo-docsy/docs/howtos/install/installnodeshowto/","tags":["cluster","installation"],"title":"Node Cluster URL Setup"},{"body":"Assumptions  the user has reasonable RHEL/Centos System administration skills installation is on a fully patched minimal Centos 7.3 instance. the application user stroomuser has been created the user is deploying for either the example two node Stroom cluster whose storage is described here a simple Forwarding or Standalone Proxy adding a node to an existing Stroom cluster  Set up the Stroom processing user’s environment To automate the running of a Stroom Proxy or Application service under out Stroom processing user, stroomuser, there are a number of configuration files and scripts we need to deploy.\nWe first become the stroomuser\nsudo -i -u stroomuser  Environment Variable files When either a Stroom Proxy or Application starts, it needs predefined environment variables. We set these up in the stroomuser home directory. We need two files for this. The first is for the Stroom processes themselves and the second is for the Stroom systemd service we deploy. The difference is that for the Stroom processes, we need to export the environment variables where as the Stroom systemd service file just needs to read them.\nThe JAVA_HOME and PATH variables are to support Java running the Tomcat instances. The STROOM_TMP variable is set to a working area for the Stroom Application to use. The application accesses this environment variable internally via the ${stroom_tmp} context variable. Note that we only need the STROOM_TMP variable for Stroom Application deployments, so one could remove it from the files for a Forwarding or Standalone proxy deployment.\nWith respect to the working area, we will make use of the Storage Scenario we have defined and hence use the directory /stroomdata/stroom-working-p_nn_ where nn is the hostname node number (i.e 00 for host stroomp00, 01 for host stroomp01, etc).\nSo, for the first node, 00, we run\nN=00 F=~/env.sh printf '# Environment variables for Stroom services\\n' \u003e ${F} printf 'export JAVA_HOME=/usr/lib/jvm/java-1.8.0\\n' \u003e\u003e ${F} printf 'export PATH=${JAVA_HOME}/bin:${PATH}\\n' \u003e\u003e ${F} printf 'export STROOM_TMP=/stroomdata/stroom-working-p%s\\n' ${N} \u003e\u003e ${F} chmod 640 ${F} F=~/env_service.sh printf '# Environment variables for Stroom services, executed out of systemd service\\n' \u003e ${F} printf 'JAVA_HOME=/usr/lib/jvm/java-1.8.0\\n' \u003e\u003e ${F} printf 'PATH=${JAVA_HOME}/bin:${PATH}\\n' \u003e\u003e ${F} printf 'STROOM_TMP=/stroomdata/stroom-working-p%s\\n' ${N} \u003e\u003e ${F} chmod 640 ${F}  then we can change the N variable on each successive node and run the above.\nAlternately, for a Stroom Forwarding or Standalone proxy, the following would be sufficient\nF=~/env.sh printf '# Environment variables for Stroom services\\n' \u003e ${F} printf 'export JAVA_HOME=/usr/lib/jvm/java-1.8.0\\n' \u003e\u003e ${F} printf 'export PATH=${JAVA_HOME}/bin:${PATH}\\n' \u003e\u003e ${F} chmod 640 ${F} F=~/env_service.sh printf '# Environment variables for Stroom services, executed out of systemd service\\n' \u003e ${F} printf 'JAVA_HOME=/usr/lib/jvm/java-1.8.0\\n' \u003e\u003e ${F} printf 'PATH=${JAVA_HOME}/bin:${PATH}\\n' \u003e\u003e ${F} chmod 640 ${F}  And we integrate the environment into our bash instantiation script as well as setting up useful bash functions. This is the same for all nodes. Note that the T and Tp aliases are always installed whether they are of use of not. IE a Standalone or Forwarding Stroom Proxy could make no use of the T shell alias.\nF=~/.bashrc printf '. ~/env.sh\\n\\n' \u003e\u003e ${F} printf '# Simple functions to support Stroom\\n' \u003e\u003e ${F} printf '# T - continually monitor (tail) the Stroom application log\\n' \u003e\u003e ${F} printf '# Tp - continually monitor (tail) the Stroom proxy log\\n' \u003e\u003e ${F} printf 'function T {\\n tail --follow=name ~/stroom-app/instance/logs/stroom.log\\n}\\n' \u003e\u003e ${F} printf 'function Tp {\\n tail --follow=name ~/stroom-proxy/instance/logs/stroom.log\\n}\\n' \u003e\u003e ${F}  And test it has set up correctly\n. ./.bashrc which java  which should return /usr/lib/jvm/java-1.8.0/bin/java\nEstablish Simple Start/Stop Scripts We create some simple start/stop scripts that start, or stop, all the available Stroom services. At this point, it’s just the Stroom application and proxy.\nif [ ! -d ~/bin ]; then mkdir ~/bin; fi F=~/bin/StartServices.sh printf '#!/bin/bash\\n' \u003e ${F} printf '# Start all Stroom services\\n' \u003e\u003e ${F} printf '# Set list of services\\n' \u003e\u003e ${F} printf 'Services=\"stroom-proxy stroom-app\"\\n' \u003e\u003e ${F} printf 'for service in ${Services}; do\\n' \u003e\u003e ${F} printf ' if [ -f ${service}/bin/start.sh ]; then\\n' \u003e\u003e ${F} printf ' bash ${service}/bin/start.sh\\n' \u003e\u003e ${F} printf ' fi\\n' \u003e\u003e ${F} printf 'done\\n' \u003e\u003e ${F} chmod 750 ${F} F=~/bin/StopServices.sh printf '#!/bin/bash\\n' \u003e ${F} printf '# Stop all Stroom services\\n' \u003e\u003e ${F} printf '# Set list of services\\n' \u003e\u003e ${F} printf 'Services=\"stroom-proxy stroom-app\"\\n' \u003e\u003e ${F} printf 'for service in ${Services}; do\\n' \u003e\u003e ${F} printf ' if [ -f ${service}/bin/stop.sh ]; then\\n' \u003e\u003e ${F} printf ' bash ${service}/bin/stop.sh\\n' \u003e\u003e ${F} printf ' fi\\n' \u003e\u003e ${F} printf 'done\\n' \u003e\u003e ${F} chmod 750 ${F}  Although one can modify the above for Stroom Forwarding or Standalone Proxy deployments, there is no issue if you use the same scripts.\nEstablish and Deploy Systemd services Processing or Proxy node For a standard Stroom Processing or Proxy nodes, we can use the following service script. (Noting this is done as root)\nsudo bash F=/etc/systemd/system/stroom-services.service printf '# Install in /etc/systemd/system\\n' \u003e ${F} printf '# Enable via systemctl enable stroom-services.service\\n\\n' \u003e\u003e ${F} printf '[Unit]\\n' \u003e\u003e ${F} printf '# Who we are\\n' \u003e\u003e ${F} printf 'Description=Stroom Service\\n' \u003e\u003e ${F} printf '# We want the network and httpd up before us\\n' \u003e\u003e ${F} printf 'Requires=network-online.target httpd.service\\n' \u003e\u003e ${F} printf 'After= httpd.service network-online.target\\n\\n' \u003e\u003e ${F} printf '[Service]\\n' \u003e\u003e ${F} printf '# Source our environment file so the Stroom service start/stop scripts work\\n' \u003e\u003e ${F} printf 'EnvironmentFile=/home/stroomuser/env_service.sh\\n' \u003e\u003e ${F} printf 'Type=oneshot\\n' \u003e\u003e ${F} printf 'ExecStart=/bin/su --login stroomuser /home/stroomuser/bin/StartServices.sh\\n' \u003e\u003e ${F} printf 'ExecStop=/bin/su --login stroomuser /home/stroomuser/bin/StopServices.sh\\n' \u003e\u003e ${F} printf 'RemainAfterExit=yes\\n\\n' \u003e\u003e ${F} printf '[Install]\\n' \u003e\u003e ${F} printf 'WantedBy=multi-user.target\\n' \u003e\u003e ${F} chmod 640 ${F}  Single Node Scenario with local database Should you only have a deployment where the database is on a processing node, use the following service script. The only difference is the Stroom dependency on the database. The database dependency below is for the MariaDB database. If you had installed the MySQL Community database, then replace mariadb.service with mysqld.service. (Noting this is done as root)\nsudo bash F=/etc/systemd/system/stroom-services.service printf '# Install in /etc/systemd/system\\n' \u003e ${F} printf '# Enable via systemctl enable stroom-services.service\\n\\n' \u003e\u003e ${F} printf '[Unit]\\n' \u003e\u003e ${F} printf '# Who we are\\n' \u003e\u003e ${F} printf 'Description=Stroom Service\\n' \u003e\u003e ${F} printf '# We want the network, httpd and Database up before us\\n' \u003e\u003e ${F} printf 'Requires=network-online.target httpd.service mariadb.service\\n' \u003e\u003e ${F} printf 'After=mariadb.service httpd.service network-online.target\\n\\n' \u003e\u003e ${F} printf '[Service]\\n' \u003e\u003e ${F} printf '# Source our environment file so the Stroom service start/stop scripts work\\n' \u003e\u003e ${F} printf 'EnvironmentFile=/home/stroomuser/env_service.sh\\n' \u003e\u003e ${F} printf 'Type=oneshot\\n' \u003e\u003e ${F} printf 'ExecStart=/bin/su --login stroomuser /home/stroomuser/bin/StartServices.sh\\n' \u003e\u003e ${F} printf 'ExecStop=/bin/su --login stroomuser /home/stroomuser/bin/StopServices.sh\\n' \u003e\u003e ${F} printf 'RemainAfterExit=yes\\n\\n' \u003e\u003e ${F} printf '[Install]\\n' \u003e\u003e ${F} printf 'WantedBy=multi-user.target\\n' \u003e\u003e ${F} chmod 640 ${F}  Enable the service Now we enable the Stroom service, but we DO NOT start it as we will manually start the Stroom services as part of the installation process.\nsystemctl enable stroom-services.service  ","categories":"","description":"This HOWTO demonstrates how to set up various files and scripts that the Stroom processing user requires.\n","excerpt":"This HOWTO demonstrates how to set up various files and scripts that …","ref":"/stroom-docs/hugo-docsy/docs/howtos/install/installprocessingusersetuphowto/","tags":["installation"],"title":"Processing User setup"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/proxy/","tags":"","title":"proxy"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/docs/howtos/referencefeeds/","tags":["reference-data"],"title":"Reference Feeds"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/reference-data/","tags":"","title":"reference-data"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/docs/howtos/search/","tags":["search"],"title":"Search"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/search/","tags":"","title":"search"},{"body":"Stroom v6 introduced an API that allows a user to perform queries against Stroom resources such as indices and statistics. This is a guide to show how to perform a Stroom Query directly from bash using Stroom v7.\n  Create an API Key for yourself, this will allow the API to authenticate as you and run the query with your privileges.\n  Create a Dashboard that extracts the data you are interested in. You should create a Query and Table.\n  Download the JSON for your Query. Press the download icon in the Query Pane to generate a file containing the JSON. Save the JSON to a file named query.json.\n  Use curl to send the query to Stroom.\n  API_KEY='\u003cput your API Key here' URI=stroom.host/api/searchable/v2/search curl -s --request POST ${URL} -o response.out -H \"Authorization:Bearer ${API_KEY}\" -H \"Content-Type: application/json\" --data-binary @query.json   The query response should be in a file named response.out. Optional step: reformat the response to csv using jq.  cat response.out | jq '.results[0].rows[].values | @csv'  ","categories":"","description":"How to search Stroom via its API.\n","excerpt":"How to search Stroom via its API.\n","ref":"/stroom-docs/hugo-docsy/docs/howtos/search/searchfrombash/","tags":"","title":"Search API"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/solr/","tags":"","title":"solr"},{"body":"This document will show how to use Solr from within Stroom. A single Solr node will be used running in a docker container.\nAssumptions  You are familiar with Lucene indexing within Stroom You have some data to index  Points to note  A Solr core is the home for exactly one Stroom index. Cores must initially be created in Solr. It is good practice to name your Solr core the same as your Stroom Index.  Method  Start a docker container for a single solr node.  docker run -d -p 8983:8983 --name my_solr solr   Check your Solr node. Point your browser at http://yourSolrHost:8983 Create a core in Solr using the CLI.  docker exec -it my_solr solr create_core -c test_index   Create a SolrIndex in Stroom  Update settings for your new Solr Index in Stroom then press “Test Connection”. If successful then press Save Note the “Solr URL” field is a reference to the newly created Solr core.  Add some Index fields. e.g.EventTime, UserId Retention is different in Solr, you must specify an expression that matches data that can be deleted.  Your Solr Index can now be used as per a Stroom Lucene Index. However, your Indexing pipeline must use a SolrIndexingFilter instead of an IndexingFilter.  ","categories":"","description":"How to integrate Stroom with Solr.\n","excerpt":"How to integrate Stroom with Solr.\n","ref":"/stroom-docs/hugo-docsy/docs/howtos/search/solr/","tags":["search","solr"],"title":"Solr integration"},{"body":"Assumptions The following assumptions are used in this document.\n the user has reasonable RHEL/Centos System administration skills installations are on Centos 7.3 minimal systems (fully patched) either a Stroom Proxy or Stroom Application has already been deployed processing node names are ‘stroomp00.strmdev00.org’ and ‘stroomp01.strmdev00.org’ the first node, ‘stroomp00.strmdev00.org’ also has a CNAME ‘stroomp.strmdev00.org’ in the scenario of a Stroom Forwarding Proxy, the node name is ‘stroomfp0.strmdev00.org’ in the scenario of a Stroom Standalone Proxy, the node name is ‘stroomsap0.strmdev00.org’ stroom runs as user ‘stroomuser’ the use of self signed certificates is appropriate for test systems, but users should consider appropriate CA infrastructure in production environments in this document, when a screen capture is documented, data entry is identified by the data surrounded by ‘\u003c’ ‘\u003e’ . This excludes enter/return presses.  Create certificates The first step is to establish a self signed certificate for our Stroom service. If you have a certificate server, then certainly gain an appropriately signed certificate. For this HOWTO, we will stay with a self signed solution and hence no certificate authorities are involved. If you are deploying a cluster, then you will only have one certificate for all nodes. We achieve this by setting up an alias for the first node in the cluster and then use that alias for addressing the cluster. That is, we have set up a CNAME, stroomp.strmdev00.org for stroomp00.strmdev00.org. This means within the web service we deploy, the ServerName will be stroomp.strmdev00.org on each node. Since it’s one certificate we only need to set it up on one node then deploy the certificate key files to other nodes.\nAs the certificates will be stored in the stroomuser's home directory, we become the stroom user\nsudo -i -u stroomuser  Use host variable To make things simpler in the following bash extracts, we establish the bash variable H to be used in filename generation. The variable name is set to the name of the host (or cluster alias) your are deploying the certificates on. In our multi node HOWTO example we are using, we would use the host CNAME stroomp. Thus we execute\nexport H=stroomp  Note in our the Stroom Forwarding Proxy HOWTO we would use the name stroomfp0. In the case of our Standalone Proxy we would use stroomsap0.\nWe set up a directory to house our certificates via\ncd ~stroomuser rm -rf stroom-jks mkdir -p stroom-jks stroom-jks/public stroom-jks/private cd stroom-jks  Create a server key for Stroom service (enter a password when prompted for both initial and verification prompts)\nopenssl genrsa -des3 -out private/$H.key 2048  as per\nGenerating RSA private key, 2048 bit long modulus .................................................................+++ ...............................................+++ e is 65537 (0x10001) Enter pass phrase for private/stroomp.key: \u003c__ENTER_SERVER_KEY_PASSWORD__\u003e Verifying - Enter pass phrase for private/stroomp.key: \u003c__ENTER_SERVER_KEY_PASSWORD__\u003e  Create a signing request. The two important prompts are the password and Common Name. All the rest can use the defaults offered. The requested password is for the server key and you should use the host (or cluster alias) your are deploying the certificates on for the Common Name. In the output below we will assume a multi node cluster certificate is being generated, so will use stroomp.strmdev00.org.\nopenssl req -sha256 -new -key private/$H.key -out $H.csr  as per\nEnter pass phrase for private/stroomp.key: \u003c__ENTER_SERVER_KEY_PASSWORD__\u003e You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [XX]: State or Province Name (full name) []: Locality Name (eg, city) [Default City]: Organization Name (eg, company) [Default Company Ltd]: Organizational Unit Name (eg, section) []: Common Name (eg, your name or your server's hostname) []:\u003c__ stroomp.strmdev00.org __\u003e Email Address []: Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []:  We now self sign the certificate (again enter the server key password)\nopenssl x509 -req -sha256 -days 720 -in $H.csr -signkey private/$H.key -out public/$H.crt  as per\nSignature ok subject=/C=XX/L=Default City/O=Default Company Ltd/CN=stroomp.strmdev00.org Getting Private key Enter pass phrase for private/stroomp.key: \u003c__ENTER_SERVER_KEY_PASSWORD__\u003e  and noting the subject will change depending on the host name used when generating the signing request.\nCreate insecure version of private key for Apache autoboot (you will again need to enter the server key password)\nopenssl rsa -in private/$H.key -out private/$H.key.insecure  as per\nEnter pass phrase for private/stroomp.key: \u003c__ENTER_SERVER_KEY_PASSWORD__\u003e writing RSA key  and then move the insecure keys as appropriate\nmv private/$H.key private/$H.key.secure chmod 600 private/$H.key.secure mv private/$H.key.insecure private/$H.key  We have now completed the creation of our certificates and keys.\nReplication of Keys Directory to other nodes If you are deploying a multi node Stroom cluster, then you would replicate the directory ~stroomuser/stroom-jks to each node in the cluster. That is, tar it up, copy the tar file to the other node(s) then untar it. We can make use of the other node’s mounted file system for this process. That is one could execute the commands on the first node, where we created the certificates\ncd ~stroomuser tar cf stroom-jks.tar stroom-jks mv stroom-jks.tar /stroomdata/stroom-data-p01  then on the another node, say stroomp01.strmdev00.org, as the stroomuser we extract the data.\nsudo -i -u stroomuser cd ~stroomuser tar xf /stroomdata/stroom-data-p01/stroom-jks.tar \u0026\u0026 rm -f /stroomdata/stroom-data-p01/stroom-jks.tar  Protection, Ownership and SELinux Context Now ensure protection, ownership and SELinux context for these key files on ALL nodes via\nchmod 700 ~stroomuser/stroom-jks/private ~stroomuser/stroom-jks chown -R stroomuser:stroomuser ~stroomuser/stroom-jks chcon -R --reference /etc/pki ~stroomuser/stroom-jks  Stroom Proxy to Proxy Key and Trust Stores In order for a Stroom Forwarding Proxy to communicate to a central Stroom proxy over https, the JVM running the forwarding proxy needs relevant keystores set up.\nOne would set up a Stroom’s forwarding proxy SSL certificate as per above, with the change that the hostname would be different. That is, in the initial setup, we would set the hostname variable H to be the hostname of the forwarding proxy. Lets say it is stroomfp0 thus we would set\nexport H=stroomfp0  and then proceed as above.\nNote that you also need the public key of the central Stroom server you will be connecting to. For the following, we will assume the central Stroom proxy is the stroomp.strmdev00.org server and it’s public key is stored in the file stroomp.crt. We will store this file on the forwarding proxy in ~stroomuser/stroom-jks/public/stroomp.crt.\nSo once you have created the forwarding proxy server’s SSL keys and have deployed the central proxy’s public key, we next need to convert the proxy server’s SSL keys into DER format. This is done by executing the following.\ncd ~stroomuser/stroom-jks export H=stroomfp0 export S=stroomp rm -f ${H}_k.jks ${S}_t.jks H_k=${H} S_k=${S} # Convert public key openssl x509 -in public/$H.crt -inform PERM -out public/$H.crt.der -outform DER  When you convert the local server’s private key, you will be prompted for the server key password.\n# Convert the local server's Private key openssl pkcs8 -topk8 -nocrypt -in private/$H.key.secure -inform PEM -out private/$H.key.der -outform DER  as per\nEnter pass phrase for private/stroomfp0.key.secure: \u003c__ENTER_SERVER_KEY_PASSWORD__\u003e  We now import these keys into our Key Store. As part of the Stroom Proxy release, an Import Keystore application has been provisioned. We identify where it’s found with the command\nfind ~stroomuser/*proxy -name 'stroom*util*.jar' -print | head -1  which should return /home/stroomuser/stroom-proxy/lib/stroom-proxy-util-v5.1-beta.10.jar or similar depending on the release version. To make execution simpler, we set this as a shell variable as per\nStroom_UTIL_JAR=`find ~/*proxy -name 'stroom*util*.jar' -print | head -1`  We now create the keystore and import the proxy’s server key\njava -cp ${Stroom_UTIL_JAR} stroom.util.cert.ImportKey keystore=${H}_k.jks keypass=$H alias=$H keyfile=private/$H.key.der certfile=public/$H.crt.der  as per\nOne certificate, no chain  We now import the destination server’s public key\nkeytool -import -noprompt -alias ${S} -file public/${S}.crt -keystore ${S}_k.jks -storepass ${S}  as per\nCertificate was added to keystore  We now add the key and trust store location and password arguments to our Stroom proxy environment files.\nPWD=`pwd` echo \"export JAVA_OPTS=\\\"-Djavax.net.ssl.trustStore=${PWD}/${S}_k.jks -Djavax.net.ssl.trustStorePassword=${S} -Djavax.net.ssl.keyStore=${PWD}/${H}_k.jks -Djavax.net.ssl.keyStorePassword=${H}\\\"\" \u003e\u003e ~/env.sh echo \"JAVA_OPTS=\\\"-Djavax.net.ssl.trustStore=${PWD}/${S}_k.jks -Djavax.net.ssl.trustStorePassword=${S} -Djavax.net.ssl.keyStore=${PWD}/${H}_k.jks -Djavax.net.ssl.keyStorePassword=${H}\\\"\" \u003e\u003e ~/env_service.sh  At this point you should restart the proxy service. Using the commands\ncd ~stroomuser source ./env.sh stroom-proxy/bin/stop.sh stroom-proxy/bin/start.sh  then check the logs to ensure it started correctly.\n","categories":"","description":"A HOWTO to assist users in setting up various SSL Certificates to support a Web interface to Stroom.\n","excerpt":"A HOWTO to assist users in setting up various SSL Certificates to …","ref":"/stroom-docs/hugo-docsy/docs/howtos/install/installcertificateshowto/","tags":["certificates","installation"],"title":"SSL Certificate Generation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/testing/","tags":"","title":"testing"},{"body":"Assumptions  Stroom Single or Multi Node Cluster Testing the Multi Node Stroom Cluster (Proxy and Application) has been deployed a Test Feed, TEST-FEED-V1_0 has been added Proxy aggregation has been turned off on all Stroom Store Proxies the Stroom Proxy Repository Format (REPO_FORMAT) chosen was the default - ${pathId}/${id Stroom Forwarding Proxy Testing the Multi Node Stroom Cluster (Proxy and Application) has been deployed the Stroom Forwarding Proxy has been deployed a Test Feed, TEST-FEED-V1_0 has been added the Stroom Proxy Repository Format (REPO_FORMAT) chosen was the default - ${pathId}/${id Stroom Standalone Proxy Testing the Stroom Standalone Proxy has been deployed the Stroom Proxy Repository Format (REPO_FORMAT) chosen was the default - ${pathId}/${id  Stroom Single or Multi Node Cluster Testing Data Post Tests Simple Post tests These tests are to ensure the Stroom Store proxy and it’s connection to the database is working along with the Apache mod_jk loadbalancer. We will send a file to the load balanced stroomp.strmdev00.org node (really stroomp00.strmdev00.org) and each time we send the file, it’s receipt should be managed by alternate proxy nodes. As a number of elements can effect load balancing, it is not always guaranteed to alternate every time but for the most part it will.\nPerform the following\n Log onto the Stroom database node (stroomdb0.strmdev00.org) as any user. Log onto both Stroom nodes and become the stroomuser and monitor each node’s Stroom proxy service using the Tp bash macro. That is, on each node, run  sudo -i -u stroomuser Tp  You will note events of the form from stroomp00.strmdev00.org:\n... 2017-01-14T06:22:26.672Z INFO [ProxyProperties refresh thread 0] datafeed.ProxyHandlerFactory$1 (ProxyHandlerFactory.java:96) - refreshThread() - Started 2017-01-14T06:30:00.993Z INFO [Repository Reader Thread 1] handler.ProxyRepositoryReader (ProxyRepositoryReader.java:143) - run() - Cron Match at 2017-01-14T06:30:00.993Z 2017-01-14T06:40:00.245Z INFO [Repository Reader Thread 1] handler.ProxyRepositoryReader (ProxyRepositoryReader.java:143) - run() - Cron Match at 2017-01-14T06:40:00.245Z  and from stroomp01.strmdev00.org:\n... 2017-01-14T06:22:26.828Z INFO [ProxyProperties refresh thread 0] datafeed.ProxyHandlerFactory$1 (ProxyHandlerFactory.java:96) - refreshThread() - Started 2017-01-14T06:30:00.066Z INFO [Repository Reader Thread 1] handler.ProxyRepositoryReader (ProxyRepositoryReader.java:143) - run() - Cron Match at 2017-01-14T06:30:00.066Z 2017-01-14T06:40:00.318Z INFO [Repository Reader Thread 1] handler.ProxyRepositoryReader (ProxyRepositoryReader.java:143) - run() - Cron Match at 2017-01-14T06:40:00.318Z   On the Stroom database node, execute the command  curl -k --data-binary @/etc/group \"https://stroomp.strmdev00.org/stroom/datafeed\" -H \"Feed:TEST-FEED-V1_0\" -H \"System:EXAMPLE_SYSTEM\" -H \"Environment:EXAMPLE_ENVIRONMENT\"  If you are monitoring the proxy log of stroomp00.strmdev00.org you would see two new logs indicating the successful arrival of the file\n2017-01-14T06:46:06.411Z INFO [ajp-apr-9009-exec-1] handler.LogRequestHandler (LogRequestHandler.java:37) - log() - guid=54dc0da2-f35c-4dc2-8a98-448415ffc76b,feed=TEST-FEED-V1_0,system=EXAMPLE_SYSTEM,environment=EXAMPLE_ENVIRONMENT,remotehost=192.168.2.144,remoteaddress=192.168.2.144 2017-01-14T06:46:06.449Z INFO [ajp-apr-9009-exec-1] datafeed.DataFeedRequestHandler$1 (DataFeedRequestHandler.java:104) - \"doPost() - Took 571 ms to process (concurrentRequestCount=1) 200\",\"Environment=EXAMPLE_ENVIRONMENT\",\"Feed=TEST-FEED-V1_0\",\"GUID=54dc0da2-f35c-4dc2-8a98-448415ffc76b\",\"ReceivedTime=2017-01-14T06:46:05.883Z\",\"RemoteAddress=192.168.2.144\",\"RemoteHost=192.168.2.144\",\"System=EXAMPLE_SYSTEM\",\"accept=*/*\",\"content-length=527\",\"content-type=application/x-www-form-urlencoded\",\"host=stroomp.strmdev00.org\",\"user-agent=curl/7.29.0\"   On the Stroom database node, again execute the command  curl -k --data-binary @/etc/group \"https://stroomp.strmdev00.org/stroom/datafeed\" -H \"Feed:TEST-FEED-V1_0\" -H \"System:EXAMPLE_SYSTEM\" -H \"Environment:EXAMPLE_ENVIRONMENT\"  If you are monitoring the proxy log of stroomp01.strmdev00.org you should see a new log. As foreshadowed, we didn’t as the time delay resulted in the first node getting the file. That is stroomp00.strmdev00.org log file gained the two entries\n2017-01-14T06:47:26.642Z INFO [ajp-apr-9009-exec-2] handler.LogRequestHandler (LogRequestHandler.java:37) - log() - guid=941d2904-734f-4764-9ccf-4124b94a56f6,feed=TEST-FEED-V1_0,system=EXAMPLE_SYSTEM,environment=EXAMPLE_ENVIRONMENT,remotehost=192.168.2.144,remoteaddress=192.168.2.144 2017-01-14T06:47:26.645Z INFO [ajp-apr-9009-exec-2] datafeed.DataFeedRequestHandler$1 (DataFeedRequestHandler.java:104) - \"doPost() - Took 174 ms to process (concurrentRequestCount=1) 200\",\"Environment=EXAMPLE_ENVIRONMENT\",\"Feed=TEST-FEED-V1_0\",\"GUID=941d2904-734f-4764-9ccf-4124b94a56f6\",\"ReceivedTime=2017-01-14T06:47:26.470Z\",\"RemoteAddress=192.168.2.144\",\"RemoteHost=192.168.2.144\",\"System=EXAMPLE_SYSTEM\",\"accept=*/*\",\"content-length=527\",\"content-type=application/x-www-form-urlencoded\",\"host=stroomp.strmdev00.org\",\"user-agent=curl/7.29.0\"   Again on the database node, execute the command and this time we see that node stroomp01.strmdev00.org received the file as per  2017-01-14T06:47:30.782Z INFO [ajp-apr-9009-exec-1] handler.LogRequestHandler (LogRequestHandler.java:37) - log() - guid=2cef6e23-b0e6-4d75-8374-cca7caf66e15,feed=TEST-FEED-V1_0,system=EXAMPLE_SYSTEM,environment=EXAMPLE_ENVIRONMENT,remotehost=192.168.2.144,remoteaddress=192.168.2.144 2017-01-14T06:47:30.816Z INFO [ajp-apr-9009-exec-1] datafeed.DataFeedRequestHandler$1 (DataFeedRequestHandler.java:104) - \"doPost() - Took 593 ms to process (concurrentRequestCount=1) 200\",\"Environment=EXAMPLE_ENVIRONMENT\",\"Feed=TEST-FEED-V1_0\",\"GUID=2cef6e23-b0e6-4d75-8374-cca7caf66e15\",\"ReceivedTime=2017-01-14T06:47:30.238Z\",\"RemoteAddress=192.168.2.144\",\"RemoteHost=192.168.2.144\",\"System=EXAMPLE_SYSTEM\",\"accept=*/*\",\"content-length=527\",\"content-type=application/x-www-form-urlencoded\",\"host=stroomp.strmdev00.org\",\"user-agent=curl/7.29.0\"   Running the curl post command in quick succession shows the loadbalancer working … four executions result in seeing our pair of logs appearing on alternate proxies.  stroomp00:\n2017-01-14T06:52:09.815Z INFO [ajp-apr-9009-exec-3] handler.LogRequestHandler (LogRequestHandler.java:37) - log() - guid=bf0bc38c-3533-4d5c-9ddf-5d30c0302787,feed=TEST-FEED-V1_0,system=EXAMPLE_SYSTEM,environment=EXAMPLE_ENVIRONMENT,remotehost=192.168.2.144,remoteaddress=192.168.2.144 2017-01-14T06:52:09.817Z INFO [ajp-apr-9009-exec-3] datafeed.DataFeedRequestHandler$1 (DataFeedRequestHandler.java:104) - \"doPost() - Took 262 ms to process (concurrentRequestCount=1) 200\",\"Environment=EXAMPLE_ENVIRONMENT\",\"Feed=TEST-FEED-V1_0\",\"GUID=bf0bc38c-3533-4d5c-9ddf-5d30c0302787\",\"ReceivedTime=2017-01-14T06:52:09.555Z\",\"RemoteAddress=192.168.2.144\",\"RemoteHost=192.168.2.144\",\"System=EXAMPLE_SYSTEM\",\"accept=*/*\",\"content-length=527\",\"content-type=application/x-www-form-urlencoded\",\"host=stroomp.strmdev00.org\",\"user-agent=curl/7.29.0\"  stroomp01:\n2017-01-14T06:52:11.139Z INFO [ajp-apr-9009-exec-2] handler.LogRequestHandler (LogRequestHandler.java:37) - log() - guid=1088fdd8-6869-489f-8baf-948891363734,feed=TEST-FEED-V1_0,system=EXAMPLE_SYSTEM,environment=EXAMPLE_ENVIRONMENT,remotehost=192.168.2.144,remoteaddress=192.168.2.144 2017-01-14T06:52:11.150Z INFO [ajp-apr-9009-exec-2] datafeed.DataFeedRequestHandler$1 (DataFeedRequestHandler.java:104) - \"doPost() - Took 289 ms to process (concurrentRequestCount=1) 200\",\"Environment=EXAMPLE_ENVIRONMENT\",\"Feed=TEST-FEED-V1_0\",\"GUID=1088fdd8-6869-489f-8baf-948891363734\",\"ReceivedTime=2017-01-14T06:52:10.861Z\",\"RemoteAddress=192.168.2.144\",\"RemoteHost=192.168.2.144\",\"System=EXAMPLE_SYSTEM\",\"accept=*/*\",\"content-length=527\",\"content-type=application/x-www-form-urlencoded\",\"host=stroomp.strmdev00.org\",\"user-agent=curl/7.29.0\"  stroomp00:\n2017-01-14T06:52:12.284Z INFO [ajp-apr-9009-exec-4] handler.LogRequestHandler (LogRequestHandler.java:37) - log() - guid=def94a4a-cf78-4c4d-9261-343663f7f79a,feed=TEST-FEED-V1_0,system=EXAMPLE_SYSTEM,environment=EXAMPLE_ENVIRONMENT,remotehost=192.168.2.144,remoteaddress=192.168.2.144 2017-01-14T06:52:12.289Z INFO [ajp-apr-9009-exec-4] datafeed.DataFeedRequestHandler$1 (DataFeedRequestHandler.java:104) - \"doPost() - Took 5.0 ms to process (concurrentRequestCount=1) 200\",\"Environment=EXAMPLE_ENVIRONMENT\",\"Feed=TEST-FEED-V1_0\",\"GUID=def94a4a-cf78-4c4d-9261-343663f7f79a\",\"ReceivedTime=2017-01-14T06:52:12.284Z\",\"RemoteAddress=192.168.2.144\",\"RemoteHost=192.168.2.144\",\"System=EXAMPLE_SYSTEM\",\"accept=*/*\",\"content-length=527\",\"content-type=application/x-www-form-urlencoded\",\"host=stroomp.strmdev00.org\",\"user-agent=curl/7.29.0\"  stroomp01:\n2017-01-14T06:52:13.374Z INFO [ajp-apr-9009-exec-3] handler.LogRequestHandler (LogRequestHandler.java:37) - log() - guid=55dda4c9-2c76-43c8-9b48-dcdb3a1f459b,feed=TEST-FEED-V1_0,system=EXAMPLE_SYSTEM,environment=EXAMPLE_ENVIRONMENT,remotehost=192.168.2.144,remoteaddress=192.168.2.144 2017-01-14T06:52:13.378Z INFO [ajp-apr-9009-exec-3] datafeed.DataFeedRequestHandler$1 (DataFeedRequestHandler.java:104) - \"doPost() - Took 3.0 ms to process (concurrentRequestCount=1) 200\",\"Environment=EXAMPLE_ENVIRONMENT\",\"Feed=TEST-FEED-V1_0\",\"GUID=55dda4c9-2c76-43c8-9b48-dcdb3a1f459b\",\"ReceivedTime=2017-01-14T06:52:13.374Z\",\"RemoteAddress=192.168.2.144\",\"RemoteHost=192.168.2.144\",\"System=EXAMPLE_SYSTEM\",\"accept=*/*\",\"content-length=527\",\"content-type=application/x-www-form-urlencoded\",\"host=stroomp.strmdev00.org\",\"user-agent=curl/7.29.0\"  At this point we will see what the proxies have received.\n On each node run the command  ls -l /stroomdata/stroom-working*/proxy  On stroomp00 we see\n[stroomuser@stroomp00 ~]$ ls -l /stroomdata/stroom-working*/proxy total 16 -rw-rw-r--. 1 stroomuser stroomuser 785 Jan 14 17:46 001.zip -rw-rw-r--. 1 stroomuser stroomuser 783 Jan 14 17:47 002.zip -rw-rw-r--. 1 stroomuser stroomuser 784 Jan 14 17:52 003.zip -rw-rw-r--. 1 stroomuser stroomuser 783 Jan 14 17:52 004.zip [stroomuser@stroomp00 ~]$  and on stroomp01 we see\n[stroomuser@stroomp01 ~]$ ls -l /stroomdata/stroom-working*/proxy total 12 -rw-rw-r--. 1 stroomuser stroomuser 785 Jan 14 17:47 001.zip -rw-rw-r--. 1 stroomuser stroomuser 783 Jan 14 17:52 002.zip -rw-rw-r--. 1 stroomuser stroomuser 784 Jan 14 17:52 003.zip [stroomuser@stroomp01 ~]$  which corresponds to the seven posts of data and the associated events in the proxy logs. To see the contents of one of these files we execute on either node, the command\nunzip -c /stroomdata/stroom-working*/proxy/001.zip  to see\nArchive: /stroomdata/stroom-working-p00/proxy/001.zip inflating: 001.dat root:x:0: bin:x:1: daemon:x:2: sys:x:3: adm:x:4: tty:x:5: disk:x:6: lp:x:7: mem:x:8: kmem:x:9: wheel:x:10:burn cdrom:x:11: mail:x:12:postfix man:x:15: dialout:x:18: floppy:x:19: games:x:20: tape:x:30: video:x:39: ftp:x:50: lock:x:54: audio:x:63: nobody:x:99: users:x:100: utmp:x:22: utempter:x:35: input:x:999: systemd-journal:x:190: systemd-bus-proxy:x:998: systemd-network:x:192: dbus:x:81: polkitd:x:997: ssh_keys:x:996: dip:x:40: tss:x:59: sshd:x:74: postdrop:x:90: postfix:x:89: chrony:x:995: burn:x:1000:burn mysql:x:27: inflating: 001.meta content-type:application/x-www-form-urlencoded Environment:EXAMPLE_ENVIRONMENT Feed:TEST-FEED-V1_0 GUID:54dc0da2-f35c-4dc2-8a98-448415ffc76b host:stroomp.strmdev00.org ReceivedTime:2017-01-14T06:46:05.883Z RemoteAddress:192.168.2.144 RemoteHost:192.168.2.144 StreamSize:527 System:EXAMPLE_SYSTEM user-agent:curl/7.29.0 [stroomuser@stroomp00 ~]$  Checking the /etc/group file on stroomdb0.strmdev00.org confirms the above contents. For the present, ignore the metadata file present in the zip archive.\nIf you execute the same command on the other files, all that changes is the value of the ReceivedTime: attribute in the .meta file.\nFor those curious about the file size differences, this is a function of the compression process within the proxy. Using stroomp01’s files and extracting them manually and renaming them results in the six files\n[stroomuser@stroomp01 xx]$ ls -l total 24 -rw-rw-r--. 1 stroomuser stroomuser 527 Jan 14 17:47 A_001.dat -rw-rw-r--. 1 stroomuser stroomuser 321 Jan 14 17:47 A_001.meta -rw-rw-r--. 1 stroomuser stroomuser 527 Jan 14 17:52 B_001.dat -rw-rw-r--. 1 stroomuser stroomuser 321 Jan 14 17:52 B_001.meta -rw-rw-r--. 1 stroomuser stroomuser 527 Jan 14 17:52 C_001.dat -rw-rw-r--. 1 stroomuser stroomuser 321 Jan 14 17:52 C_001.meta [stroomuser@stroomp01 xx]$ cmp A_001.dat B_001.dat [stroomuser@stroomp01 xx]$ cmp B_001.dat C_001.dat [stroomuser@stroomp01 xx]$  We have effectively tested the receipt of our data and the load balancing of the Apache mod_jk installation.\nSimple Direct Post tests In this test we will use the direct feed interface of the Stroom application, rather than sending data via the proxy. One would normally use this interface for time sensitive data which shouldn’t aggregate in a proxy waiting for the Stroom application to collect it. In this situation we use the command\ncurl -k --data-binary @/etc/group \"https://stroomp.strmdev00.org/stroom/datafeed/direct\" -H \"Feed:TEST-FEED-V1_0\" -H \"System:EXAMPLE_SYSTEM\" -H \"Environment:EXAMPLE_ENVIRONMENT\"  To prepare for this test, we monitor the Stroom application log using the T bash alias on each node. So on each node run the command\nsudo -i -u stroomuser T  On each node you should see LifecyleTask events, for example,\n2017-01-14T07:42:08.281Z INFO [Stroom P2 #7 - LifecycleTask] spring.StroomBeanMethodExecutable (StroomBeanMethodExecutable.java:47) - Executing nodeStatusExecutor.exec 2017-01-14T07:42:18.284Z INFO [Stroom P2 #2 - LifecycleTask] spring.StroomBeanMethodExecutable (StroomBeanMethodExecutable.java:47) - Executing SQLStatisticEventStore.evict 2017-01-14T07:42:18.284Z INFO [Stroom P2 #10 - LifecycleTask] spring.StroomBeanMethodExecutable (StroomBeanMethodExecutable.java:47) - Executing activeQueriesManager.evictExpiredElements 2017-01-14T07:42:18.285Z INFO [Stroom P2 #7 - LifecycleTask] spring.StroomBeanMethodExecutable (StroomBeanMethodExecutable.java:47) - Executing distributedTaskFetcher.execute  To perform the test, on the database node, run the posting command a number of times in rapid succession. This will result in server.DataFeedServiceImpl events in both log files. The Stroom application log is quite busy, you may have to look for these logs.\nIn the following we needed to execute the posting command three times before seeing the data arrive on both nodes. Looking at the arrival times, the file turned up on the second node twice before appearing on the first node. strooomp00:\n2017-01-14T07:43:09.394Z INFO [ajp-apr-8009-exec-6] server.DataFeedServiceImpl (DataFeedServiceImpl.java:133) - handleRequest response 200 - 0 - OK  and on stroomp01:\n2017-01-14T07:43:05.614Z INFO [ajp-apr-8009-exec-1] server.DataFeedServiceImpl (DataFeedServiceImpl.java:133) - handleRequest response 200 - 0 - OK 2017-01-14T07:43:06.821Z INFO [ajp-apr-8009-exec-2] server.DataFeedServiceImpl (DataFeedServiceImpl.java:133) - handleRequest response 200 - 0 - OK  To confirm this data arrived, we need to view the Data pane of our TEST-FEED-V1_0 tab. To do this, log onto the Stroom UI then move the cursor to the TEST-FEED-V1_0 entry in the Explorer tab and select the item with a left click\nand double click on the entry to see our TEST-FEED-V1_0 tab.\nand it is noted that we are viewing the Feed’s attributes as we can see the Setting hyper-link highlighted. As we want to see the Data we have received for this feed, move the cursor to the Data hyper-link and select it to see .\nThese three entries correspond to the three posts we performed.\nWe have successfully tested direct posting to a Stroom feed and that the Apache mod_jk loadbalancer also works for this posting method.\nTest Proxy Aggregation is Working To test that the Proxy Aggregation is working, we need to enable on each node.\nBy enabling the Proxy Aggregation process, both nodes immediately performed the task as indicated by each node’s Stroom application logs as per stroomp00:\n2017-01-14T07:58:58.752Z INFO [Stroom P2 #3 - LifecycleTask] server.ProxyAggregationExecutor (ProxyAggregationExecutor.java:138) - exec() - started 2017-01-14T07:58:58.937Z INFO [Stroom P2 #2 - GenericServerTask] server.ProxyAggregationExecutor$2 (ProxyAggregationExecutor.java:203) - processFeedF iles() - Started TEST-FEED-V1_0 (4 Files) 2017-01-14T07:58:59.045Z INFO [Stroom P2 #2 - GenericServerTask] server.ProxyAggregationExecutor$2 (ProxyAggregationExecutor.java:265) - processFeedF iles() - Completed TEST-FEED-V1_0 in 108 ms 2017-01-14T07:58:59.101Z INFO [Stroom P2 #3 - LifecycleTask] server.ProxyAggregationExecutor (ProxyAggregationExecutor.java:152) - exec() - completed in 349 ms  and stroomp01:\n2017-01-14T07:59:16.687Z INFO [Stroom P2 #10 - LifecycleTask] server.ProxyAggregationExecutor (ProxyAggregationExecutor.java:138) - exec() - started 2017-01-14T07:59:16.799Z INFO [Stroom P2 #5 - GenericServerTask] server.ProxyAggregationExecutor$2 (ProxyAggregationExecutor.java:203) - processFeedF iles() - Started TEST-FEED-V1_0 (3 Files) 2017-01-14T07:59:16.909Z INFO [Stroom P2 #5 - GenericServerTask] server.ProxyAggregationExecutor$2 (ProxyAggregationExecutor.java:265) - processFeedF iles() - Completed TEST-FEED-V1_0 in 110 ms 2017-01-14T07:59:16.997Z INFO [Stroom P2 #10 - LifecycleTask] server.ProxyAggregationExecutor (ProxyAggregationExecutor.java:152) - exec() - complete d in 310 ms  And on refreshing the top pane of the TEST-FEED-V1_0 tab we see that two more batches of data have arrived.\n.\nThis demonstrates that Proxy Aggregation is working.\nStroom Forwarding Proxy Testing Data Post Tests Simple Post tests This test is to ensure the Stroom Forwarding proxy and it’s connection to the central Stroom Processing system is working.\nWe will send a file to our Forwarding proxy (stroomfp0.strmdev00.org) and monitor this nodes' proxy log files as well as all the destination nodes proxy log files. The reason for monitoring all the destination system’s proxy log files is that the destination system is probably load balancing and hence the forwarded file may turn up on any of the destination nodes.\nPerform the following\n Log onto any host where you will perform the curl post Monitor all proxy log files Log onto the Forwarding Proxy node and become the stroomuser and monitor the Stroom proxy service using the Tp bash macro. Log onto the destination Stroom nodes and become the stroomuser and monitor each node’s Stroom proxy service using the Tp bash macro. That is, on each node, run  sudo -i -u stroomuser Tp   On the ‘posting’ node, run the command  curl -k --data-binary @/etc/group \"https://stroomfp0.strmdev00.org/stroom/datafeed\" -H \"Feed:TEST-FEED-V1_0\" -H \"System:EXAMPLE_SYSTEM\" -H \"Environment:EXAMPLE_ENVIRONMENT\"  In the Stroom Forwarding proxy log, ~/stroom-proxy/instance/logs/stroom.log, you will see the arrival of the file as per the datafeed.DataFeedRequestHandler$1 event running under, in this case, the ajp-apr-9009-exec-1 thread.\n... 2017-01-01T23:17:00.240Z INFO [Repository Reader Thread 1] handler.ProxyRepositoryReader (ProxyRepositoryReader.java:143) - run() - Cron Match at 2017-01-01T23:17:00.240Z 2017-01-01T23:18:00.275Z INFO [Repository Reader Thread 1] handler.ProxyRepositoryReader (ProxyRepositoryReader.java:143) - run() - Cron Match at 2017-01-01T23:18:00.275Z 2017-01-01T23:18:12.367Z INFO [ajp-apr-9009-exec-1] datafeed.DataFeedRequestHandler$1 (DataFeedRequestHandler.java:104) - \"doPost() - Took 782 ms to process (concurrentRequestCount=1) 200\",\"Environment=EXAMPLE_ENVIRONMENT\",\"Expect=100-continue\",\"Feed=TEST-FEED-V1_0\",\"GUID=9601198e-98db-4cae-8b71-9404722ef1f9\",\"ReceivedTime=2017-01-01T23:18:11.588Z\",\"RemoteAddress=192.168.2.220\",\"RemoteHost=192.168.2.220\",\"System=EXAMPLE_SYSTEM\",\"accept=*/*\",\"content-length=1051\",\"content-type=application/x-www-form-urlencoded\",\"host=stroomfp0.strmdev00.org\",\"user-agent=curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2\"  And then at the next periodic interval (60 second intervals) this file will be forwarded to the main stroom proxy server stroomp.strmdev00.org as shown by the handler.ForwardRequestHandler events running under the pool-10-thread-2 thread.\n2017-01-01T23:19:00.304Z INFO [Repository Reader Thread 1] handler.ProxyRepositoryReader (ProxyRepositoryReader.java:143) - run() - Cron Match at 2017-01-01T23:19:00.304Z 2017-01-01T23:19:00.586Z INFO [pool-10-thread-2] handler.ForwardRequestHandler (ForwardRequestHandler.java:109) - handleHeader() - https://stroomp00.strmdev00.org/stroom/datafeed Sending request {ReceivedPath=stroomfp0.strmdev00.org, Feed=TEST-FEED-V1_0, Compression=ZIP} 2017-01-01T23:19:00.990Z INFO [pool-10-thread-2] handler.ForwardRequestHandler (ForwardRequestHandler.java:89) - handleFooter() - b5722ead-714b-411b-a09f-901fb8b20389 took 403 ms to forward 1.4 kB response 200 - {ReceivedPath=stroomfp0.strmdev00.org, Feed=TEST-FEED-V1_0, GUID=b5722ead-714b-411b-a09f-901fb8b20389, Compression=ZIP} 2017-01-01T23:20:00.064Z INFO [Repository Reader Thread 1] handler.ProxyRepositoryReader (ProxyRepositoryReader.java:143) - run() - Cron Match at 2017-01-01T23:20:00.064Z ...  On one of the central processing nodes, when the file is send by the Forwarding Proxy, you will see the file’s arrival as per the datafeed.DataFeedRequestHandler$1 event in the ajp-apr-9009-exec-3 thread.\n... 2017-01-01T23:00:00.236Z INFO [Repository Reader Thread 1] handler.ProxyRepositoryReader (ProxyRepositoryReader.java:143) - run() - Cron Match at 2017-01-01T23:00:00.236Z 2017-01-01T23:10:00.473Z INFO [Repository Reader Thread 1] handler.ProxyRepositoryReader (ProxyRepositoryReader.java:143) - run() - Cron Match at 2017-01-01T23:10:00.473Z 2017-01-01T23:19:00.787Z INFO [ajp-apr-9009-exec-3] handler.LogRequestHandler (LogRequestHandler.java:37) - log() - guid=b5722ead-714b-411b-a09f-901fb8b20389,feed=TEST-FEED-V1_0,system=null,environment=null,remotehost=null,remoteaddress=null 2017-01-01T23:19:00.981Z INFO [ajp-apr-9009-exec-3] datafeed.DataFeedRequestHandler$1 (DataFeedRequestHandler.java:104) - \"doPost() - Took 196 ms to process (concurrentRequestCount=1) 200\",\"Cache-Control=no-cache\",\"Compression=ZIP\",\"Feed=TEST-FEED-V1_0\",\"GUID=b5722ead-714b-411b-a09f-901fb8b20389\",\"ReceivedPath=stroomfp0.strmdev00.org\",\"Transfer-Encoding=chunked\",\"accept=text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\",\"connection=keep-alive\",\"content-type=application/audit\",\"host=stroomp00.strmdev00.org\",\"pragma=no-cache\",\"user-agent=Java/1.8.0_111\" 2017-01-01T23:20:00.771Z INFO [Repository Reader Thread 1] handler.ProxyRepositoryReader (ProxyRepositoryReader.java:143) - run() - Cron Match at 2017-01-01T23:20:00.771Z ...  Stroom Standalone Proxy Testing Data Post Tests Simple Post tests This test is to ensure the Stroom Store NODB or Standalone proxy is working.\nWe will send a file to our Standalone proxy (stroomsap0.strmdev00.org) and monitor this nodes' proxy log files as well the directory the received files are meant to be stored in.\nPerform the following\n Log onto any host where you will perform the curl post Log onto the Standalone Proxy node and become the stroomuser and monitor the Stroom proxy service using the Tp bash macro. That is run  sudo -i -u stroomuser Tp   On the ‘posting’ node, run the command  curl -k --data-binary @/etc/group \"https://stroomsap0.strmdev00.org/stroom/datafeed\" -H \"Feed:TEST-FEED-V1_0\" -H \"System:EXAMPLE_SYSTEM\" -H \"Environment:EXAMPLE_ENVIRONMENT\"  In the stroom proxy log, ~/stroom-proxy/instance/logs/stroom.log, you will see the arrival of the file via both the handler.LogRequestHandler and datafeed.DataFeedRequestHandler$1 events running under, in this case, the ajp-apr-9009-exec-1 thread.\n... 2017-01-02T02:10:00.325Z INFO [Repository Reader Thread 1] handler.ProxyRepositoryReader (ProxyRepositoryReader.java:143) - run() - Cron Match at 2017-01-02T02:10:00.325Z 2017-01-02T02:11:34.501Z INFO [ajp-apr-9009-exec-1] handler.LogRequestHandler (LogRequestHandler.java:37) - log() - guid=ebd11215-7d4c-4be6-a524-358015e2ac38,feed=TEST-FEED-V1_0,system=EXAMPLE_SYSTEM,environment=EXAMPLE_ENVIRONMENT,remotehost=192.168.2.220,remoteaddress=192.168.2.220 2017-01-02T02:11:34.528Z INFO [ajp-apr-9009-exec-1] datafeed.DataFeedRequestHandler$1 (DataFeedRequestHandler.java:104) - \"doPost() - Took 33 ms to process (concurrentRequestCount=1) 200\",\"Environment=EXAMPLE_ENVIRONMENT\",\"Expect=100-continue\",\"Feed=TEST-FEED-V1_0\",\"GUID=ebd11215-7d4c-4be6-a524-358015e2ac38\",\"ReceivedTime=2017-01-02T02:11:34.501Z\",\"RemoteAddress=192.168.2.220\",\"RemoteHost=192.168.2.220\",\"System=EXAMPLE_SYSTEM\",\"accept=*/*\",\"content-length=1051\",\"content-type=application/x-www-form-urlencoded\",\"host=stroomsap0.strmdev00.org\",\"user-agent=curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2\" ...  Further, if you check the proxy’s storage directory, you will see the file 001.zip. The file names number upwards from 001.\nls -l /stroomdata/stroom-working-sap0/proxy  shows\n[stroomuser@stroomsap0 ~]$ ls -l /stroomdata/stroom-working-sap0/proxy total 4 -rw-rw-r--. 1 stroomuser stroomuser 1107 Jan 2 13:11 001.zip [stroomuser@stroomsap0 ~]$  On viewing the contents of this file we see both a .dat and .meta file.\n[stroomuser@stroomsap0 ~]$ (cd /stroomdata/stroom-working-sap0/proxy; unzip 001.zip) Archive: 001.zip inflating: 001.dat inflating: 001.meta [stroomuser@stroomsap0 ~]$  The .dat file holds the content of the file we posted - /etc/group.\n[stroomuser@stroomsap0 ~]$ (cd /stroomdata/stroom-working-sap0/proxy; head -5 001.dat) root:x:0: bin:x:1:bin,daemon daemon:x:2:bin,daemon sys:x:3:bin,adm adm:x:4:adm,daemon [stroomuser@stroomsap0 ~]$  The .meta file is generated by the proxy and holds information about the posted file\n[stroomuser@stroomsap0 ~]$ (cd /stroomdata/stroom-working-sap0/proxy; cat 001.meta) content-type:application/x-www-form-urlencoded Environment:EXAMPLE_ENVIRONMENT Feed:TEST-FEED-V1_0 GUID:ebd11215-7d4c-4be6-a524-358015e2ac38 host:stroomsap0.strmdev00.org ReceivedTime:2017-01-02T02:11:34.501Z RemoteAddress:192.168.2.220 RemoteHost:192.168.2.220 StreamSize:1051 System:EXAMPLE_SYSTEM user-agent:curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.21 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2 [stroomuser@stroomsap0 ~]$ (cd /stroomdata/stroom-working-sap0/proxy; rm 001.meta 001.dat) [stroomuser@stroomsap0 ~]$  ","categories":"","description":"This HOWTO will demonstrate various ways to test that your Stroom installation has been successful.\n","excerpt":"This HOWTO will demonstrate various ways to test that your Stroom …","ref":"/stroom-docs/hugo-docsy/docs/howtos/install/installtestinghowto/","tags":["testing","installation"],"title":"Testing Stroom Installation"},{"body":"Stroom stores data in volumes. These are the logical link to the Storage hierarchy we setup on the operating system. This HOWTO will demonstrate how one first sets up volumes and also how to add additional volumes if one expanded an existing Stroom cluster.\nAssumptions  an account with the Administrator Application Permission is currently logged in. we will add volumes as per the Multi Node Stroom deployment Storage hierarchy  Configure the Volumes We need to configure the volumes for Stroom. The follow demonstrates adding the volumes for two nodes, but demonstrates the process for a single node deployment as well the volume maintenance needed when expanding a Multi Node Cluster when adding in a new node.\nTo configure the volumes, move to the Tools item of the Main Menu and select it to bring up the Tools sub-menu. then move down and select the Volumes sub-item to be presented with the Volumes configuration window as seen below. The attributes we see for each volume are\n Node - the processing node the volume resides on (this is just the node name entered when configuration the Stroom application) Path - the path to the volume Volume Type - The type of volume Public - to indicate that all nodes would access this volume Private - to indicate that only the local node will access this volume Stream Status Active - to store data within the volume Inactive - to NOT store data within the volume Closed - had stored data within the volume, but now no more data can be stored Index Status Active - to store index data within the volume Inactive - to NOT store index data within the volume Closed - had stored index data within the volume, but now no more index data can be stored Usage Date - the date and time the volume was last used Limit - the maximum amount of data the system will store on the volume Used - the amount of data in use on the volume Free - the amount of available storage on the volume Use% - the usage percentage  If you are setting up Stroom for the first time and you had accepted the default for the CREATE_DEFAULT_VOLUME_ON_START configuration option (true) when configuring the Stroom service application, you will see two default volumes have already been created. Had you set this option to false then the window would be empty.\nAdd Volumes Now from our two node Stroom Cluster example, our storage hierarchy was\n Node: stroomp00.strmdev00.org /stroomdata/stroom-data-p00 - location to store Stroom application data files (events, etc.) for this node /stroomdata/stroom-index-p00 - location to store Stroom application index files /stroomdata/stroom-working-p00 - location to store Stroom application working files (e.g. temporary files, output, etc.) for this node /stroomdata/stroom-working-p00/proxy - location for Stroom proxy to store inbound data files Node: stroomp01.strmdev00.org /stroomdata/stroom-data-p01 - location to store Stroom application data files (events, etc.) for this node /stroomdata/stroom-index-p01 - location to store Stroom application index files /stroomdata/stroom-working-p01 - location to store Stroom application working files (e.g. temporary files, output, etc.) for this node /stroomdata/stroom-working-p01/proxy - location for Stroom proxy to store inbound data files  From this we need to create four volumes. On stroomp00.strmdev00.org we create\n /stroomdata/stroom-data-p00 - location to store Stroom application data files (events, etc.) for this node /stroomdata/stroom-index-p00 - location to store Stroom application index files  and on stroomp01.strmdev00.org we create\n /stroomdata/stroom-data-p01 - location to store Stroom application data files (events, etc.) for this node /stroomdata/stroom-index-p01 - location to store Stroom application index files  So the first step to configure a volume is to move the cursor to the New icon in the top left of the Volumes window and select it. This will bring up the Add Volume configuration window\nAs you can see, the entry box titles reflect the attributes of a volume. So we will add the first nodes data volume\n /stroomdata/stroom-data-p00 - location to store Stroom application data files (events, etc.) for this node for node stroomp00.  If you move the the Node drop down entry box and select it you will be presented with a choice of available nodes - in this case stroomp00 and stroomp01 as we have a two node cluster with these node names.\nBy selecting the node stroomp00 we see\nTo configure the rest of the attributes for this volume, we:\n enter the Path to our first node’s data volume select a Volume Type of Public as this is a data volume we want all nodes to access select a Stream Status of Active to indicate we want to store data on it select an Index Status of Inactive as we do NOT want index data stored on it set a Limit of 12GB for allowed storage  and on selection of the we see the changes in the Volumes configuration window\nWe next add the first node’s index volume, as per\nAnd after adding the second node’s volumes we are finally presented with our configured volumes\nDelete Default Volumes We now need to deal with our default volumes. We want to delete them.\nSo we move the cursor to the first volume’s line (stroomp00 /home/stroomuser/stroom-app/volumes/defaultindexVolume …) and select the line then move the cursor to the Delete icon in the top left of the Volumes window and select it. On selection you will be given a confirmation request\nat which we press the button to see the first default volume has been deleted\nand after we select then delete the second default volume( stroomp00 /home/stroomuser/stroom-app/volumes/defaultStreamVolume …), we are left with\nAt this one can close the Volumes configuration window by pressing the button.\nNOTE: At the time of writing there is an issue regarding volumes\nStroom Github Issue 84 - https://github.com/gchq/stroom/issues/84 Due to Issue 84, if we delete volumes in a multi node environment, the deletion is not propagated to all other nodes in a cluster. Thus if we attempted to use the volumes we would get a database error. The current workaround is to restart all the Stroom applications which will cause a reload of all volume information. This MUST be done before sending any data to your multi-node Stroom cluster.\nAdding new Volumes When one expands a Multi Node Stroom cluster deployment, after the installation of the Stroom Proxy and Application software and services on the new node, one has to configure the new volumes that are on the new node. The following demonstrates this assuming we are adding\n the new node is stroomp02 the storage hierarchy for this node is /stroomdata/stroom-data-p02 - location to store Stroom application data files (events, etc.) for this node /stroomdata/stroom-index-p02 - location to store Stroom application index files /stroomdata/stroom-working-p02 - location to store Stroom application working files (e.g. tmp, output, etc.) for this node /stroomdata/stroom-working-p02/proxy - location for Stroom proxy to store inbound data files  From this we need to create two volumes on stroomp02\n /stroomdata/stroom-data-p02 - location to store Stroom application data files (events, etc.) for this node /stroomdata/stroom-index-p02 - location to store Stroom application index files  To configure the volumes, move to the Tools item of the Main Menu and select it to bring up the Tools sub-menu. then move down and select the Volumes sub-item to be presented with the Volumes configuration window as. We then move the cursor to the New icon in the top left of the Volumes window and select it. This will bring up the Add Volume configuration window where we select our volume’s node stroomp02.\nWe select this node and then configure the rest of the attributes for this data volume\nthen press the button.\nWe then add another volume for the index volume for this node with attributes as per\nAnd on pressing the button we see our two new volumes for this node have been added.\nAt this one can close the Volumes configuration window by pressing the button.\n","categories":"","description":"How to maintain Stroom's data and index volumes.\n","excerpt":"How to maintain Stroom's data and index volumes.\n","ref":"/stroom-docs/hugo-docsy/docs/howtos/install/installvolumeshowto/","tags":["volumes","installation"],"title":"Volume Maintenance"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/volumes/","tags":"","title":"volumes"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/docs/howtos/administration/","tags":"","title":"Administration"},{"body":"In this example, the logs are in a well-defined, line based, text format so we will use a Data Splitter parser to transform the logs into simple record-based XML and then a XSLT translation to normalise them into the Event schema.\nA separate document will describe the method of automating the storage of normalised events for this feed. Further, we will not Decorate these events. Again, Event Decoration is described in another document.\nAuthor: John Doe\nLast Updated: 7 Mar 2020\nRecommended Additional Documentation: HOWTO - Enabling Processors for a Pipeline\nEvent Log Source For this example, we will use logs from an Apache HTTPD Web server. In fact, the web server in front of Stroom.\nTo get the optimal information from the Apache HTTPD access logs, we define our log format based on an extension of the BlackBox format. The format is described and defined below. This is an extract from a httpd configuration file (/etc/httpd/conf/httpd.conf)\n# Stroom - Black Box Auditing configuration # # %a - Client IP address (not hostname (%h) to ensure ip address only) # When logging the remote host, it is important to log the client IP address, not the # hostname. We do this with the '%a' directive. Even if HostnameLookups are turned on, # using '%a' will only record the IP address. For the purposes of BlackBox formats, # reversed DNS should not be trusted # %{REMOTE_PORT}e - Client source port # Logging the client source TCP port can provide some useful network data and can help # one associate a single client with multiple requests. # If two clients from the same IP address make simultaneous connections, the 'common log' # file format cannot distinguish between those clients. Otherwise, if the client uses # keep-alives, then every hit made from a single TCP session will be associated by the same # client port number. # The port information can indicate how many connections our server is handling at once, # which may help in tuning server TCP/OP settings. It will also identify which client ports # are legitimate requests if the administrator is examining a possible SYN-attack against a # server. # Note we are using the REMOTE_PORT environment variable. Environment variables only come # into play when mod_cgi or mod_cgid is handling the request. # %X - Connection status (use %c for Apache 1.3) # The connection status directive tells us detailed information about the client connection. # It returns one of three flags: # x if the client aborted the connection before completion, # + if the client has indicated that it will use keep-alives (and request additional URLS), # - if the connection will be closed after the event # Keep-Alive is a HTTP 1.1. directive that informs a web server that a client can request multiple # files during the same connection. This way a client doesn't need to go through the overhead # of re-establishing a TCP connection to retrieve a new file. # %t - time - or [%{%d/%b/%Y:%T}t.%{msec_frac}t %{%z}t] for Apache 2.4 # The %t directive records the time that the request started. # NOTE: When deployed on an Apache 2.4, or better, environment, you should use # strftime format in order to get microsecond resolution. # %l - remote logname # %u - username [in quotes] # The remote user (from auth; This may be bogus if the return status (%s) is 401 # for non-ssl services) # For SSL services, user names need to be delivered as DNs to deliver PKI user details # in full. To pass through PKI certificate properties in the correct form you need to # add the following directives to your Apache configuration: # SSLUserName SSL_CLIENT_S_DN # SSLOptions +StdEnvVars # If you cannot, then use %{SSL_CLIENT_S_DN}x in place of %u and use blackboxSSLUser # LogFormat nickname # %r - first line of text sent by web client [in quotes] # This is the first line of text send by the web client, which includes the request # method, the full URL, and the HTTP protocol. # %s - status code before any redirection # This is the status code of the original request. # %\u003es - status code after any redirection has taken place # This is the final status code of the request, after any internal redirections may # have taken place. # %D - time in microseconds to handle the request # This is the number of microseconds the server took to handle the request in microseconds # %I - incoming bytes # This is the bytes received, include request and headers. It cannot, by definition be zero. # %O - outgoing bytes # This is the size in bytes of the outgoing data, including HTTP headers. It cannot, by # definition be zero. # %B - outgoing content bytes # This is the size in bytes of the outgoing data, EXCLUDING HTTP headers. Unlike %b, which # records '-' for zero bytes transferred, %B will record '0'. # %{Referer}i - Referrer HTTP Request Header [in quotes] # This is typically the URL of the page that made the request. If linked from # e-mail or direct entry this value will be empty. Note, this can be spoofed # or turned off # %{User-Agent}i - User agent HTTP Request Header [in quotes] # This is the identifying information the client (browser) reports about itself. # It can be spoofed or turned off # %V - the server name according to the UseCannonicalName setting # This identifies the virtual host in a multi host webservice # %p - the canonical port of the server servicing the request # Define a variation of the Black Box logs # # Note, you only need to use the 'blackboxSSLUser' nickname if you cannot set the # following directives for any SSL configurations # SSLUserName SSL_CLIENT_S_DN # SSLOptions +StdEnvVars # You will also note the variation for no logio module. The logio module supports # the %I and %O formatting directive # \u003cIfModule mod_logio.c\u003e LogFormat \"%a/%{REMOTE_PORT}e %X %t %l \\\"../../\"%r\\\" %s/%\u003es %D %I/%O/%B \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %V/%p\" blackboxUser LogFormat \"%a/%{REMOTE_PORT}e %X %t %l \\\"%{SSL_CLIENT_S_DN../../\"%r\\\" %s/%\u003es %D %I/%O/%B \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %V/%p\" blackboxSSLUser \u003c/IfModule\u003e \u003cIfModule !mod_logio.c\u003e LogFormat \"%a/%{REMOTE_PORT}e %X %t %l \\\"../../\"%r\\\" %s/%\u003es %D 0/0/%B \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %V/$p\" blackboxUser LogFormat \"%a/%{REMOTE_PORT}e %X %t %l \\\"%{SSL_CLIENT_S_DN../../\"%r\\\" %s/%\u003es %D 0/0/%B \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %V/$p\" blackboxSSLUser \u003c/IfModule\u003e  A copy of this configuration can be found here.\nAs Stroom can use PKI for login, you can configure Stroom’s Apache to make use of the blackboxSSLUser log format. A sample set of logs in this format appear below.\n192.168.4.220/61801 - [18/Jan/2020:12:39:04 -0800] - \"/C=USA/ST=CA/L=Los Angeles/O=Default Company Ltd/CN=Burn Frank (burn)\" \"POST /accounting/ui/dispatch.rpc HTTP/1.1\" 200/200 21221 2289/415/14 \"https://host01.company4.org/accounting/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\" host01.company4.org/443 192.168.4.220/61854 - [18/Jan/2020:12:40:04 -0800] - \"/C=USA/ST=CA/L=Los Angeles/O=Default Company Ltd/CN=Burn Frank (burn)\" \"POST /accounting/ui/dispatch.rpc HTTP/1.1\" 200/200 7889 2289/415/14 \"https://host01.company4.org/accounting/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\" host01.company4.org/443 192.168.4.220/61909 - [18/Jan/2020:12:41:04 -0800] - \"/C=USA/ST=CA/L=Los Angeles/O=Default Company Ltd/CN=Burn Frank (burn)\" \"POST /accounting/ui/dispatch.rpc HTTP/1.1\" 200/200 6901 2389/3796/14 \"https://host01.company4.org/accounting/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\" host01.company4.org/443 192.168.4.220/61962 - [18/Jan/2020:12:42:04 -0800] - \"/C=USA/ST=CA/L=Los Angeles/O=Default Company Ltd/CN=Burn Frank (burn)\" \"POST /accounting/ui/dispatch.rpc HTTP/1.1\" 200/200 11219 2289/415/14 \"https://host01.company4.org/accounting/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\" host01.company4.org/443 192.168.3.117/62015 - [18/Jan/2020:12:43:04 -1000] - \"/C=AUS/ST=NSW/L=Sydney/O=Default Company Ltd/CN=Max Bergman (maxb)\" \"POST /accounting/ui/dispatch.rpc HTTP/1.1\" 200/200 4265 2289/415/14 \"https://stroomnode01.strmdev01.org/accounting/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\" stroomnode01.strmdev01.org/443 192.168.3.117/62092 - [18/Jan/2020:12:44:04 -1000] - \"/C=AUS/ST=NSW/L=Sydney/O=Default Company Ltd/CN=Max Bergman (maxb)\" \"POST /accounting/ui/dispatch.rpc HTTP/1.1\" 200/200 9791 2289/415/14 \"https://stroomnode01.strmdev01.org/accounting/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\" stroomnode01.strmdev01.org/443 192.168.3.117/62147 - [18/Jan/2020:12:44:04 -1000] - \"/C=AUS/ST=NSW/L=Sydney/O=Default Company Ltd/CN=Max Bergman (maxb)\" \"POST /accounting/ui/dispatch.rpc HTTP/1.1\" 200/200 11509 2289/415/14 \"https://stroomnode01.strmdev01.org/accounting/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\" stroomnode01.strmdev01.org/443 192.168.3.117/62202 - [18/Jan/2020:12:44:04 -1000] - \"/C=AUS/ST=NSW/L=Sydney/O=Default Company Ltd/CN=Max Bergman (maxb)\" \"POST /accounting/ui/dispatch.rpc HTTP/1.1\" 200/200 4627 2389/3796/14 \"https://stroomnode01.strmdev01.org/accounting/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\" stroomnode01.strmdev01.org/443 192.168.3.117/62294 - [18/Jan/2020:12:44:04 -1000] - \"/C=AUS/ST=NSW/L=Sydney/O=Default Company Ltd/CN=Max Bergman (maxb)\" \"POST /accounting/ui/dispatch.rpc HTTP/1.1\" 200/200 12367 2289/415/14 \"https://stroomnode01.strmdev01.org/accounting/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\" stroomnode01.strmdev01.org/443 192.168.3.117/62349 - [18/Jan/2020:12:44:04 -1000] - \"/C=AUS/ST=NSW/L=Sydney/O=Default Company Ltd/CN=Max Bergman (maxb)\" \"POST /accounting/ui/dispatch.rpc HTTP/1.1\" 200/200 12765 2289/415/14 \"https://stroomnode01.strmdev01.org/accounting/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\" stroomnode01.strmdev01.org/443 192.168.2.245/62429 - [18/Jan/2020:12:50:04 +0200] - \"/C=GBR/ST=GLOUCESTERSHIRE/L=Bristol/O=Default Company Ltd/CN=Kostas Kosta (kk)\" \"POST /accounting/ui/dispatch.rpc HTTP/1.1\" 200/200 12245 2289/415/14 \"https://stroomnode00.strmdev01.org/accounting/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\" stroomnode00.strmdev01.org/443 192.168.2.245/62495 - [18/Jan/2020:12:51:04 +0200] - \"/C=GBR/ST=GLOUCESTERSHIRE/L=Bristol/O=Default Company Ltd/CN=Kostas Kosta (kk)\" \"POST /accounting/ui/dispatch.rpc HTTP/1.1\" 200/200 4327 2289/415/14 \"https://stroomnode00.strmdev01.org/accounting/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\" stroomnode00.strmdev01.org/443 192.168.2.245/62549 - [18/Jan/2020:12:52:04 +0200] - \"/C=GBR/ST=GLOUCESTERSHIRE/L=Bristol/O=Default Company Ltd/CN=Kostas Kosta (kk)\" \"POST /accounting/ui/dispatch.rpc HTTP/1.1\" 200/200 7148 2289/415/14 \"https://stroomnode00.strmdev01.org/accounting/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\" stroomnode00.strmdev01.org/443 192.168.2.245/62626 - [18/Jan/2020:12:52:04 +0200] - \"/C=GBR/ST=GLOUCESTERSHIRE/L=Bristol/O=Default Company Ltd/CN=Kostas Kosta (kk)\" \"POST /accounting/ui/dispatch.rpc HTTP/1.1\" 200/200 11386 2289/415/14 \"https://stroomnode00.strmdev01.org/accounting/\" \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.99 Safari/537.36\" stroomnode00.strmdev01.org/443  A copy of this sample data source can be found here. Save a copy of this data to your local environment for use later in this HOWTO. Save this file as a text document with ANSI encoding.\nCreate the Feed and its Pipeline To reflect the source of these Accounting Logs, we will name our feed and its pipeline Apache-SSLBlackBox-V2.0-EVENTS and it will be stored in the system group Apache HTTPD under the main system group - Event Sources.\nCreate System Group To create the system group Apache HTTPD, navigate to the Event Sources/Infrastructure/WebServer system group within the Explorer pane (if this system group structure does not already exist in your Stroom instance then refer to the HOWTO Stroom Explorer Management for guidance). Left click to highlight the WebServer system group then right click to bring up the object context menu. Navigate to the New icon, then the Folder icon to reveal the New Folder selection window.\nIn the New Folder window enter Apache HTTPD into the Name: text entry box.\nThe click on OK at which point you will be presented with the Apache HTTPD system group configuration tab. Also note, the WebServer system group within the Explorer pane has automatically expanded to display the Apache HTTPD system group.\nClose the Apache HTTPD system group configuration tab by clicking on the close item icon on the right-hand side of the tab . We now need to create, in order\n the Feed, the Text Parser, the Translation and finally, the Pipeline.  Create Feed Within the Explorer pane, and having selected the Apache HTTPD group, right click to bring up object context menu. Navigate to New, Feed\nSelect the Feed icon , when the New Feed selection window comes up, ensure the Apache HTTPD system group is selected or navigate to it. Then enter the name of the feed, Apache-SSLBlackBox-V2.0-EVENTS, into the Name: text entry box the press OK.\nIt should be noted that the default Stroom FeedName pattern will not accept this name. One needs to modify the stroom.feedNamePattern stroom property to change the default pattern to ^[a-zA-Z0-9_-\\.]{4,}$. See the HOWTO on System Properties document to see how to make this change.\nAt this point you will be presented with the new feed’s configuration tab and the feed’s Explorer object will automatically appear in the Explorer pane within the Apache HTTPD system group.\nSelect the Settings tab on the feed’s configuration tab. Enter an appropriate description into the Description: text entry box, for instance:\n“Apache HTTPD events for BlackBox Version 2.0. These events are from a Secure service (https).”\nIn the Classification: text entry box, enter a Classification of the data that the event feed will contain - that is the classification or sensitivity of the accounting log’s content itself.\nAs this is not a Reference Feed, leave the Reference Feed: check box unchecked.\nWe leave the Feed Status: at Receive.\nWe leave the Stream Type: as Raw Events as this we will be sending batches (streams) of raw event logs.\nWe leave the Data Encoding: as UTF-8 as the raw logs are in this form.\nWe leave the Context Encoding: as UTF-8 as there no context events for this feed.\nWe leave the Retention Period: at Forever as we do not want to delete the raw logs.\nThis results in\nSave the feed by clicking on the icon.\nCreate Text Converter Within the Explorer pane, and having selected the Apache HTTPD system group, right click to bring up object context menu, then navigate to the icon to reveal the New sub-context menu. Next, navigate to the Text Converter item\nand left click to select. When the New Text Converter\nselection window comes up enter the name of the feed, Apache-SSLBlackBox-V2.0-EVENTS, into the Name: text entry box then press OK. At this point you will be presented with the new text converter’s configuration tab.\nEnter an appropriate description into the Description: text entry box, for instance\n“Apache HTTPD events for BlackBox Version 2.0 - text converter. See Conversion for complete documentation.”\nSet the Converter Type: to be Data Splitter from drop down menu.\nSave the text converter by clicking on the icon.\nCreate XSLT Translation Within the Explorer pane, and having selected the Apache HTTPD system group, right click to bring up object context menu, then navigate to the New icon to reveal the New sub-context menu. Next, navigate to the item and left click to select.\nWhen the New XSLT selection window comes up,\nenter the name of the feed, Apache-SSLBlackBox-V2.0-EVENTS, into the Name: text entry box then press OK. At this point you will be presented with the new XSLT’s configuration tab.\nEnter an appropriate description into the Description: text entry box, for instance\n“Apache HTTPD events for BlackBox Version 2.0 - translation. See Translation for complete documentation.”\nSave the XSLT by clicking on the icon.\nCreate Pipeline In the process of creating this pipeline we have assumed that the Template Pipeline content pack has been loaded, so that we can Inherit a pipeline structure from this content pack and configure it to support this specific feed.\nWithin the Explorer pane, and having selected the Apache HTTPD system group, right click to bring up object context menu, then the New sub-context menu. Navigate to the Pipeline and left click to select. When the New Pipeline\nselection window comes up, navigate to, then select the Apache HTTPD system group and then enter the name of the pipeline, Apache-SSLBlackBox-V2.0-EVENTS into the Name: text entry box then press OK. At this you will be presented with the new pipeline’s configuration tab\nAs usual, enter an appropriate Description:\n“Apache HTTPD events for BlackBox Version 2.0 - pipeline. This pipeline uses the standard event pipeline to store the events in the Event Store.”\nSave the pipeline by clicking on the icon.\nWe now need to select the structure this pipeline will use. We need to move from the Settings sub-item on the pipeline configuration tab to the Structure sub-item. This is done by clicking on the Structure link, at which we see\nNext we will choose an Event Data pipeline. This is done by inheriting it from a defined set of Template Pipelines. To do this, click on the menu selection icon to the right of the Inherit From: text display box.\nWhen the Choose item\nselection window appears, select from the Template Pipelines system group. In this instance, as our input data is text, we select (left click) the\nEvent Data (Text) pipeline\nthen press OK. At this we see the inherited pipeline structure of\nFor the purpose of this HOWTO, we are only interested in two of the eleven (11) elements in this pipeline\n the Text Converter labelled dsParser the XSLT Translation labelled translationFilter  We now need to associate our Text Converter and Translation with the pipeline so that we can pass raw events (logs) through our pipeline in order to save them in the Event Store.\nTo associate the Text Converter, select the Text Converter icon, to display.\nNow identify to the Property pane (the middle pane of the pipeline configuration tab), then and double click on the textConverter Property Name to display the Edit Property selection window that allows you to edit the given property\nWe leave the Property Source: as Inherit but we need to change the Property Value: from None to be our newly created Apache-SSLBlackBox-V2.0-EVENTS Text Converter.\nTo do this, position the cursor over the menu selection icon to the right of the Value: text display box and click to select. Navigate to the Apache HTTPD system group then select the Apache-SSLBlackBox-V2.0-EVENTS text Converter\nthen press OK. At this we will see the Property Value set\nAgain press OK to finish editing this property and we see that the textConverter Property has been set to Apache-SSLBlackBox-V2.0-EVENTS\nWe perform the same actions to associate the translation.\nFirst, we select the translation Filter’s icon and then within translation Filter’s Property pane we double click on the xslt Property Name to bring up the Property Editor. As before, bring up the Choose item selection window, navigate to the Apache HTTPD system group and select the Apache-SSLBlackBox-V2.0-EVENTS xslt Translation.\nWe leave the remaining properties in the translation Filter’s Property pane at their default values. The result is the assignment of our translation to the xslt Property.\nFor the moment, we will not associate a decoration filter.\nSave the pipeline by clicking on its icon.\nManually load Raw Event test data Having established the pipeline, we can now start authoring our text converter and translation. The first step is to load some Raw Event test data. Previously in the Event Log Source of this HOWTO you saved a copy of the file sampleApacheBlackBox.log to your local environment. It contains only a few events as the content is consistently formatted. We could feed the test data by posting the file to Stroom’s accounting/datafeed url, but for this example we will manually load the file. Once developed, raw data is posted to the web service.\nSelect the configuration tab and select the Data sub-item to display\nThis window is divided into three panes.\nThe top pane displays the Stream Table, which is a table of the latest streams that belong to the feed (clearly it’s empty).\nNote that a Raw Event stream is made up of data from a single file of data or aggregation of multiple data files and also meta-data associated with the data file(s). For example, file names, file size, etc.\nThe middle pane displays a Specific feed and any linked streams. To display a Specific feed, you select it from the Stream Table above.\nThe bottom pane displays the selected stream’s data or meta-data.\nNote the Upload icon in the top left of the Stream table pane. On clicking the Upload icon, we are presented with the data Upload selection window.\nAs stated earlier, raw event data is normally posted as a file to the Stroom web server. As part of this posting action, a set of well-defined HTTP extra headers are sent as part of the post. These headers, in the form of key value pairs, provide additional context associated with the system sending the logs. These standard headers become Stroom feed attributes available to the Stroom translation. Common attributes are\n System - the name of the System providing the logs Environment - the environment of the system (Production, Quality Assurance, Reference, Development) Feed - the feedname itself MyHost - the fully qualified domain name of the system sending the logs MyIPaddress - the IP address of the system sending the logs MyNameServer - the name server the system resolves names through  Since our translation will want these feed attributes, we will set them in the Meta Data text entry box of the Upload selection window. Note we can skip Feed as this will automatically be assigned correctly as part of the upload action (setting it to Apache-SSLBlackBox-V2.0-EVENTS obviously). Our Meta Data: will have\n System:LinuxWebServer Environment:Production MyHost:stroomnode00.strmdev01.org MyIPaddress:192.168.2.245 MyNameServer:192.168.2.254  We select a Stream Type: of Raw Events as this data is for an Event Feed. As this is not a Reference Feed we ignore the Effective: entry box (a date/time selector).\nWe now click the Choose File button, then navigate to the location of the raw log file you downloaded earlier, sampleApacheBlackBox.log\nthen click Open to return to the Upload selection window where we can then press OK to perform the upload.\nAn Alert dialog window is presented which should be closed.\nThe stream we have just loaded will now be displayed in the Streams Table pane. Note that the Specific Stream and Data/Meta-data panes are still blank.\nIf we select the stream by clicking anywhere along its line, the stream is highlighted and the Specific Stream and Data/Meta-data_ panes now display data.\nThe Specific Stream pane only displays the Raw Event stream and the Data/Meta-data pane displays the content of the log file just uploaded (the Data link). If we were to click on the Meta link at the top of the Data/Meta-data pane, the log data is replaced by this stream’s meta-data.\nNote that, in addition to the feed attributes we set, the upload process added additional feed attributes of\n Feed - the feed name ReceivedTime - the time the feed was received by Stroom RemoteFile - the name of the file loaded StreamSize - the size, in bytes, of the loaded data within the stream user-agent - the user agent used to present the stream to Stroom - in this case, the Stroom user Interface  We now have data that will allow us to develop our text converter and translation.\nStep data through Pipeline - Source We now need to step our data through the pipeline.\nTo do this, set the check-box on the Specific Stream pane and we note that the previously grayed out action icons are activated We now want to step our data through the first element of the pipeline, the Text Converter. We enter Stepping Mode by pressing the stepping button found at the bottom right corner of the Data/Meta-data pane.\nWe will then be requested to choose a pipeline to step with, at which, you should navigate to the Apache-SSLBlackBox-V2.0-EVENTS pipeline as per\nthen press OK.\nAt this point, we enter the pipeline Stepping tab\nwhich, initially displays the Raw Event data from our stream. This is the Source display for the Event Pipeline.\nStep data through Pipeline - Text Converter We click on the icon to enter the Text Converter stepping window.\nThis stepping tab is divided into three sub-panes. The top one is the Text Converter editor and it will allow you to edit the text conversion. The bottom left window displays the input to the Text Converter. The bottom right window displays the output from the Text Converter for the given input.\nWe also note an error indicator - that of an error in the editor pane as indicated by the black back-grounded x and rectangular black boxes to the right of the editor’s scroll bar.\nIn essence, this means that we have no text converter to pass the Raw Event data through.\nTo correct this, we will author our text converter using the Data Splitter language. Normally this is done incrementally to more easily develop the parser. The minimum text converter contains\n\u003c?xml version=\"1.1\" encoding=\"UTF-8\"?\u003e \u003cdataSplitter xmlns=\"data-splitter:3\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"data-splitter:3 file://data-splitter-v3.0.1.xsd\" version=\"3.0\"\u003e \u003csplit delimiter=\"\\n\"\u003e \u003cgroup\u003e \u003cregex pattern=\"^(.*)$\"\u003e \u003cdata name=\"rest\" value=\"$1\" /\u003e \u003c/regex\u003e \u003c/group\u003e \u003c/split\u003e \u003c/dataSplitter\u003e  If we now press the Step First icon the error will disappear and the stepping window will show.\nAs we can see, the first line of our Raw Event is displayed in the input pane and the output window holds the converted XML output where we just have a single data element with a name attribute of rest and a value attribute of the complete raw event as our regular expression matched the entire line.\nThe next incremental step in the parser, would be to parse out additional data elements. For example, in this next iteration we extract the client ip address, the client port and hold the rest of the Event in the rest data element.\nWith the text converter containing\n\u003c?xml version=\"1.1\" encoding=\"UTF-8\"?\u003e \u003cdataSplitter xmlns=\"data-splitter:3\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"data-splitter:3 file://data-splitter-v3.0.1.xsd\" version=\"3.0\"\u003e \u003csplit delimiter=\"\\n\"\u003e \u003cgroup\u003e \u003cregex pattern=\"^([^/]+)/([^ ]+) (.*)$\"\u003e \u003cdata name=\"clientip\" value=\"$1\" /\u003e \u003cdata name=\"clientport\" value=\"$2\" /\u003e \u003cdata name=\"rest\" value=\"$3\" /\u003e \u003c/regex\u003e \u003c/group\u003e \u003c/split\u003e \u003c/dataSplitter\u003e  and a click on the Refresh Current Step icon we will see the output pane contain\nWe continue this incremental parsing until we have our complete parser.\nThe following is our complete Text Converter which generates xml records as defined by the Stroom records v3.0 schema.\n\u003c?xml version=\"1.1\" encoding=\"UTF-8\"?\u003e \u003cdataSplitter xmlns=\"data-splitter:3\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"data-splitter:3 file://data-splitter-v3.0.1.xsd\" version=\"3.0\"\u003e \u003c!-- CLASSIFICATION: UNCLASSIFIED --\u003e \u003c!-- Release History: Release 20131001, 1 Oct 2013 - Initial release General Notes: This data splitter takes audit events for the Stroom variant of the Black Box Apache Auditing. Event Format: The following is extracted from the Configuration settings for the Stroom variant of the Black Box Apache Auditing format. # STROOM - Black Box Auditing configuration # # %a - Client IP address (not hostname (%h) to ensure ip address only) # When logging the remote host, it is important to log the client IP address, not the # hostname. We do this with the '%a' directive. Even if HostnameLookups are turned on, # using '%a' will only record the IP address. For the purposes of BlackBox formats, # reversed DNS should not be trusted # %{REMOTE_PORT}e - Client source port # Logging the client source TCP port can provide some useful network data and can help # one associate a single client with multiple requests. # If two clients from the same IP address make simultaneous connections, the 'common log' # file format cannot distinguish between those clients. Otherwise, if the client uses # keep-alives, then every hit made from a single TCP session will be associated by the same # client port number. # The port information can indicate how many connections our server is handling at once, # which may help in tuning server TCP/OP settings. It will also identify which client ports # are legitimate requests if the administrator is examining a possible SYN-attack against a # server. # Note we are using the REMOTE_PORT environment variable. Environment variables only come # into play when mod_cgi or mod_cgid is handling the request. # %X - Connection status (use %c for Apache 1.3) # The connection status directive tells us detailed information about the client connection. # It returns one of three flags: # x if the client aborted the connection before completion, # + if the client has indicated that it will use keep-alives (and request additional URLS), # - if the connection will be closed after the event # Keep-Alive is a HTTP 1.1. directive that informs a web server that a client can request multiple # files during the same connection. This way a client doesn't need to go through the overhead # of re-establishing a TCP connection to retrieve a new file. # %t - time - or [%{%d/%b/%Y:%T}t.%{msec_frac}t %{%z}t] for Apache 2.4 # The %t directive records the time that the request started. # NOTE: When deployed on an Apache 2.4, or better, environment, you should use # strftime format in order to get microsecond resolution. # %l - remote logname # # %u - username [in quotes] # The remote user (from auth; This may be bogus if the return status (%s) is 401 # for non-ssl services) # For SSL services, user names need to be delivered as DNs to deliver PKI user details # in full. To pass through PKI certificate properties in the correct form you need to # add the following directives to your Apache configuration: # SSLUserName SSL_CLIENT_S_DN # SSLOptions +StdEnvVars # If you cannot, then use %{SSL_CLIENT_S_DN}x in place of %u and use blackboxSSLUser # LogFormat nickname # %r - first line of text sent by web client [in quotes] # This is the first line of text send by the web client, which includes the request # method, the full URL, and the HTTP protocol. # %s - status code before any redirection # This is the status code of the original request. # %\u003es - status code after any redirection has taken place # This is the final status code of the request, after any internal redirections may # have taken place. # %D - time in microseconds to handle the request # This is the number of microseconds the server took to handle the request in microseconds # %I - incoming bytes # This is the bytes received, include request and headers. It cannot, by definition be zero. # %O - outgoing bytes # This is the size in bytes of the outgoing data, including HTTP headers. It cannot, by # definition be zero. # %B - outgoing content bytes # This is the size in bytes of the outgoing data, EXCLUDING HTTP headers. Unlike %b, which # records '-' for zero bytes transferred, %B will record '0'. # %{Referer}i - Referrer HTTP Request Header [in quotes] # This is typically the URL of the page that made the request. If linked from # e-mail or direct entry this value will be empty. Note, this can be spoofed # or turned off # %{User-Agent}i - User agent HTTP Request Header [in quotes] # This is the identifying information the client (browser) reports about itself. # It can be spoofed or turned off # %V - the server name according to the UseCannonicalName setting # This identifies the virtual host in a multi host webservice # %p - the canonical port of the server servicing the request # Define a variation of the Black Box logs # # Note, you only need to use the 'blackboxSSLUser' nickname if you cannot set the # following directives for any SSL configurations # SSLUserName SSL_CLIENT_S_DN # SSLOptions +StdEnvVars # You will also note the variation for no logio module. The logio module supports # the %I and %O formatting directive # \u003cIfModule mod_logio.c\u003e LogFormat \"%a/%{REMOTE_PORT}e %X %t %l \\\"%u\\\" \\\"%r\\\" %s/%\u003es %D I/%O/%B \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %V/%p\" blackboxUser LogFormat \"%a/%{REMOTE_PORT}e %X %t %l \\\"%{SSL_CLIENT_S_DN}x\\\" \\\"%r\\\" %s/%\u003es %D %I/%O/%B \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %V/%p\" blackboxSSLUser \u003c/IfModule\u003e \u003cIfModule !mod_logio.c\u003e LogFormat \"%a/%{REMOTE_PORT}e %X %t %l \\\"%u\\\" \\\"%r\\\" %s/%\u003es %D 0/0/%B \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %V/$p\" blackboxUser LogFormat \"%a/%{REMOTE_PORT}e %X %t %l \\\"%{SSL_CLIENT_S_DN}x\\\" \\\"%r\\\" %s/%\u003es %D 0/0/%B \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %V/$p\" blackboxSSLUser \u003c/IfModule\u003e --\u003e \u003c!-- Match line --\u003e \u003csplit delimiter=\"\\n\"\u003e \u003cgroup\u003e \u003cregex pattern=\"^([^/]+)/([^ ]+) ([^ ]+) \\[([^\\]]+)] ([^ ]+) \u0026#34;([^\u0026#34;]+)\u0026#34; \u0026#34;([^\u0026#34;]+)\u0026#34; (\\d+)/(\\d+) (\\d+) ([^/]+)/([^/]+)/(\\d+) \u0026#34;([^\u0026#34;]+)\u0026#34; \u0026#34;([^\u0026#34;]+)\u0026#34; ([^/]+)/([^ ]+)\"\u003e \u003cdata name=\"clientip\" value=\"$1\" /\u003e \u003cdata name=\"clientport\" value=\"$2\" /\u003e \u003cdata name=\"constatus\" value=\"$3\" /\u003e \u003cdata name=\"time\" value=\"$4\" /\u003e \u003cdata name=\"remotelname\" value=\"$5\" /\u003e \u003cdata name=\"user\" value=\"$6\" /\u003e \u003cdata name=\"url\" value=\"$7\"\u003e \u003cgroup value=\"$7\" ignoreErrors=\"true\"\u003e \u003c!-- Special case the \"GET /\" url string as opposed to the more standard \"method url protocol/protocol_version\". Also special case a url of \"-\" which occurs on some errors (eg 408) --\u003e \u003cregex pattern=\"^-$\"\u003e \u003cdata name=\"url\" value=\"error\" /\u003e \u003c/regex\u003e \u003cregex pattern=\"^([^ ]+) (/)$\"\u003e \u003cdata name=\"httpMethod\" value=\"$1\" /\u003e \u003cdata name=\"url\" value=\"$2\" /\u003e \u003c/regex\u003e \u003cregex pattern=\"^([^ ]+) ([^ ]+) ([^ /]*)/([^ ]*)\"\u003e \u003cdata name=\"httpMethod\" value=\"$1\" /\u003e \u003cdata name=\"url\" value=\"$2\" /\u003e \u003cdata name=\"protocol\" value=\"$3\" /\u003e \u003cdata name=\"version\" value=\"$4\" /\u003e \u003c/regex\u003e \u003c/group\u003e \u003c/data\u003e \u003cdata name=\"responseB\" value=\"$8\" /\u003e \u003cdata name=\"response\" value=\"$9\" /\u003e \u003cdata name=\"timeM\" value=\"$10\" /\u003e \u003cdata name=\"bytesIn\" value=\"$11\" /\u003e \u003cdata name=\"bytesOut\" value=\"$12\" /\u003e \u003cdata name=\"bytesOutContent\" value=\"$13\" /\u003e \u003cdata name=\"referer\" value=\"$14\" /\u003e \u003cdata name=\"userAgent\" value=\"$15\" /\u003e \u003cdata name=\"vserver\" value=\"$16\" /\u003e \u003cdata name=\"vserverport\" value=\"$17\" /\u003e \u003c/regex\u003e \u003c/group\u003e \u003c/split\u003e \u003c/dataSplitter\u003e  A copy of this Data Splitter can be found here.\nIf we now press the Step First icon we will see the complete parsed record\nIf we click on the Step Forward icon we will see the next event displayed in both the input and output panes.\nwe click on the Step Last icon we will see the last event displayed in both the input and output panes.\nYou should take note of the stepping key that has been displayed in each stepping window. The stepping key are the numbers enclosed in square brackets e.g. [146271:1:14] found in the top right-hand side of the stepping window next to the stepping icons\nThe form of these keys is [ streamId ‘:’ subStreamId ‘:’ recordNo]\nwhere\n streamId - is the stream ID and won’t change when stepping through the selected stream. subStreamId - is the sub stream ID. When Stroom processes event streams it aggregates multiple input files and this is the file number. recordNo - is the record number within the sub stream.  One can double click on either the subStreamId or recordNo numbers and enter a new number. This allows you to ‘step’ around a stream rather than just relying on first, previous, next and last movement.\nNote, you should now Save your edited Text Converter.\nStep data through Pipeline - Translation To start authoring the xslt Translation Filter, press the icon which steps us to the xsl Translation Filter pane.\nAs for the Text Converter stepping tab, this tab is divided into three sub-panes. The top one is the xslt translation editor and it will allow you to edit the xslt translation. The bottom left window displays the input to the xslt translation (which is the output from the Text Converter). The bottom right window displays the output from the xslt Translation filter for the given input.\nWe now click on the pipeline Step Forward button to single step the Text Converter records element data through our xslt Translation. We see no change as an empty translation will just perform a copy of the input data.\nTo correct this, we will author our xslt translation. Like the Data Splitter this is also authored incrementally. A minimum xslt translation might contain\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e \u003cxsl:stylesheet xpath-default-namespace=\"records:2\" xmlns=\"event-logging:3\" xmlns:stroom=\"stroom\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" version=\"3.0\"\u003e \u003c!-- Ingest the records tree --\u003e \u003cxsl:template match=\"records\"\u003e \u003cEvents xsi:schemaLocation=\"event-logging:3 file://event-logging-v3.2.3.xsd\" Version=\"3.2.3\"\u003e \u003cxsl:apply-templates /\u003e \u003c/Events\u003e \u003c/xsl:template\u003e \u003c!-- Only generate events if we have an url on input --\u003e \u003cxsl:template match=\"record[data[@name = 'url']]\"\u003e \u003cEvent\u003e \u003cxsl:apply-templates select=\".\" mode=\"eventTime\" /\u003e \u003cxsl:apply-templates select=\".\" mode=\"eventSource\" /\u003e \u003cxsl:apply-templates select=\".\" mode=\"eventDetail\" /\u003e \u003c/Event\u003e \u003c/xsl:template\u003e \u003cxsl:template match=\"node()\" mode=\"eventTime\"\u003e \u003cEventTime\u003e \u003cTimeCreated/\u003e \u003c/EventTime\u003e \u003c/xsl:template\u003e \u003cxsl:template match=\"node()\" mode=\"eventSource\"\u003e \u003cEventSource\u003e \u003cSystem\u003e \u003cName /\u003e \u003cEnvironment /\u003e \u003c/System\u003e \u003cGenerator /\u003e \u003cDevice /\u003e \u003cClient /\u003e \u003cServer /\u003e \u003cUser\u003e \u003cId /\u003e \u003c/User\u003e \u003c/EventSource\u003e \u003c/xsl:template\u003e \u003cxsl:template match=\"node()\" mode=\"eventDetail\"\u003e \u003cEventDetail\u003e \u003cView\u003e \u003cWebPage\u003e \u003cType\u003eWebPage\u003c/Type\u003e \u003c/WebPage\u003e \u003c/View\u003e \u003c/EventDetail\u003e \u003c/xsl:template\u003e \u003c/xsl:stylesheet\u003e  Clearly this doesn’t generate useful events. Our first iterative change might be to generate the TimeCreated element value. The change would be\n\u003cxsl:template match=\"node()\" mode=\"eventTime\"\u003e \u003cEventTime\u003e \u003cTimeCreated\u003e \u003cxsl:value-of select=\"stroom:format-date(data[@name = 'time']/@value, 'dd/MMM/yyyy:HH:mm:ss XX')\" /\u003e \u003c/TimeCreated\u003e \u003c/EventTime\u003e \u003c/xsl:template\u003e  Adding in the EventSource elements (without ANY error checking!) as per\n\u003cxsl:template match=\"node()\" mode=\"eventSource\"\u003e \u003cEventSource\u003e \u003cSystem\u003e \u003cName\u003e \u003cxsl:value-of select=\"stroom:feed-attribute('System')\" /\u003e \u003c/Name\u003e \u003cEnvironment\u003e \u003cxsl:value-of select=\"stroom:feed-attribute('Environment')\" /\u003e \u003c/Environment\u003e \u003c/System\u003e \u003cGenerator\u003eApache HTTPD\u003c/Generator\u003e \u003cDevice\u003e \u003cHostName\u003e \u003cxsl:value-of select=\"stroom:feed-attribute('MyHost')\" /\u003e \u003c/HostName\u003e \u003cIPAddress\u003e \u003cxsl:value-of select=\"stroom:feed-attribute('MyIPAddress')\" /\u003e \u003c/IPAddress\u003e \u003c/Device\u003e \u003cClient\u003e \u003cIPAddress\u003e \u003cxsl:value-of select=\"data[@name = 'clientip']/@value\" /\u003e \u003c/IPAddress\u003e \u003cPort\u003e \u003cxsl:value-of select=\"data[@name = 'clientport']/@value\" /\u003e \u003c/Port\u003e \u003c/Client\u003e \u003cServer\u003e \u003cHostName\u003e \u003cxsl:value-of select=\"data[@name = 'vserver']/@value\" /\u003e \u003c/HostName\u003e \u003cPort\u003e \u003cxsl:value-of select=\"data[@name = 'vserverport']/@value\" /\u003e \u003c/Port\u003e \u003c/Server\u003e \u003cUser\u003e \u003cId\u003e \u003cxsl:value-of select=\"data[@name='user']/@value\" /\u003e \u003c/Id\u003e \u003c/User\u003e \u003c/EventSource\u003e \u003c/xsl:template\u003e  And after a Refresh Current Step we see our output event ‘grow’ to\nWe now complete our translation by expanding the EventDetail elements to have the completed translation of (again with limited error checking and non-existent documentation!)\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e \u003cxsl:stylesheet xpath-default-namespace=\"records:2\" xmlns=\"event-logging:3\" xmlns:stroom=\"stroom\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" version=\"3.0\"\u003e \u003c!-- Ingest the records tree --\u003e \u003cxsl:template match=\"records\"\u003e \u003cEvents xsi:schemaLocation=\"event-logging:3 file://event-logging-v3.2.3.xsd\" Version=\"3.2.3\"\u003e \u003cxsl:apply-templates /\u003e \u003c/Events\u003e \u003c/xsl:template\u003e \u003c!-- Only generate events if we have an url on input --\u003e \u003cxsl:template match=\"record[data[@name = 'url']]\"\u003e \u003cEvent\u003e \u003cxsl:apply-templates select=\".\" mode=\"eventTime\" /\u003e \u003cxsl:apply-templates select=\".\" mode=\"eventSource\" /\u003e \u003cxsl:apply-templates select=\".\" mode=\"eventDetail\" /\u003e \u003c/Event\u003e \u003c/xsl:template\u003e \u003cxsl:template match=\"node()\" mode=\"eventTime\"\u003e \u003cEventTime\u003e \u003cTimeCreated\u003e \u003cxsl:value-of select=\"stroom:format-date(data[@name = 'time']/@value, 'dd/MMM/yyyy:HH:mm:ss XX')\" /\u003e \u003c/TimeCreated\u003e \u003c/EventTime\u003e \u003c/xsl:template\u003e \u003cxsl:template match=\"node()\" mode=\"eventSource\"\u003e \u003cEventSource\u003e \u003cSystem\u003e \u003cName\u003e \u003cxsl:value-of select=\"stroom:feed-attribute('System')\" /\u003e \u003c/Name\u003e \u003cEnvironment\u003e \u003cxsl:value-of select=\"stroom:feed-attribute('Environment')\" /\u003e \u003c/Environment\u003e \u003c/System\u003e \u003cGenerator\u003eApache HTTPD\u003c/Generator\u003e \u003cDevice\u003e \u003cHostName\u003e \u003cxsl:value-of select=\"stroom:feed-attribute('MyHost')\" /\u003e \u003c/HostName\u003e \u003cIPAddress\u003e \u003cxsl:value-of select=\"stroom:feed-attribute('MyIPAddress')\" /\u003e \u003c/IPAddress\u003e \u003c/Device\u003e \u003cClient\u003e \u003cIPAddress\u003e \u003cxsl:value-of select=\"data[@name = 'clientip']/@value\" /\u003e \u003c/IPAddress\u003e \u003cPort\u003e \u003cxsl:value-of select=\"data[@name = 'clientport']/@value\" /\u003e \u003c/Port\u003e \u003c/Client\u003e \u003cServer\u003e \u003cHostName\u003e \u003cxsl:value-of select=\"data[@name = 'vserver']/@value\" /\u003e \u003c/HostName\u003e \u003cPort\u003e \u003cxsl:value-of select=\"data[@name = 'vserverport']/@value\" /\u003e \u003c/Port\u003e \u003c/Server\u003e \u003cUser\u003e \u003cId\u003e \u003cxsl:value-of select=\"data[@name='user']/@value\" /\u003e \u003c/Id\u003e \u003c/User\u003e \u003c/EventSource\u003e \u003c/xsl:template\u003e \u003c!-- --\u003e \u003cxsl:template match=\"node()\" mode=\"eventDetail\"\u003e \u003cEventDetail\u003e \u003cView\u003e \u003cWebPage\u003e \u003cType\u003eWebPage\u003c/Type\u003e \u003cURL\u003e \u003cxsl:value-of select=\"data[@name = 'url']/data[@name = 'url']/@value\" /\u003e \u003c/URL\u003e \u003cxsl:if test=\"data[@name = 'referer']/@value != '-'\"\u003e \u003cReferrer\u003e \u003cxsl:value-of select=\"data[@name = 'referer']/@value\" /\u003e \u003c/Referrer\u003e \u003c/xsl:if\u003e \u003cHTTPMethod\u003e \u003cxsl:value-of select=\"data[@name = 'url']/data[@name = 'httpMethod']/@value\" /\u003e \u003c/HTTPMethod\u003e \u003cUserAgent\u003e \u003cxsl:value-of select=\"data[@name = 'userAgent']/@value\" /\u003e \u003c/UserAgent\u003e \u003cResponseCode\u003e \u003cxsl:value-of select=\"data[@name = 'response']/@value\" /\u003e \u003c/ResponseCode\u003e \u003c!-- Protocol --\u003e \u003cData Name=\"Protocol\"\u003e \u003cxsl:attribute name=\"Value\" select=\"data[@name = 'url']/data[@name = 'protocol']/@value\" /\u003e \u003c/Data\u003e \u003c!-- Protocol Version --\u003e \u003cData Name=\"Version\"\u003e \u003cxsl:attribute name=\"Value\" select=\"data[@name = 'url']/data[@name = 'version']/@value\" /\u003e \u003c/Data\u003e \u003c!-- Response Code Before --\u003e \u003cData Name=\"ResponseCodeBefore\"\u003e \u003cxsl:attribute name=\"Value\" select=\"data[@name = 'responseB']/@value\" /\u003e \u003c/Data\u003e \u003c!-- Connection Status --\u003e \u003cData Name=\"ConnectionStatus\"\u003e \u003cxsl:attribute name=\"Value\" select=\"data[@name = 'constatus']/@value\" /\u003e \u003c/Data\u003e \u003c!-- Bytes transferred --\u003e \u003cxsl:if test=\"data[@name = 'bytesIn']/@value != '0' and data[@name = 'bytesIn']/@value != '-'\"\u003e \u003cData Name=\"BytesIn\"\u003e \u003cxsl:attribute name=\"Value\" select=\"data[@name = 'bytesIn']/@value\" /\u003e \u003c/Data\u003e \u003c/xsl:if\u003e \u003cxsl:if test=\"data[@name = 'bytesOut']/@value != '0' and data[@name = 'bytesOut']/@value != '-'\"\u003e \u003cData Name=\"BytesOut\"\u003e \u003cxsl:attribute name=\"Value\" select=\"data[@name = 'bytesOut']/@value\" /\u003e \u003c/Data\u003e \u003c/xsl:if\u003e \u003cxsl:if test=\"data[@name = 'bytesOutContent']/@value != '0'\"\u003e \u003cData Name=\"BytesOutContentOnly\"\u003e \u003cxsl:attribute name=\"Value\" select=\"data[@name = 'bytesOutContent']/@value\" /\u003e \u003c/Data\u003e \u003c/xsl:if\u003e \u003c!-- Time to serve Request --\u003e \u003cxsl:if test=\"data[@name = 'timeM']/@value != '0'\"\u003e \u003cData Name=\"TotalRequestTimeMicroseconds\"\u003e \u003cxsl:attribute name=\"Value\" select=\"data[@name = 'timeM']/@value\" /\u003e \u003c/Data\u003e \u003c/xsl:if\u003e \u003c/WebPage\u003e \u003c/View\u003e \u003c/EventDetail\u003e \u003c/xsl:template\u003e \u003c/xsl:stylesheet\u003e  And after a Refresh Current Step Refresh we see our complete output event\nNote, you should now Save your edited xslt Translation.\nA copy of this XSLT Translation can be found here.\nWe have completed the translation and have completed developing our Apache-SSLBlackBox-V2.0-EVENTS event feed.\nAt this point, this event feed is set up to accept Raw Event data, but it will not automatically process the raw data and hence it will not place events into the Event Store. To have Stroom automatically process Raw Event streams, you will need to enable Processors for this pipeline.\n","categories":"","description":"The following will take you through the process of creating an Event Feed in Stroom.\n","excerpt":"The following will take you through the process of creating an Event …","ref":"/stroom-docs/hugo-docsy/docs/howtos/eventfeeds/createapachehttpdeventfeed/","tags":["processing","feed","httpd"],"title":"Apache HTTPD Event Feed"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/docs/howtos/authentication/","tags":["authentication"],"title":"Authentication"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/authentication/","tags":"","title":"authentication"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/configuration/","tags":"","title":"configuration"},{"body":"Assumptions The following assumptions are used in this document.\n An account with the Administrator Application Permission is currently logged in. We will be adding the user burn We will make this user an Administrator  Add a new user To add a new user, move your cursor to the Tools item of the Main Menu and select to bring up the Tools sub-menu.\nthen move down and select the Users and Groups sub-item to be presented with the Users and Groups configuration window as seen below.\nTo add the user, move the cursor to the New icon in the top left and select it. On selection you will be prompted for a user name. In our case we will enter the user burn.\nand on pressing will be presented with the User configuration window.\nSet the User Application Permissions See Permissions for an explanation of the various Application Permissions a user can have.\nAssign an Administrator Permission As we want the user to be an administrator, select the Administrator Permission check-box\nSet User’s Password We need to set burn's password (which he will need to reset on first login). So, select the button to gain the Reset Password window\nAfter setting a password and pressing the button we get the informational Alert window as per\nand on close of the Alert we are presented again with the User configuration window.\nWe should close this window by pressing the button to be presented with the Users and Groups window with the new user burn added.\nAt this, one can close the Users and Groups configuration window by pressing the button at the bottom right of the window.\n","categories":"","description":"This HOWTO provides the steps to create a user via the Stroom User Interface.\n","excerpt":"This HOWTO provides the steps to create a user via the Stroom User …","ref":"/stroom-docs/hugo-docsy/docs/howtos/authentication/createuserhowto/","tags":["users"],"title":"Create a user"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/dashboard/","tags":"","title":"dashboard"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/docs/howtos/eventfeeds/","tags":["feed"],"title":"Event Feeds"},{"body":"Assumptions The following assumptions are used in this document.\n the user successfully deployed Stroom the following Stroom content packages have been installed  Template Pipelines XML Schemas    Introduction This HOWTO will demonstrate the process by which an Event Processing pipeline for a given Event Source is developed and deployed.\nThe sample event source used will be based on BlueCoat Proxy logs. An extract of BlueCoat logs were sourced from http://log-sharing.dreamhosters.com (a Public Security Log Sharing Site) but modified to add sample user attribution.\nTemplate pipelines are being used to simplify the establishment of this processing pipeline.\nThe sample BlueCoat Proxy log will be transformed into an intermediate simple XML key value pair structure, then into the Stroom Event Logging XML Schema (external link) format.\nEvent Source As mentioned, we will use BlueCoat Proxy logs as a sample event source. Although BlueCoat logs can be customised, the default is to use the W2C Extended Log File Format (ELF). Our sample data set looks like\n#Software: SGOS 3.2.4.28 #Version: 1.0 #Date: 2005-04-27 20:57:09 #Fields: date time time-taken c-ip sc-status s-action sc-bytes cs-bytes cs-method cs-uri-scheme cs-host cs-uri-path cs-uri-query cs-username s-hierarchy s-supplier-name rs(Content-Type) cs(User-Agent) sc-filter-result sc-filter-category x-virus-id s-ip s-sitename x-virus-details x-icap-error-code x-icap-error-details 2005-05-04 17:16:12 1 45.110.2.82 200 TCP_HIT 941 729 GET http www.inmobus.com /wcm/assets/images/imagefileicon.gif - george DIRECT 38.112.92.20 image/gif \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322)\" PROXIED none - 192.16.170.42 SG-HTTP-Service - none - 2005-05-04 17:16:12 2 45.110.2.82 200 TCP_HIT 941 729 GET http www.inmobus.com /wcm/assets/images/imagefileicon.gif - george DIRECT 38.112.92.20 image/gif \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322)\" PROXIED none - 192.16.170.42 SG-HTTP-Service - none - ...  A copy of this sample data source can be found here. Later in this HOWTO, one will be required to upload this file. If you save this file now, ensure the file is saved as a text document with ANSI encoding.\nEstablish the Processing Pipeline We will create the components that make up the processing pipeline for transforming these raw logs into the Stroom Event Logging XML Schema. They will be placed a folder appropriately named BlueCoat in the path System/Event Sources/Proxy. See Folder Creation for details on creating such a folder.\nThere will be four components\n the Event Feed to group the BlueCoat log files the Text Converter to convert the BlueCoat raw logs files into simple XML the XSLT Translation to translate the simple XML formed by the Text Converter into the Stroom Event Logging XML form, and the Processing pipeline which manages how the processing is performed.  All components will have the same Name BlueCoat-Proxy-V1.0-EVENTS. It should be noted that the default Stroom FeedName pattern will not accept this name. One needs to modify the stroom.feedNamePattern stroom property to change the default pattern to ^[a-zA-Z0-9_-\\.]{3,}$. See the HOWTO on System Properties docment to see how to make this change.\nCreate the Event Feed We first select (with a left click) the System/Event Sources/Proxy/BlueCoat folder in the Explorer tab then right click to bring up the New Item selection sub-menu.\nAs we are creating an Event Feed, select the item to have the New Feed configuration window into which we enter BlueCoat-Proxy-V1.0-EVENTS into the Name: entry box\nand press to see the new Event Feed tab\nand it’s corresponding reference in the Explorer display.\nThe configuration items for a Event Feed are\n Description - a description of the feed Classification - the classification or sensitivity of the Event Feed data Reference Feed Flag - to indicate if this is a Reference Feed or not Feed Status - which indicates if we accept data, reject it or silently drop it Stream Type - to indicate if the Feed contains raw log data or reference data Data Encoding - the character encoding of the data being sent to the Feed Context Encoding - the character encoding of context data associated with this Feed Retention Period - the amount of time to retain the Event data  In our example, we will set the above to\n Description - BlueCoat Proxy log data sent in W2C Extended Log File Format (ELFF) Classification - We will leave this blank Reference Feed Flag - We leave the check-box unchecked as this is not a Reference Feed Feed Status - We set to Receive Stream Type - We set to Raw Events as we will be sending batches (streams) of raw event logs Data Encoding - We leave at the default of UTF-8 as this is the proposed character encoding Context Encoding - We leave at the default of UTF-8 as there are no Context Events for this Feed Retention Period - We leave at Forever was we do not want to delete any collected BlueCoat event data.  One should note that the Feed tab as been marked as having unsaved changes. This is indicated by the asterisk character * between the Feed icon and the name of the feed BlueCoat-Proxy-V1.0-EVENTS. We can save the changes to our feed by pressing the Save icon in the top left of the BlueCoat-Proxy-V1.0-EVENTS tab. At this point one should notice two things, the first is that the asterisk has disappeared from the Feed tab and the the second is that the Save icon is now ghosted - .\nCreate the Text Converter We now create the Text Converter for this Feed in a similar fashion to the Event Feed. We first select (with a left click) the System/Event Sources/Proxy/BlueCoat folder in the Explorer tab then right click to bring up the New Item selection sub-menu. As we are creating a Text Converter, select the item to have the New Text Converter configuration window.\nEnter BlueCoat-Proxy-V1.0-EVENTS into the Name: entry box and press the which results in the creation of the Text Converter tab\nand it’s corresponding reference in the Explorer display.\nWe set the configuration for this Text Converter to be\n Description - Simple XML transform for BlueCoat Proxy log data sent in W2C Extended Log File Format (ELFF) Converter Type - We set to Data Splitter was we will be using the Stroom Data Splitter facility to convert the raw log data into simple XML.  Again, press the Save icon to save the configuration items.\nCreate the XSLT Translation We now create the XSLT translation for this Feed in a similar fashion to the Event Feed or Text Converter. We first select (with a left click) the System/Event Sources/Proxy/BlueCoat folder in the Explorer tab then right click to bring up the New Item selection sub-menu. As we are creating a XSLT Translation, select the item to have the New XSLT configuration window.\nEnter BlueCoat-Proxy-V1.0-EVENTS into the Name: entry box and press the which results in the creation of the XSLT Translation tab\nand it’s corresponding reference in the Explorer display.\nWe set the configuration for this XSLT Translation to be\n Description - Transform simple XML of BlueCoat Proxy log data into Stroom Event Logging XML form  Again, press the Save icon to save the configuration items.\nCreate the Pipeline We now create the Pipeline for this Feed in a similar fashion to the Event Feed, Text Converter or XSLT Translation. We first select (with a left click) the System/Event Sources/Proxy/BlueCoat folder in the Explorer tab then right click to bring up the New Item selection sub-menu. As we are creating a Pipeline, select the item to have the New Pipeline configuration window.\nEnter BlueCoat-Proxy-V1.0-EVENTS into the Name: entry box and press the which results in the creation of the Pipeline tab\nand it’s corresponding reference in the Explorer display.\nWe set the configuration for this Pipeline to be\n Description - Processing of XML of BlueCoat Proxy log data into Stroom Event Logging XML Type - We leave as Event Data as this is an Event Data pipeline  Configure Pipeline Structure We now need to configure the Structure of this Pipeline.\nWe do this by selecting the Structure hyper-link of the *BlueCoat-Proxy-V1.0-EVENTS Pipeline tab.\nAt this we see the Pipeline Structure configuration tab\nAs noted in the Assumptions at the start, we have loaded the Template Pipeline content pack, so that we can Inherit a pipeline structure from this content pack and configure it to support this specific feed.\nWe find a template by selecting the Inherit From: entry box labeled to reveal a Choose Item configuration item window.\nSelect the Template Pipelines folder by pressing the icon to the left of the folder to reveal the choice of available templates.\nFor our BlueCoat feed we will select the Event Data (Text) template. This is done by moving the cursor to the relevant line and select via a left click\nthen pressing to see the inherited pipeline structure\nConfigure Pipeline Elements For the purpose of this HOWTO, we are only interested in two of the eleven (11) elements in this pipeline\n the Text Converter labeled dsParser the XSLT Translation labeled translationFilter  We need to assign our BlueCoat-Proxy-V1.0-EVENTS Text Converter and XSLT Translation to these elements respectively.\nText Converter Configuration We do this by first selecting (left click) the dsParser element at which we see the Property sub-window displayed\nWe then select (left click) the textConverter Property Name\nthen press the Edit Property button . At this, the Edit Property configuration window is displayed.\nWe select the Value: entry box labeled to reveal a Choose Item configuration item window.\nWe traverse the folder structure until we can select the BlueCoat-Proxy-V1.0-EVENTS Text Converter as per\nand then press the to see that the Property Value: has been selected.\nand pressing the button of the Edit Property configuration window results in the pipelines dsParser property being set.\nXSLT Translation Configuration We do this by first selecting (left click) the translationFilter element at which we see the Property sub-window displayed\nWe then select (left click) the xslt Property Name\nand following the same steps as for the Text Converter property selection, we assign the BlueCoat-Proxy-V1.0-EVENTS XSLT Translation to the xslt property.\nAt this point, we save these changes by pressing the Save icon .\nAuthoring the Translation We are now ready to author the translation. Close all tabs except for the Welcome and BlueCoat-Proxy-V1.0-EVENTS Feed tabs.\nOn the BlueCoat-Proxy-V1.0-EVENTS Feed tab, select the Data hyper-link to be presented with the Data pane of our tab.\nAlthough we can post our test data set to this feed, we will manually upload it via the Data pane. To do this we press the Upload button in the top Data pane to display the Upload configuration window\nIn a Production situation, where we would post log files to Stroom, we would include certain HTTP Header variables that, as we shall see, will be used as part of the translation. These header variables typically provide situational awareness of the source system sending the events.\nFor our purposes we set the following HTTP Header variables\nEnvironment:Development LogFileName:sampleBluecoat.log MyHost:\"somenode.strmdev00.org\" MyIPaddress:\"192.168.2.220 192.168.122.1\" MyMeta:\"FQDN:somenode.strmdev00.org\\nipaddress:192.168.2.220\\nipaddress_eth0:192.168.2.220\\nipaddress_lo:127.0.0.1\\nipaddress_virbr0:192.168.122.1\\n\" MyNameServer:\"gateway.strmdev00.org.\" MyTZ:+1000 Shar256:056f0d196ffb4bc6c5f3898962f1708886bb48e2f20a81fb93f561f4d16cb2aa System:Site http://log-sharing.dreamhosters.com/ Bluecoat Logs Version:V1.0  These are set by entering them into the Meta Data: entry box.\nHaving done this we select a Stream Type: of Raw Events\nWe leave the Effective: entry box empty as this stream of raw event logs does not have an Effective Date (only Reference Feeds set this).\nAnd we choose our file sampleBluecoat.log, by clicking on the Browse button in the File: entry box, which brings up the brower’s standard file upload selection window. Having selected our file, we see\nOn pressing and Alert pop-up window is presented indicating the file was uploaded\nAgain press to show that the data has been uploaded as a Stream into the BlueCoat-Proxy-V1.0-EVENTS Event Feed.\nThe top pane holds a table of the latest streams that pertain to the feed. We see the one item which is the stream we uploaded. If we select it, we see that a stream summary is also displayed in the centre pane (which shows details of the specific selected feed and associated streams. We also see that the bottom pane displays the data associated with the selected item. In this case, the first lines of content from the BlueCoat sample log file.\nIf we were to select the Meta hyper-link of the lower pane, one would see the metadata Stroom records for this Stream of data.\nYou should see all the HTTP variables we set as part of the Upload step as well as some that Stroom has automatically set.\nWe now switch back to the Data hyper-link before we start to develop the actual translation.\nStepping the Pipeline We will now author the two translation components of the pipeline, the data splitter that will transform our lines of BlueCoat data into a simple xml format and then the XSLT translation that will take this simple xml format and translate it into appropriate Stroom Event Logging XML form.\nWe start by ensuring our Raw Events Data stream is selected and we press the Enter Stepping Mode button on the lower right hand side of the bottom Stream Data pane.\nYou will be prompted to select a pipeline to step with. Choose the BlueCoat-Proxy-V1.0-EVENTS pipeline\nthen press .\nStepping the Pipeline - Source You will be presented with the Source element of the pipeline that shows our selected stream’s raw data.\nWe see two panes here.\nThe top pane displays the Pipeline structure with Source selected (we could refer to this as the stepping pane) and it also displays a step indicator (three colon separated numbers enclosed in square brackets initially the numbers are dashes i.e. [-:-:-] as we have yet to step) and a set of green Stepping Actions. The step indicator and Stepping Actions allows one the step through a log file, selecting data event by event (an event is typically a line, but some events can be multi-line).\nThe bottom pane displays the first page (up to 100 lines) of data along with a set of blue Data Selection Actions. The Data Selection Actions are used to step through the source data 100 lines at a time. When multiple source log files have been aggregated into a single stream, two Data Selection Actions control buttons will be offered. The right hand one will allow a user to step though the source data as before, but the left hand set of control buttons allows one to step between files from the aggregated event log files.\nStepping the Pipeline - dsParser We now select the dsParser pipeline element that results in the window below\nThis window is made up of four panes.\nThe top pane remains the same - a display of the pipeline structure and the step indicator and green Stepping Actions.\nThe next pane down is the editing pane for the Text Converter. This pane is used to edit the text converter that converts our line based BlueCoat Proxy logs into a XML format. We make use of the Stroom Data Splitter facility to perform this transformation. See here for complete details on the data splitter.\nThe lower two panes are the input and output displays for the text converter.\nThe authoring of this data splitter translation is outside the scope of this HOWTO. It is recommended that one reads up on the Data Splitter and review the various samples found in the Stroom Context packs published, or the Pull Requests of https://github.com/gchq/stroom-content.\nFor the purpose of this HOWTO, the Datasplitter appears below. The author believes the comments should support the understanding of the transformation.\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cdataSplitter bufferSize=\"5000000\" xmlns=\"data-splitter:3\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"data-splitter:3 file://data-splitter-v3.0.xsd\" version=\"3.0\" ignoreErrors=\"true\"\u003e \u003c!-- This datasplitter gains the Software and and Proxy version strings along with the log field names from the comments section of the log file. That is from the lines ... #Software: SGOS 3.2.4.28 #Version: 1.0 #Date: 2005-04-27 20:57:09 #Fields: date time time-taken c-ip sc-status s-action sc-bytes cs-bytes cs-method ... x-icap-error-code x-icap-error-details We use the Field values as the header for the subsequent log fields --\u003e \u003c!-- Match the software comment line and save it in _bc_software --\u003e \u003cregex id=\"software\" pattern=\"^#Software: (.+) ?\\n*\"\u003e \u003cdata name=\"_bc_software\" value=\"$1\" /\u003e \u003c/regex\u003e \u003c!-- Match the version comment line and save it in _bc_version --\u003e \u003cregex id=\"version\" pattern=\"^#Version: (.+) ?\\n*\"\u003e \u003cdata name=\"_bc_version\" value=\"$1\" /\u003e \u003c/regex\u003e \u003c!-- Match against a Fields: header comment and save all the field names in a headings --\u003e \u003cregex id=\"heading\" pattern=\"^#Fields: (.+) ?\\n*\"\u003e \u003cgroup value=\"$1\"\u003e \u003cregex pattern=\"^(\\S+) ?\\n*\"\u003e \u003cvar id=\"headings\" /\u003e \u003c/regex\u003e \u003c/group\u003e \u003c/regex\u003e \u003c!-- Skip all other comment lines --\u003e \u003cregex pattern=\"^#.+\\n*\"\u003e \u003cvar id=\"ignorea\" /\u003e \u003c/regex\u003e \u003c!-- We now match all other lines, applying the headings captured at the start of the file to each field value --\u003e \u003cregex id=\"body\" pattern=\"^[^#].+\\n*\"\u003e \u003cgroup\u003e \u003cregex pattern=\"^\u0026#34;([^\u0026#34;]*)\u0026#34; ?\\n*\"\u003e \u003cdata name=\"$headings$1\" value=\"$1\" /\u003e \u003c/regex\u003e \u003cregex pattern=\"^([^ ]+) *\\n*\"\u003e \u003cdata name=\"$headings$1\" value=\"$1\" /\u003e \u003c/regex\u003e \u003c/group\u003e \u003c/regex\u003e \u003c!-- --\u003e \u003c/dataSplitter\u003e  It should be entered into the Text Converter’s editing pane as per\nA copy of this DataSplitter can be found here.\nAs mentioned earlier, to step the translation, one uses the green Stepping Actions.\nThe actions are\n - progress the transformation to the first line of the translation input - progress the transformation one step backward - progress the transformation one step forward - progress the transformation to the end of the translation input - refresh the transformation based on the current translation input  So, if one was to press the stepping action we would be presented with\nWe see that the input pane has the first line of input from our sample file and the output pane has an XML record structure where we have defined a data element with the name attribute of bc_software and it’s value attribute of SGOS 3.2.4.28. The definition of the record structure can be found in the System/XML Schemas/records folder.\nThis is the result of the code in our editor\n\u003c!-- Match the software comment line and save it in _bc_software --\u003e \u003cregex id=\"software\" pattern=\"^#Software: (.+) ?\\n*\"\u003e \u003cdata name=\"_bc_software\" value=\"$1\" /\u003e \u003c/regex\u003e  If one presses the stepping action again, we see that we have moved to the second line of the input file with the resultant output of a data element with the name attribute of bc_version and it’s value attribute of 1.0.\nStepping forward once more causes the translation to ignore the Date comment line, define a Data Splitter $headings variable from the Fields comment line and transform the first line of actual event data.\nWe see that a \u003crecord\u003e element has been formed with multiple key value pair \u003cdata\u003e elements where the name attribute is the key and the value attribute the value. You will note that the keys have been taken from the Fields comment line which where placed in the $headings variable.\nYou should also take note that the stepping indicator has been incrementing the last number, so at this point it is displaying\n[1:1:3]  The general form of this indicator is\n'[' streamId ':' subStreamId ':' recordNo ']'  where\n streamId - is the stream ID and won’t change when stepping through the selected stream, subStreamId - is the sub stream ID. When Stroom aggregates multiple event sources for a feed, it aggregates multiple input files and this is, in effect, the file number. recordNo - is the record number within the sub stream.  One can double click on either the subStreamId or recordNo entry and enter a new value. This allows you to jump around a stream rather than just relying on first, previous, next and last movements.\nHovering the mouse over the stepping indicator will change the cursor to a hand pointer. Selecting (by a left click) the recordNo will allow you to edit it’s value (and the other values for that matter). You will see the display change from\nto If we change the record number from 3 to 12 then either press Enter or press the action we see\nand note that a new record has been processed in the input and output panes. Further, if one steps back to the Source element of the pipeline to view the raw source file, we see that the highlighted current line is the 12th line of processed data. It is the 10th actual bluecoat event, but remember the #Software, #Version lines are considered as processed data (2+10 = 12). Also noted that the #Date and #Fields lines are not considered processed data, and hence do not contribute to the recordNo value.\nIf we select the dsParser pipeline element then press the action we see the recordNo jump to 31 which is the last processed line of our sample log file.\nStepping the Pipeline - translationFilter We now select the translationFilter pipeline element that results in\nAs for the dsParser, this window is made up of four panes.\nThe top pane remains the same - a display of the pipeline structure and the step indicator and green Stepping Actions.\nThe next pane down is the editing pane for the Translation Filter. This pane is used to edit an xslt translation that converts our simple key value pair \u003crecords\u003e XML structure into another XML form.\nThe lower two panes are the input and output displays for the xslt translation. You will note that the input and output displays are identical for a null xslt translation is effectively a direct copy.\nIn this HOWTO we will transform the \u003crecords\u003e XML structure into the GCHQ Stroom Event Logging XML Schema form which is documented here.\nThe authoring of this xslt translation is outside the scope of this HOWTO, as is the use of the Stroom XML Schema. It is recommended that one reads up on XSLT Conversion and the Stroom Event Logging XML Schema and review the various samples found in the Stroom Context packs published, or the Pull Requests of https://github.com/gchq/stroom-content.\nWe will build the translation in steps. We enter an initial portion of our xslt transformation that just consumes the Software and Version key values and converts the date and time values (which are in UTC) into the EventTime/TimeCreated element. This code segment is\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e \u003cxsl:stylesheet xpath-default-namespace=\"records:2\" xmlns=\"event-logging:3\" xmlns:stroom=\"stroom\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" version=\"3.0\"\u003e \u003c!-- Bluecoat Proxy logs in W2C Extended Log File Format (ELF) --\u003e \u003c!-- Ingest the record key value pair elements --\u003e \u003cxsl:template match=\"records\"\u003e \u003cEvents xsi:schemaLocation=\"event-logging:3 file://event-logging-v3.2.4.xsd\" Version=\"3.2.4\"\u003e \u003cxsl:apply-templates /\u003e \u003c/Events\u003e \u003c/xsl:template\u003e \u003c!-- Main record template for single event --\u003e \u003cxsl:template match=\"record\"\u003e \u003cxsl:choose\u003e \u003c!-- Store the Software and Version information of the Bluecoat log file for use in the Event Source elements which are processed later --\u003e \u003cxsl:when test=\"data[@name='_bc_software']\"\u003e \u003cxsl:value-of select=\"stroom:put('_bc_software', data[@name='_bc_software']/@value)\" /\u003e \u003c/xsl:when\u003e \u003cxsl:when test=\"data[@name='_bc_version']\"\u003e \u003cxsl:value-of select=\"stroom:put('_bc_version', data[@name='_bc_version']/@value)\" /\u003e \u003c/xsl:when\u003e \u003c!-- Process the event logs --\u003e \u003cxsl:otherwise\u003e \u003cEvent\u003e \u003cxsl:call-template name=\"event_time\" /\u003e \u003c/Event\u003e \u003c/xsl:otherwise\u003e \u003c/xsl:choose\u003e \u003c/xsl:template\u003e \u003c!-- Time --\u003e \u003cxsl:template name=\"event_time\"\u003e \u003cEventTime\u003e \u003cTimeCreated\u003e \u003cxsl:value-of select=\"concat(data[@name = 'date']/@value,'T',data[@name='time']/@value,'.000Z')\" /\u003e \u003c/TimeCreated\u003e \u003c/EventTime\u003e \u003c/xsl:template\u003e \u003c/xsl:stylesheet\u003e  After entering this translation and pressing the action shows the display\nNote that this is the 31st record, so if we were to jump to the first record using the action, we see that the input and output change appropriately.\nYou will note that there is no Event element in the output pane as the record template in our xslt translation above is only storing the input’s key value (_bc_software’s value).\nFurther note that the BlueCoat_Proxy-V1.0-EVENTS tab has a star in front of it and also the Save icon is highlighted. This indicates that a component of the pipeline needs to be saved. In this case, the XSLT translation.\nBy pressing the Save icon, you will save the XSLT translation as it currently stands and both the star will be removed from the tab and the Save icon will no longer be highlighted.\nWe next extend out translation by authoring a event_source template to form an appropriate Stroom Event Logging EventSource element structure. Thus our translation now is\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e \u003cxsl:stylesheet xpath-default-namespace=\"records:2\" xmlns=\"event-logging:3\" xmlns:stroom=\"stroom\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" version=\"3.0\"\u003e \u003c!-- Bluecoat Proxy logs in W2C Extended Log File Format (ELF) --\u003e \u003c!-- Ingest the record key value pair elements --\u003e \u003cxsl:template match=\"records\"\u003e \u003cEvents xsi:schemaLocation=\"event-logging:3 file://event-logging-v3.2.4.xsd\" Version=\"3.2.4\"\u003e \u003cxsl:apply-templates /\u003e \u003c/Events\u003e \u003c/xsl:template\u003e \u003c!-- Main record template for single event --\u003e \u003cxsl:template match=\"record\"\u003e \u003cxsl:choose\u003e \u003c!-- Store the Software and Version information of the Bluecoat log file for use in the Event Source elements which are processed later --\u003e \u003cxsl:when test=\"data[@name='_bc_software']\"\u003e \u003cxsl:value-of select=\"stroom:put('_bc_software', data[@name='_bc_software']/@value)\" /\u003e \u003c/xsl:when\u003e \u003cxsl:when test=\"data[@name='_bc_version']\"\u003e \u003cxsl:value-of select=\"stroom:put('_bc_version', data[@name='_bc_version']/@value)\" /\u003e \u003c/xsl:when\u003e \u003c!-- Process the event logs --\u003e \u003cxsl:otherwise\u003e \u003cEvent\u003e \u003cxsl:call-template name=\"event_time\" /\u003e \u003cxsl:call-template name=\"event_source\" /\u003e \u003c/Event\u003e \u003c/xsl:otherwise\u003e \u003c/xsl:choose\u003e \u003c/xsl:template\u003e \u003c!-- Time --\u003e \u003cxsl:template name=\"event_time\"\u003e \u003cEventTime\u003e \u003cTimeCreated\u003e \u003cxsl:value-of select=\"concat(data[@name = 'date']/@value,'T',data[@name='time']/@value,'.000Z')\" /\u003e \u003c/TimeCreated\u003e \u003c/EventTime\u003e \u003c/xsl:template\u003e \u003c!-- Template for event source--\u003e \u003cxsl:template name=\"event_source\"\u003e \u003c!-- We extract some situational awareness information that the posting script includes when posting the event data --\u003e \u003cxsl:variable name=\"_mymeta\" select=\"translate(stroom:meta('MyMeta'),'\u0026quot;', '')\" /\u003e \u003c!-- Form the EventSource node --\u003e \u003cEventSource\u003e \u003cSystem\u003e \u003cName\u003e \u003cxsl:value-of select=\"stroom:meta('System')\" /\u003e \u003c/Name\u003e \u003cEnvironment\u003e \u003cxsl:value-of select=\"stroom:meta('Environment')\" /\u003e \u003c/Environment\u003e \u003c/System\u003e \u003cGenerator\u003e \u003cxsl:variable name=\"gen\"\u003e \u003cxsl:if test=\"stroom:get('_bc_software')\"\u003e \u003cxsl:value-of select=\"concat(' Software: ', stroom:get('_bc_software'))\" /\u003e \u003c/xsl:if\u003e \u003cxsl:if test=\"stroom:get('_bc_version')\"\u003e \u003cxsl:value-of select=\"concat(' Version: ', stroom:get('_bc_version'))\" /\u003e \u003c/xsl:if\u003e \u003c/xsl:variable\u003e \u003cxsl:value-of select=\"concat('Bluecoat', $gen)\" /\u003e \u003c/Generator\u003e \u003cxsl:if test=\"data[@name='s-computername'] or data[@name='s-ip']\"\u003e \u003cDevice\u003e \u003cxsl:if test=\"data[@name='s-computername']\"\u003e \u003cName\u003e \u003cxsl:value-of select=\"data[@name='s-computername']/@value\" /\u003e \u003c/Name\u003e \u003c/xsl:if\u003e \u003cxsl:if test=\"data[@name='s-ip']\"\u003e \u003cIPAddress\u003e \u003cxsl:value-of select=\" data[@name='s-ip']/@value\" /\u003e \u003c/IPAddress\u003e \u003c/xsl:if\u003e \u003cxsl:if test=\"data[@name='s-sitename']\"\u003e \u003cData Name=\"ServiceType\" Value=\"{data[@name='s-sitename']/@value}\" /\u003e \u003c/xsl:if\u003e \u003c/Device\u003e \u003c/xsl:if\u003e \u003c!-- --\u003e \u003cClient\u003e \u003cxsl:if test=\"data[@name='c-ip']/@value != '-'\"\u003e \u003cIPAddress\u003e \u003cxsl:value-of select=\"data[@name='c-ip']/@value\" /\u003e \u003c/IPAddress\u003e \u003c/xsl:if\u003e \u003c!-- Remote Port Number --\u003e \u003cxsl:if test=\"data[@name='c-port']/@value !='-'\"\u003e \u003cPort\u003e \u003cxsl:value-of select=\"data[@name='c-port']/@value\" /\u003e \u003c/Port\u003e \u003c/xsl:if\u003e \u003c/Client\u003e \u003c!-- --\u003e \u003cServer\u003e \u003cHostName\u003e \u003cxsl:value-of select=\"data[@name='cs-host']/@value\" /\u003e \u003c/HostName\u003e \u003c/Server\u003e \u003c!-- --\u003e \u003cxsl:variable name=\"user\"\u003e \u003cxsl:value-of select=\"data[@name='cs-user']/@value\" /\u003e \u003cxsl:value-of select=\"data[@name='cs-username']/@value\" /\u003e \u003cxsl:value-of select=\"data[@name='cs-userdn']/@value\" /\u003e \u003c/xsl:variable\u003e \u003cxsl:if test=\"$user !='-'\"\u003e \u003cUser\u003e \u003cId\u003e \u003cxsl:value-of select=\"$user\" /\u003e \u003c/Id\u003e \u003c/User\u003e \u003c/xsl:if\u003e \u003cData Name=\"MyMeta\"\u003e \u003cxsl:attribute name=\"Value\" select=\"$_mymeta\" /\u003e \u003c/Data\u003e \u003c/EventSource\u003e \u003c/xsl:template\u003e \u003c/xsl:stylesheet\u003e  Stepping to the 3 record (the first real data record in our sample log) will reveal that our output pane has gained an EventSource element.\nNote also, that our Save icon is also highlighted, so we should at some point save the extensions to our translation.\nThe complete translation now follows. A copy of the XSLT translation can be found here.\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e \u003cxsl:stylesheet xpath-default-namespace=\"records:2\" xmlns=\"event-logging:3\" xmlns:stroom=\"stroom\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" version=\"3.0\"\u003e \u003c!-- Bluecoat Proxy logs in W2C Extended Log File Format (ELF) --\u003e \u003c!-- Ingest the record key value pair elements --\u003e \u003cxsl:template match=\"records\"\u003e \u003cEvents xsi:schemaLocation=\"event-logging:3 file://event-logging-v3.2.4.xsd\" Version=\"3.2.4\"\u003e \u003cxsl:apply-templates /\u003e \u003c/Events\u003e \u003c/xsl:template\u003e \u003c!-- Main record template for single event --\u003e \u003cxsl:template match=\"record\"\u003e \u003cxsl:choose\u003e \u003c!-- Store the Software and Version information of the Bluecoat log file for use in the Event Source elements which are processed later --\u003e \u003cxsl:when test=\"data[@name='_bc_software']\"\u003e \u003cxsl:value-of select=\"stroom:put('_bc_software', data[@name='_bc_software']/@value)\" /\u003e \u003c/xsl:when\u003e \u003cxsl:when test=\"data[@name='_bc_version']\"\u003e \u003cxsl:value-of select=\"stroom:put('_bc_version', data[@name='_bc_version']/@value)\" /\u003e \u003c/xsl:when\u003e \u003c!-- Process the event logs --\u003e \u003cxsl:otherwise\u003e \u003cEvent\u003e \u003cxsl:call-template name=\"event_time\" /\u003e \u003cxsl:call-template name=\"event_source\" /\u003e \u003cxsl:call-template name=\"event_detail\" /\u003e \u003c/Event\u003e \u003c/xsl:otherwise\u003e \u003c/xsl:choose\u003e \u003c/xsl:template\u003e \u003c!-- Time --\u003e \u003cxsl:template name=\"event_time\"\u003e \u003cEventTime\u003e \u003cTimeCreated\u003e \u003cxsl:value-of select=\"concat(data[@name = 'date']/@value,'T',data[@name='time']/@value,'.000Z')\" /\u003e \u003c/TimeCreated\u003e \u003c/EventTime\u003e \u003c/xsl:template\u003e \u003c!-- Template for event source--\u003e \u003cxsl:template name=\"event_source\"\u003e \u003c!-- We extract some situational awareness information that the posting script includes when posting the event data --\u003e \u003cxsl:variable name=\"_mymeta\" select=\"translate(stroom:meta('MyMeta'),'\u0026quot;', '')\" /\u003e \u003c!-- Form the EventSource node --\u003e \u003cEventSource\u003e \u003cSystem\u003e \u003cName\u003e \u003cxsl:value-of select=\"stroom:meta('System')\" /\u003e \u003c/Name\u003e \u003cEnvironment\u003e \u003cxsl:value-of select=\"stroom:meta('Environment')\" /\u003e \u003c/Environment\u003e \u003c/System\u003e \u003cGenerator\u003e \u003cxsl:variable name=\"gen\"\u003e \u003cxsl:if test=\"stroom:get('_bc_software')\"\u003e \u003cxsl:value-of select=\"concat(' Software: ', stroom:get('_bc_software'))\" /\u003e \u003c/xsl:if\u003e \u003cxsl:if test=\"stroom:get('_bc_version')\"\u003e \u003cxsl:value-of select=\"concat(' Version: ', stroom:get('_bc_version'))\" /\u003e \u003c/xsl:if\u003e \u003c/xsl:variable\u003e \u003cxsl:value-of select=\"concat('Bluecoat', $gen)\" /\u003e \u003c/Generator\u003e \u003cxsl:if test=\"data[@name='s-computername'] or data[@name='s-ip']\"\u003e \u003cDevice\u003e \u003cxsl:if test=\"data[@name='s-computername']\"\u003e \u003cName\u003e \u003cxsl:value-of select=\"data[@name='s-computername']/@value\" /\u003e \u003c/Name\u003e \u003c/xsl:if\u003e \u003cxsl:if test=\"data[@name='s-ip']\"\u003e \u003cIPAddress\u003e \u003cxsl:value-of select=\" data[@name='s-ip']/@value\" /\u003e \u003c/IPAddress\u003e \u003c/xsl:if\u003e \u003cxsl:if test=\"data[@name='s-sitename']\"\u003e \u003cData Name=\"ServiceType\" Value=\"{data[@name='s-sitename']/@value}\" /\u003e \u003c/xsl:if\u003e \u003c/Device\u003e \u003c/xsl:if\u003e \u003c!-- --\u003e \u003cClient\u003e \u003cxsl:if test=\"data[@name='c-ip']/@value != '-'\"\u003e \u003cIPAddress\u003e \u003cxsl:value-of select=\"data[@name='c-ip']/@value\" /\u003e \u003c/IPAddress\u003e \u003c/xsl:if\u003e \u003c!-- Remote Port Number --\u003e \u003cxsl:if test=\"data[@name='c-port']/@value !='-'\"\u003e \u003cPort\u003e \u003cxsl:value-of select=\"data[@name='c-port']/@value\" /\u003e \u003c/Port\u003e \u003c/xsl:if\u003e \u003c/Client\u003e \u003c!-- --\u003e \u003cServer\u003e \u003cHostName\u003e \u003cxsl:value-of select=\"data[@name='cs-host']/@value\" /\u003e \u003c/HostName\u003e \u003c/Server\u003e \u003c!-- --\u003e \u003cxsl:variable name=\"user\"\u003e \u003cxsl:value-of select=\"data[@name='cs-user']/@value\" /\u003e \u003cxsl:value-of select=\"data[@name='cs-username']/@value\" /\u003e \u003cxsl:value-of select=\"data[@name='cs-userdn']/@value\" /\u003e \u003c/xsl:variable\u003e \u003cxsl:if test=\"$user !='-'\"\u003e \u003cUser\u003e \u003cId\u003e \u003cxsl:value-of select=\"$user\" /\u003e \u003c/Id\u003e \u003c/User\u003e \u003c/xsl:if\u003e \u003cData Name=\"MyMeta\"\u003e \u003cxsl:attribute name=\"Value\" select=\"$_mymeta\" /\u003e \u003c/Data\u003e \u003c/EventSource\u003e \u003c/xsl:template\u003e \u003c!-- Event detail --\u003e \u003cxsl:template name=\"event_detail\"\u003e \u003cEventDetail\u003e \u003c!-- We model Proxy events as either Receive or Send events depending on the method. We make use of the Receive/Send sub-elements Source/Destination to map the Client/Destination Proxy values and the Payload sub-element to map the URL and other details of the activity. If we have a query, we model it as a Criteria --\u003e \u003cTypeId\u003e \u003cxsl:value-of select=\"concat('Bluecoat-', data[@name='cs-method']/@value, '-', data[@name='cs-uri-scheme']/@value)\" /\u003e \u003cxsl:if test=\"data[@name='cs-uri-query']/@value != '-'\"\u003e-Query\u003c/xsl:if\u003e \u003c/TypeId\u003e \u003cxsl:choose\u003e \u003cxsl:when test=\"matches(data[@name='cs-method']/@value, 'GET|OPTIONS|HEAD')\"\u003e \u003cDescription\u003eReceipt of information from a Resource via Proxy\u003c/Description\u003e \u003cReceive\u003e \u003cxsl:call-template name=\"setupParticipants\" /\u003e \u003cxsl:call-template name=\"setPayload\" /\u003e \u003cxsl:call-template name=\"setOutcome\" /\u003e \u003c/Receive\u003e \u003c/xsl:when\u003e \u003cxsl:otherwise\u003e \u003cDescription\u003eTransmission of information to a Resource via Proxy\u003c/Description\u003e \u003cSend\u003e \u003cxsl:call-template name=\"setupParticipants\" /\u003e \u003cxsl:call-template name=\"setPayload\" /\u003e \u003cxsl:call-template name=\"setOutcome\" /\u003e \u003c/Send\u003e \u003c/xsl:otherwise\u003e \u003c/xsl:choose\u003e \u003c/EventDetail\u003e \u003c/xsl:template\u003e \u003c!-- Establish the Source and Destination nodes --\u003e \u003cxsl:template name=\"setupParticipants\"\u003e \u003cSource\u003e \u003cDevice\u003e \u003cxsl:if test=\"data[@name='c-ip']/@value != '-'\"\u003e \u003cIPAddress\u003e \u003cxsl:value-of select=\"data[@name='c-ip']/@value\" /\u003e \u003c/IPAddress\u003e \u003c/xsl:if\u003e \u003c!-- Remote Port Number --\u003e \u003cxsl:if test=\"data[@name='c-port']/@value !='-'\"\u003e \u003cPort\u003e \u003cxsl:value-of select=\"data[@name='c-port']/@value\" /\u003e \u003c/Port\u003e \u003c/xsl:if\u003e \u003c/Device\u003e \u003c/Source\u003e \u003cDestination\u003e \u003cDevice\u003e \u003cHostName\u003e \u003cxsl:value-of select=\"data[@name='cs-host']/@value\" /\u003e \u003c/HostName\u003e \u003c/Device\u003e \u003c/Destination\u003e \u003c/xsl:template\u003e \u003c!-- Define the Payload node --\u003e \u003cxsl:template name=\"setPayload\"\u003e \u003cPayload\u003e \u003cxsl:if test=\"data[@name='cs-uri-query']/@value != '-'\"\u003e \u003cCriteria\u003e \u003cDataSources\u003e \u003cDataSource\u003e \u003cxsl:value-of select=\"concat(data[@name='cs-uri-scheme']/@value, '://', data[@name='cs-host']/@value)\" /\u003e \u003cxsl:if test=\"data[@name='cs-uri-path']/@value != '/'\"\u003e \u003cxsl:value-of select=\"data[@name='cs-uri-path']/@value\" /\u003e \u003c/xsl:if\u003e \u003c/DataSource\u003e \u003c/DataSources\u003e \u003cQuery\u003e \u003cRaw\u003e \u003cxsl:value-of select=\"data[@name='cs-uri-query']/@value\" /\u003e \u003c/Raw\u003e \u003c/Query\u003e \u003c/Criteria\u003e \u003c/xsl:if\u003e \u003cResource\u003e \u003c!-- Check for auth groups the URL belongs to --\u003e \u003cxsl:variable name=\"authgroups\"\u003e \u003cxsl:value-of select=\"data[@name='cs-auth-group']/@value\" /\u003e \u003cxsl:if test=\"exists(data[@name='cs-auth-group']) and exists(data[@name='cs-auth-groups'])\"\u003e,\u003c/xsl:if\u003e \u003cxsl:value-of select=\"data[@name='cs-auth-groups']/@value\" /\u003e \u003c/xsl:variable\u003e \u003cxsl:choose\u003e \u003cxsl:when test=\"contains($authgroups, ',')\"\u003e \u003cGroups\u003e \u003cxsl:for-each select=\"tokenize($authgroups, ',')\"\u003e \u003cGroup\u003e \u003cId\u003e \u003cxsl:value-of select=\".\" /\u003e \u003c/Id\u003e \u003c/Group\u003e \u003c/xsl:for-each\u003e \u003c/Groups\u003e \u003c/xsl:when\u003e \u003cxsl:when test=\"$authgroups != '-' and $authgroups != ''\"\u003e \u003cGroups\u003e \u003cGroup\u003e \u003cId\u003e \u003cxsl:value-of select=\"$authgroups\" /\u003e \u003c/Id\u003e \u003c/Group\u003e \u003c/Groups\u003e \u003c/xsl:when\u003e \u003c/xsl:choose\u003e \u003c!-- Re-form the URL --\u003e \u003cURL\u003e \u003cxsl:value-of select=\"concat(data[@name='cs-uri-scheme']/@value, '://', data[@name='cs-host']/@value)\" /\u003e \u003cxsl:if test=\"data[@name='cs-uri-path']/@value != '/'\"\u003e \u003cxsl:value-of select=\"data[@name='cs-uri-path']/@value\" /\u003e \u003c/xsl:if\u003e \u003c/URL\u003e \u003cHTTPMethod\u003e \u003cxsl:value-of select=\"data[@name='cs-method']/@value\" /\u003e \u003c/HTTPMethod\u003e \u003cxsl:if test=\"data[@name='cs(User-Agent)']/@value !='-'\"\u003e \u003cUserAgent\u003e \u003cxsl:value-of select=\"data[@name='cs(User-Agent)']/@value\" /\u003e \u003c/UserAgent\u003e \u003c/xsl:if\u003e \u003c!-- Inbound activity --\u003e \u003cxsl:if test=\"data[@name='sc-bytes']/@value !='-'\"\u003e \u003cInboundSize\u003e \u003cxsl:value-of select=\"data[@name='sc-bytes']/@value\" /\u003e \u003c/InboundSize\u003e \u003c/xsl:if\u003e \u003cxsl:if test=\"data[@name='sc-bodylength']/@value !='-'\"\u003e \u003cInboundContentSize\u003e \u003cxsl:value-of select=\"data[@name='sc-bodylength']/@value\" /\u003e \u003c/InboundContentSize\u003e \u003c/xsl:if\u003e \u003c!-- Outbound activity --\u003e \u003cxsl:if test=\"data[@name='cs-bytes']/@value !='-'\"\u003e \u003cOutboundSize\u003e \u003cxsl:value-of select=\"data[@name='cs-bytes']/@value\" /\u003e \u003c/OutboundSize\u003e \u003c/xsl:if\u003e \u003cxsl:if test=\"data[@name='cs-bodylength']/@value !='-'\"\u003e \u003cOutboundContentSize\u003e \u003cxsl:value-of select=\"data[@name='cs-bodylength']/@value\" /\u003e \u003c/OutboundContentSize\u003e \u003c/xsl:if\u003e \u003c!-- Miscellaneous --\u003e \u003cRequestTime\u003e \u003cxsl:value-of select=\"data[@name='time-taken']/@value\" /\u003e \u003c/RequestTime\u003e \u003cResponseCode\u003e \u003cxsl:value-of select=\"data[@name='sc-status']/@value\" /\u003e \u003c/ResponseCode\u003e \u003cxsl:if test=\"data[@name='rs(Content-Type)']/@value != '-'\"\u003e \u003cMimeType\u003e \u003cxsl:value-of select=\"data[@name='rs(Content-Type)']/@value\" /\u003e \u003c/MimeType\u003e \u003c/xsl:if\u003e \u003cxsl:if test=\"data[@name='cs-categories']/@value != 'none' or data[@name='sc-filter-category']/@value != 'none'\"\u003e \u003cCategory\u003e \u003cxsl:value-of select=\"data[@name='cs-categories']/@value\" /\u003e \u003cxsl:value-of select=\"data[@name='sc-filter-category']/@value\" /\u003e \u003c/Category\u003e \u003c/xsl:if\u003e \u003c!-- Take up other items as data elements --\u003e \u003cxsl:apply-templates select=\"data[@name='s-action']\" /\u003e \u003cxsl:apply-templates select=\"data[@name='cs-uri-scheme']\" /\u003e \u003cxsl:apply-templates select=\"data[@name='s-hierarchy']\" /\u003e \u003cxsl:apply-templates select=\"data[@name='sc-filter-result']\" /\u003e \u003cxsl:apply-templates select=\"data[@name='x-virus-id']\" /\u003e \u003cxsl:apply-templates select=\"data[@name='x-virus-details']\" /\u003e \u003cxsl:apply-templates select=\"data[@name='x-icap-error-code']\" /\u003e \u003cxsl:apply-templates select=\"data[@name='x-icap-error-details']\" /\u003e \u003c/Resource\u003e \u003c/Payload\u003e \u003c/xsl:template\u003e \u003c!-- Generic Data capture template so we capture all other Bluecoat objects not already consumed --\u003e \u003cxsl:template match=\"data\"\u003e \u003cxsl:if test=\"@value != '-'\"\u003e \u003cData Name=\"{@name}\" Value=\"{@value}\" /\u003e \u003c/xsl:if\u003e \u003c/xsl:template\u003e \u003c!-- Set up the Outcome node. We only set an Outcome for an error state. The absence of an Outcome infers success --\u003e \u003cxsl:template name=\"setOutcome\"\u003e \u003cxsl:choose\u003e \u003c!-- Favour squid specific errors first --\u003e \u003cxsl:when test=\"data[@name='sc-status']/@value \u003e 500\"\u003e \u003cOutcome\u003e \u003cSuccess\u003efalse\u003c/Success\u003e \u003cDescription\u003e \u003cxsl:call-template name=\"responseCodeDesc\"\u003e \u003cxsl:with-param name=\"code\" select=\"data[@name='sc-status']/@value\" /\u003e \u003c/xsl:call-template\u003e \u003c/Description\u003e \u003c/Outcome\u003e \u003c/xsl:when\u003e \u003c!-- Now check for 'normal' errors --\u003e \u003cxsl:when test=\"data[@name='sc-status']/@value \u003e 400\"\u003e \u003cOutcome\u003e \u003cSuccess\u003efalse\u003c/Success\u003e \u003cDescription\u003e \u003cxsl:call-template name=\"responseCodeDesc\"\u003e \u003cxsl:with-param name=\"code\" select=\"data[@name='sc-status']/@value\" /\u003e \u003c/xsl:call-template\u003e \u003c/Description\u003e \u003c/Outcome\u003e \u003c/xsl:when\u003e \u003c/xsl:choose\u003e \u003c/xsl:template\u003e \u003c!-- Response Code map to Descriptions --\u003e \u003cxsl:template name=\"responseCodeDesc\"\u003e \u003cxsl:param name=\"code\" /\u003e \u003cxsl:choose\u003e \u003c!-- Informational --\u003e \u003cxsl:when test=\"$code = 100\"\u003eContinue\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 101\"\u003eSwitching Protocols\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 102\"\u003eProcessing\u003c/xsl:when\u003e \u003c!-- Successful Transaction --\u003e \u003cxsl:when test=\"$code = 200\"\u003eOK\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 201\"\u003eCreated\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 202\"\u003eAccepted\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 203\"\u003eNon-Authoritative Information\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 204\"\u003eNo Content\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 205\"\u003eReset Content\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 206\"\u003ePartial Content\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 207\"\u003eMulti Status\u003c/xsl:when\u003e \u003c!-- Redirection --\u003e \u003cxsl:when test=\"$code = 300\"\u003eMultiple Choices\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 301\"\u003eMoved Permanently\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 302\"\u003eMoved Temporarily\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 303\"\u003eSee Other\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 304\"\u003eNot Modified\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 305\"\u003eUse Proxy\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 307\"\u003eTemporary Redirect\u003c/xsl:when\u003e \u003c!-- Client Error --\u003e \u003cxsl:when test=\"$code = 400\"\u003eBad Request\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 401\"\u003eUnauthorized\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 402\"\u003ePayment Required\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 403\"\u003eForbidden\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 404\"\u003eNot Found\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 405\"\u003eMethod Not Allowed\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 406\"\u003eNot Acceptable\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 407\"\u003eProxy Authentication Required\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 408\"\u003eRequest Timeout\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 409\"\u003eConflict\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 410\"\u003eGone\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 411\"\u003eLength Required\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 412\"\u003ePrecondition Failed\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 413\"\u003eRequest Entity Too Large\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 414\"\u003eRequest URI Too Large\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 415\"\u003eUnsupported Media Type\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 416\"\u003eRequest Range Not Satisfiable\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 417\"\u003eExpectation Failed\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 422\"\u003eUnprocessable Entity\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 424\"\u003eLocked/Failed Dependency\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 433\"\u003eUnprocessable Entity\u003c/xsl:when\u003e \u003c!-- Server Error --\u003e \u003cxsl:when test=\"$code = 500\"\u003eInternal Server Error\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 501\"\u003eNot Implemented\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 502\"\u003eBad Gateway\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 503\"\u003eService Unavailable\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 504\"\u003eGateway Timeout\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 505\"\u003eHTTP Version Not Supported\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 507\"\u003eInsufficient Storage\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 600\"\u003eSquid: header parsing error\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 601\"\u003eSquid: header size overflow detected while parsing/roundcube: software configuration error\u003c/xsl:when\u003e \u003cxsl:when test=\"$code = 603\"\u003eroundcube: invalid authorization\u003c/xsl:when\u003e \u003cxsl:otherwise\u003e \u003cxsl:value-of select=\"concat('Unknown Code:', $code)\" /\u003e \u003c/xsl:otherwise\u003e \u003c/xsl:choose\u003e \u003c/xsl:template\u003e \u003c/xsl:stylesheet\u003e  Refreshing the current event will show the output pane contains\n\u003c?xml version=\"1.1\" encoding=\"UTF-8\"?\u003e \u003cEvents xmlns=\"event-logging:3\" xmlns:stroom=\"stroom\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xsi:schemaLocation=\"event-logging:3 file://event-logging-v3.2.4.xsd\" Version=\"3.2.4\"\u003e \u003cEvent\u003e \u003cEventTime\u003e \u003cTimeCreated\u003e2005-05-04T17:16:12.000Z\u003c/TimeCreated\u003e \u003c/EventTime\u003e \u003cEventSource\u003e \u003cSystem\u003e \u003cName\u003eSite http://log-sharing.dreamhosters.com/ Bluecoat Logs\u003c/Name\u003e \u003cEnvironment\u003eDevelopment\u003c/Environment\u003e \u003c/System\u003e \u003cGenerator\u003eBluecoat Software: SGOS 3.2.4.28 Version: 1.0\u003c/Generator\u003e \u003cDevice\u003e \u003cIPAddress\u003e192.16.170.42\u003c/IPAddress\u003e \u003cData Name=\"ServiceType\" Value=\"SG-HTTP-Service\" /\u003e \u003c/Device\u003e \u003cClient\u003e \u003cIPAddress\u003e45.110.2.82\u003c/IPAddress\u003e \u003c/Client\u003e \u003cServer\u003e \u003cHostName\u003ewww.inmobus.com\u003c/HostName\u003e \u003c/Server\u003e \u003cUser\u003e \u003cId\u003egeorge\u003c/Id\u003e \u003c/User\u003e \u003cData Name=\"MyMeta\" Value=\"FQDN:somenode.strmdev00.org\\nipaddress:192.168.2.220\\nipaddress_eth0:192.168.2.220\\nipaddress_lo:127.0.0.1\\nipaddress_virbr0:192.168.122.1\\n\" /\u003e \u003c/EventSource\u003e \u003cEventDetail\u003e \u003cTypeId\u003eBluecoat-GET-http\u003c/TypeId\u003e \u003cDescription\u003eReceipt of information from a Resource via Proxy\u003c/Description\u003e \u003cReceive\u003e \u003cSource\u003e \u003cDevice\u003e \u003cIPAddress\u003e45.110.2.82\u003c/IPAddress\u003e \u003c/Device\u003e \u003c/Source\u003e \u003cDestination\u003e \u003cDevice\u003e \u003cHostName\u003ewww.inmobus.com\u003c/HostName\u003e \u003c/Device\u003e \u003c/Destination\u003e \u003cPayload\u003e \u003cResource\u003e \u003cURL\u003ehttp://www.inmobus.com/wcm/assets/images/imagefileicon.gif\u003c/URL\u003e \u003cHTTPMethod\u003eGET\u003c/HTTPMethod\u003e \u003cUserAgent\u003eMozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322)\u003c/UserAgent\u003e \u003cInboundSize\u003e941\u003c/InboundSize\u003e \u003cOutboundSize\u003e729\u003c/OutboundSize\u003e \u003cRequestTime\u003e1\u003c/RequestTime\u003e \u003cResponseCode\u003e200\u003c/ResponseCode\u003e \u003cMimeType\u003eimage/gif\u003c/MimeType\u003e \u003cData Name=\"s-action\" Value=\"TCP_HIT\" /\u003e \u003cData Name=\"cs-uri-scheme\" Value=\"http\" /\u003e \u003cData Name=\"s-hierarchy\" Value=\"DIRECT\" /\u003e \u003cData Name=\"sc-filter-result\" Value=\"PROXIED\" /\u003e \u003cData Name=\"x-icap-error-code\" Value=\"none\" /\u003e \u003c/Resource\u003e \u003c/Payload\u003e \u003c/Receive\u003e \u003c/EventDetail\u003e \u003c/Event\u003e \u003c/Events\u003e  for the given input\n\u003c?xml version=\"1.1\" encoding=\"UTF-8\"?\u003e \u003crecords xmlns=\"records:2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"records:2 file://records-v2.0.xsd\" version=\"2.0\"\u003e \u003crecord\u003e \u003cdata name=\"date\" value=\"2005-05-04\" /\u003e \u003cdata name=\"time\" value=\"17:16:12\" /\u003e \u003cdata name=\"time-taken\" value=\"1\" /\u003e \u003cdata name=\"c-ip\" value=\"45.110.2.82\" /\u003e \u003cdata name=\"sc-status\" value=\"200\" /\u003e \u003cdata name=\"s-action\" value=\"TCP_HIT\" /\u003e \u003cdata name=\"sc-bytes\" value=\"941\" /\u003e \u003cdata name=\"cs-bytes\" value=\"729\" /\u003e \u003cdata name=\"cs-method\" value=\"GET\" /\u003e \u003cdata name=\"cs-uri-scheme\" value=\"http\" /\u003e \u003cdata name=\"cs-host\" value=\"www.inmobus.com\" /\u003e \u003cdata name=\"cs-uri-path\" value=\"/wcm/assets/images/imagefileicon.gif\" /\u003e \u003cdata name=\"cs-uri-query\" value=\"-\" /\u003e \u003cdata name=\"cs-username\" value=\"george\" /\u003e \u003cdata name=\"s-hierarchy\" value=\"DIRECT\" /\u003e \u003cdata name=\"s-supplier-name\" value=\"38.112.92.20\" /\u003e \u003cdata name=\"rs(Content-Type)\" value=\"image/gif\" /\u003e \u003cdata name=\"cs(User-Agent)\" value=\"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322)\" /\u003e \u003cdata name=\"sc-filter-result\" value=\"PROXIED\" /\u003e \u003cdata name=\"sc-filter-category\" value=\"none\" /\u003e \u003cdata name=\"x-virus-id\" value=\"-\" /\u003e \u003cdata name=\"s-ip\" value=\"192.16.170.42\" /\u003e \u003cdata name=\"s-sitename\" value=\"SG-HTTP-Service\" /\u003e \u003cdata name=\"x-virus-details\" value=\"-\" /\u003e \u003cdata name=\"x-icap-error-code\" value=\"none\" /\u003e \u003cdata name=\"x-icap-error-details\" value=\"-\" /\u003e \u003c/record\u003e \u003c/records\u003e  Do not forget to Save the translation as we are complete.\nSchema Validation One last point, validating the use of the Stroom Event Logging Schema is performed in the schemaFilter component of the pipeline. Had our translation resulted in a malformed Event, this pipeline component displays any errors. In the screen below, we have purposely changed the EventTime/TimeCreated element to be EventTime/TimeCreatd. If one selects the schemaFilter component and then Refresh the current step, we will see that\n there is an error as indicated by a square Red box in the top right hand corner there is a Red rectangle line indicator mark on the right hand side in the display slide bar there is a Red error marker on the left hand side  Hovering over the error marker on the left hand side will bring a pop-up describing the error.\nAt this point, close the BlueCoat-Proxy-V1.0-EVENTS stepping tab, acknowledging you do not want to save your errant changes\nby pressing the button.\nAutomated Processing Now that we have authored our translation, we want to enable Stroom to automatically process streams of raw event log data as it arrives. We do this by configuring a Processor in the BlueCoat-Proxy-V1.0-EVENTS pipeline.\nAdding a Pipeline Processor Open the BlueCoat-Proxy-V1.0-EVENTS pipeline by selecting it (double left click) in the Explorer display to show\nTo configure a Processor we select the Processors hyper-link of the *BlueCoat-Proxy-V1.0-EVENTS Pipeline tab to reveal\nWe add a Processor by pressing the add processor button in the top left hand corner. At this you will be presented with an Add Filter configuration window.\nAs we wish to create a Processor that will automatically process all BlueCoat-Proxy-V1.0-EVENTS feed Raw Events we will select the BlueCoat-Proxy-V1.0-EVENTS Feed and Raw Event Stream Type.\nTo select the feed, we press the Edit button . At this, the Choose Feeds To Include And Exclude configuration window is displayed.\nAs we need to Include the BlueCoat-Proxy-V1.0-EVENTS Feed in our selection, press the button in the Include: pane of the window to be presented with a Choose Item configuration window.\nNavigate to the Event Sources/Proxy/BlueCoat folder and select the BlueCoat-Proxy-V1.0-EVENTS Feed\nthen press the button to select and see that the feed is included.\nAgain press the button to close the Choose Feeds To Include And Exclude window to show that we have selected our feed in the Feeds: selection pane of the Add Filter configuration window.\nWe now need to select our Stream Type. Press the button in the Stream Types: pane of the window to be presented with a Add Stream Type window with a Stream Type: selection drop down.\nWe select (left click) the drop down selection to display the types of Stream we can choose\nand as we are selecting Raw Events we select that item then press the button at which we see that our Add Filter configuration window displays\n.\nAs we have selected our filter items, press the button to display our configured Processors.\n.\nWe now see our display is divided into two panes. The Processors table pane at the top and the specific Processor pane below. In our case, our filter selection has left the BlueCoat-Proxy-V1.0-EVENTS Filter selected in the Processors table\n.\nand the specific filter’s details in the bottom pane.\n.\nThe column entries in the Processors Table pane describe\n Pipeline - the name of the Processor pipeline () or Processor filter () Tracker Ms - the last time the tracker updated Tracker % - the percentage of available streams completed Last Poll Age - the last time the processor found new streams to process Task Count - the number of processor tasks currently running Priority - the queue scheduling priority of task submission to available stream processors Streams - the number of streams that have been processed (includes currently running streams) Events - ?? Status - the status of the processor. Normally empty if the number of stream is open-ended. If only are subset of streams were chosen (e.g. a time range in the filter) then the status will be Complete Enabled - check box to indicate the processor is enabled  We now need only Enable both the pipeline Processor and the pipeline Filter for automatic processing to occur. We do this by selecting both check boxes in the Enabled column.\nIf we refresh our Processor table by pressing the button in the top right hand corner, we will see that more table entries have been filled in.\nWe see that the tracker last updated at 2018-07-14T04:00:35.289Z, the percentage complete is 100 (we only had one stream after all), the last time active streams were checked for was 2.3 minutes ago, there are no tasks running and that 1 stream has completed. Note that the Status column is blank as we have an open ended filter in that the processor will continue to select and process any new stream of Raw Events coming into the BlueCoat-Proxy-V1.0-EVENTS feed.\nIf we return to the BlueCoat-Proxy-V1.0-EVENTS* Feed tab, ensuring the **Data** hyper-link is selected and then refresh () the top pane that holds the summary of the latest Feed streams\nWe see a new entry in the table. The columns display\n Created - The time the stream was created. Type - The type of stream. Our new entry has a type of ‘Events’ as we have processed our Raw Events data. Feed - The name of the stream’s feed Pipeline - The name of the pipeline involved in the generation of the stream Raw - The size in bytes of the raw stream data Disk - The size in bytes of the raw stream data when stored in compressed form on the disk Read - The number of records read by a pipeline Write - The number of records (events) written by a pipeline. In this case the difference is that we did not generate events for the Software or Version records we read. Fatal - The number of fatal errors the pipeline encountered when processing this stream Error - The number of errors the pipeline encountered when processing this stream Warn - The number of warnings the pipeline encountered when processing this stream Info - The number of informational alerts the pipeline encountered when processing this stream Retention - The retention period for this stream of data  If we also refresh () the specific feed pane (middle) we again see a new entry of the Events Type\nIf we select (left click) on the Events Type in either pane, we will see that the data pane displays the first event in the GCHQ Stroom Event Logging XML Schema form.\nWe can now send a file of BlueCoat Proxy logs to our Stroom instance from a Linux host using curl command and see how Stroom will automatically processes the file. Use the command\ncurl -k --data-binary @sampleBluecoat.log https://stroomp.strmdev00.org/stroom/datafeed -H\"Feed:BlueCoat-Proxy-V1.0-EVENTS\" -H\"Environment:Development\" -H\"LogFileName:sampleBluecoat.log\" -H\"MyHost:\\\"somenode.strmdev00.org\\\"\" -H\"MyIPaddress:\\\"192.168.2.220 192.168.122.1\\\"\" -H\"System:Site http://log-sharing.dreamhosters.com/ Bluecoat Logs\" -H\"Version:V1.0\"  After Stroom’s Proxy aggregation has occurred, we will see that the new file posted via curl has been loaded into Stroom as per\nand this new Raw Event stream is automatically processed a few seconds later as per\nWe note that since we have used the same sample file again, the Stream sizes and record counts are the same.\nIf we switch to the Processors tab of the pipeline we see that the Tracker timestamp has changed and the number of Streams processed has increased.\n","categories":"","description":"This HOWTO is provided to assist users in setting up Stroom to process inbound raw event logs and transform them into the Stroom Event Logging XML Schema.\n","excerpt":"This HOWTO is provided to assist users in setting up Stroom to process …","ref":"/stroom-docs/hugo-docsy/docs/howtos/eventfeeds/processinghowto/","tags":["processing"],"title":"Event Processing"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/feed/","tags":"","title":"feed"},{"body":"This HOWTO demonstrates how to manage Feeds\nAssumptions  All Sections an account with the Administrator Application Permission is currently logged in.  Creation of an Event Feed We will be creating an Event Feed with the name TEST-FEED-V1_0.\nOnce you have logged in, move the cursor to the System folder within the Explorer tab and select it.\nOnce selected, right click to bring up the New Item selection sub-menu. By selecting the System folder we are requesting any new item created to be placed within it.\nNow move the cursor to the Feed sub-item and select it. You will be presented with a New Feed configuration window.\nYou will note that the System folder has already been selected as the parent group and all we need to do is enter our feed’s name in the Name: entry box\nOn pressing we are presented with the Feed tab for our new feed. The tab is labelled with the feed name TEST-FEED-V1_0.\n.\nWe will leave the definitions of the Feed attributes for the present, but we will enter a Description: for our feed as we should ALWAYS do this fundamental tenet of data management - document the data. We will use the description of ‘Feed for installation validation only. No data value’.\n.\nOne should note that the Feed tab as been marked as having unsaved changes. This is indicated by the asterisk character * between the Feed icon and the name of the feed TEST-FEED-V1_0. We can save the changes to our feed by pressing the Save icon in the top left of the TEST-FEED-V1_0 tab. At this point one should notice two things, the first is that the asterisk has disappeared from the Feed tab and the Save icon is ghosted.\n.\nFolder Structure for Event Sources In order to simplify the management of multiple event sources being processed by Stroom, it is suggested that an Event Source folder is created at the root of the System folder in the Explorer tab.\nThis can be achived by moving the cursor to the System folder within the Explorer tabe and select it. Once selected, right click to bring up the New Item selection sub-menu.\nNow move the cursor to the Folder sub-item and select it. You will be presented with a New Folder configuration window.\nYou will note that the System folder has already been selected as the parent group and all we need to do is enter our folders’s name in the Name: entry box\nOn pressing we are presented with the Folder tab for our new folder. The tab is labelled with the folder name Event Sources.\n.\nYou will also note that the Explorer tab has displayed the Event Sources folder in its display.\nCreate Folder for specific Event Source In order to manage all artefacts of a given Event Source (aka Feed), one would create an appropriately named sub-folder within the Event Sources folder structure.\nIn this example, we will create one for a BlueCoat Proxy Feed.\nAs we may eventually have multiple proxy event sources, we will first create a Proxy folder in the Event Sources before creating the desired BlueCoat folder that will hold the processing components.\nSo, move the cusor to the Event Sources folder on the Explorer tab, select it and then right click to bring up the New Item selection sub-menu and move the cursor to the Folder sub-item and select it. You will be presented with a New Folder configuration window.\nEnter Proxy as the folder Name:\nand press the .\nAt this you will be presented with a new Folder tab for the new sub-folder and we note that it has been added below the Event Sources folder in the Explorer tab\n.\nRepeat this process to create the desired BlueCoat sub-folder with the result\n.\n","categories":"","description":"This HOWTO demonstrates how to manage feeds.\n","excerpt":"This HOWTO demonstrates how to manage feeds.\n","ref":"/stroom-docs/hugo-docsy/docs/howtos/general/feedmanagementhowto/","tags":["feed"],"title":"Feed Management"},{"body":"","categories":"","description":"General How Tos for using Stroom.\n","excerpt":"General How Tos for using Stroom.\n","ref":"/stroom-docs/hugo-docsy/docs/howtos/general/","tags":"","title":"General"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/index/","tags":"","title":"index"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/jobs/","tags":"","title":"jobs"},{"body":"Assumptions The following assumptions are used in this document.\n for manual login, we will log in as the user admin whose password is set to admin and the password is pre-expired for PKI Certificate login, the Stroom deployment would have been configured to accept PKI Logins  Manual Login Within the Login panel, enter admin into the User Name: entry box and admin into the Password: entry box as per\nWhen you press the button, you are advised that your user’s password has expired and you need to change it.\nPress the button and enter the old password admin and a new password with confirmation in the appropriate entry boxes.\nAgain press the button to see the confirmation that the password has changed.\n.\nOn pressing you will be logged in as the admin user and you will be presented with the Main Menu (Item Tools Monitoring User Help), and the Explorer and Welcome panels (or tabs).\n.\nWe have now successfully logged on as the admin user.\nThe next time you login with this account, you will not be prompted to change the password until the password expiry period has been met.\nPKI Certificate Login To login using a PKI Certificate, a user should have their Personal PKI certificate loaded in the browser (and selected if you have multiple certificates) and the user just needs to go to the Stroom UI URL, and providing you have an account, you will be automatically logged in.\n","categories":"","description":"This HOWTO shows how to log into the Stroom User Interface.\n","excerpt":"This HOWTO shows how to log into the Stroom User Interface.\n","ref":"/stroom-docs/hugo-docsy/docs/howtos/authentication/userloginhowto/","tags":["authentication"],"title":"Login"},{"body":"Assumptions The following assumptions are used in this document.\n the user admin is currently logged in  Log out of UI To log out of the UI, select the User item of the Main Menu and to bring up the User sub-menu.\nand select the Logout sub-item and confirm you wish to log out by selecting the button.\nThis will return you to the Login page ","categories":"","description":"This HOWTO shows how to log out of the Stroom User Interface.\n","excerpt":"This HOWTO shows how to log out of the Stroom User Interface.\n","ref":"/stroom-docs/hugo-docsy/docs/howtos/authentication/userlogouthowto/","tags":["authentication"],"title":"Logout"},{"body":"The Stroom documentation has been re-vamped with a new look and feel. The documentation is now versioned so that you are only reading documentation applicable to one minor version of stroom.\nOther improvements:\n Addtion of News and Releases sections Better site and page navigation with the left and right hand menus Tagging of content to help find related material  ","categories":"","description":"","excerpt":"The Stroom documentation has been re-vamped with a new look and feel. …","ref":"/stroom-docs/hugo-docsy/news/news/20210708-new-docs-site/","tags":"","title":"New Stroom Documentation Site"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/processing/","tags":"","title":"processing"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/properties/","tags":"","title":"properties"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/raw/","tags":"","title":"raw"},{"body":"Stroom v6.1 introduced a new feature (stroom:source()) to allow a translation developer to obtain positional details of the source file that is currently being processed. Using the positional information it is possible to tag Events with sufficient details to link back to the Raw source.\nAssumptions  You have a working pipeline that processes logs into Events. Events are indexed You have a Dashboard uses a Search Extraction pipeline.  Steps  Create a new XSLT called Source Decoration containing the following:  \u003cxsl:stylesheet xpath-default-namespace=\"event-logging:3\" xmlns:sm=\"stroom-meta\" xmlns=\"event-logging:3\" xmlns:rec=\"records:2\" xmlns:stroom=\"stroom\" version=\"3.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\u003e \u003cxsl:template match=\"@*|node()\"\u003e \u003cxsl:copy\u003e \u003cxsl:apply-templates select=\"@*|node()\" /\u003e \u003c/xsl:copy\u003e \u003c/xsl:template\u003e \u003cxsl:template match=\"Event/Meta[not(sm:source)]\"\u003e \u003cxsl:copy\u003e \u003cxsl:apply-templates /\u003e \u003cxsl:copy-of select=\"stroom:source()\" /\u003e \u003c/xsl:copy\u003e \u003c/xsl:template\u003e \u003cxsl:template match=\"Event[not(Meta)]\"\u003e \u003cxsl:copy\u003e \u003cxsl:element name=\"Meta\"\u003e \u003cxsl:copy-of select=\"stroom:source()\" /\u003e \u003c/xsl:element\u003e \u003cxsl:apply-templates /\u003e \u003c/xsl:copy\u003e \u003c/xsl:template\u003e \u003c/xsl:stylesheet\u003e  This XSLT will add or augment the Meta section of the Event with the source details.\n Insert a new XSLT filter into your translation pipeline after your translation filter and set it to the XSLT created above. Reprocess the Events through the modified pipeline, also ensure your Events are indexed. Amend the translation performed by the Extraction pipeline to include the new data items that represent the source position data. Add the following to the XSLT:  \u003cxsl:element name=\"data\"\u003e \u003cxsl:attribute name=\"name\"\u003e \u003cxsl:text\u003esrc-id\u003c/xsl:text\u003e \u003c/xsl:attribute\u003e \u003cxsl:attribute name=\"value\" select=\"Meta/sm:source/sm:id\" /\u003e \u003c/xsl:element\u003e \u003cxsl:element name=\"data\"\u003e \u003cxsl:attribute name=\"name\"\u003e \u003cxsl:text\u003esrc-partNo\u003c/xsl:text\u003e \u003c/xsl:attribute\u003e \u003cxsl:attribute name=\"value\" select=\"Meta/sm:source/sm:partNo\" /\u003e \u003c/xsl:element\u003e \u003cxsl:element name=\"data\"\u003e \u003cxsl:attribute name=\"name\"\u003e \u003cxsl:text\u003esrc-recordNo\u003c/xsl:text\u003e \u003c/xsl:attribute\u003e \u003cxsl:attribute name=\"value\" select=\"Meta/sm:source/sm:recordNo\" /\u003e \u003c/xsl:element\u003e \u003cxsl:element name=\"data\"\u003e \u003cxsl:attribute name=\"name\"\u003e \u003cxsl:text\u003esrc-lineFrom\u003c/xsl:text\u003e \u003c/xsl:attribute\u003e \u003cxsl:attribute name=\"value\" select=\"Meta/sm:source/sm:lineFrom\" /\u003e \u003c/xsl:element\u003e \u003cxsl:element name=\"data\"\u003e \u003cxsl:attribute name=\"name\"\u003e \u003cxsl:text\u003esrc-colFrom\u003c/xsl:text\u003e \u003c/xsl:attribute\u003e \u003cxsl:attribute name=\"value\" select=\"Meta/sm:source/sm:colFrom\" /\u003e \u003c/xsl:element\u003e \u003cxsl:element name=\"data\"\u003e \u003cxsl:attribute name=\"name\"\u003e \u003cxsl:text\u003esrc-lineTo\u003c/xsl:text\u003e \u003c/xsl:attribute\u003e \u003cxsl:attribute name=\"value\" select=\"Meta/sm:source/sm:lineTo\" /\u003e \u003c/xsl:element\u003e \u003cxsl:element name=\"data\"\u003e \u003cxsl:attribute name=\"name\"\u003e \u003cxsl:text\u003esrc-colTo\u003c/xsl:text\u003e \u003c/xsl:attribute\u003e \u003cxsl:attribute name=\"value\" select=\"Meta/sm:source/sm:colTo\" /\u003e \u003c/xsl:element\u003e   Open your dashboard, now add the following custom fields to your table : ${src-id}, ${src-partNo}, ${src-recordNo}, ${src-lineFrom}, ${src-lineTo}, ${src-colFrom}, ${src-colTo} Now add a New Text Window to your Dashboard, and configure it as below:  You can also add a column to the table that will open a data window showing the source. Add a custom column with the following expression:  data('Raw Log',${src-id},${src-partNo},'',${src-lineFrom},${src-colFrom},${src-lineTo},${src-colTo})  ","categories":"","description":"How to link every Event back to the Raw log\n","excerpt":"How to link every Event back to the Raw log\n","ref":"/stroom-docs/hugo-docsy/docs/howtos/general/rawsourcetracking/","tags":["source","raw"],"title":"Raw Source Tracking"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/source/","tags":"","title":"source"},{"body":"Assumptions The following assumptions are used in this document.\n the user successfully logged into Stroom with the appropriate administrative privilege (Manage Properties).  Introduction Certain Stroom System Properties can be edited via the Stroom User Interface.\nEditing a System Property To edit a System Property select the Tools item of the Main Menu and select to bring up the Tools sub-menu.\nThen move down and select the Properties sub-item to be presented with System Properties configuration window as seen below.\nUsing the Scrollbar to the right of the System Properties configuration window and scroll down to the line where the property one wants to modify is displayed then select (left click) the line. In the example below we have selected the stroom.maxStreamSize property.\nNow bring up the editing window by double clicking on the selected line. At this we will be presented with the Application Property - stroom.maxStreamSize editing window.\nNow edit the property, by double clicking the string in the Value entry box. In this case we select the 1G value to see\nNow change the selected 1G value to the value we want. In this example, we are changing the value to 512M.\nAt this, press the to see the new value updated in the System Properties configuration window\n","categories":"","description":"This HOWTO is provided to assist users in managing Stroom **System Properties** via the User Interface.\n","excerpt":"This HOWTO is provided to assist users in managing Stroom **System …","ref":"/stroom-docs/hugo-docsy/docs/howtos/administration/systemproperties/","tags":["properties","configuration"],"title":"System Properties"},{"body":"Various Tasks run in the background within Stroom. This HOWTO demonstrates how to manage these tasks\nAssumptions  All Sections an account with the Administrator Application Permission is currently logged in. Proxy Aggregation Tasks we have a multi node Stroom cluster with two nodes, stroomp00 and stroomp01. Stream Processor Tasks we have a multi node Stroom cluster with two nodes, stroomp00 and stroomp01. when demonstrating adding a new node to an existing cluster, the new node is stroomp02.  Proxy Aggregation Turn Off Proxy Aggregation We first select the Monitoring item of the Main Menu to bring up the Monitoring sub-menu.\nthen move down and select the Jobs sub-item to be presented with the Jobs configuration tab as seen below.\nAt this we can select the Proxy Aggregation Job whose check-box is selected and the tab will show the individual Stroom Processor nodes in the deployment.\nAt this, uncheck the Enabled check-boxes for both nodes and also the main Proxy Aggregation check-box to see.\nAt this point, no new proxy aggregation will occur and any inbound files received by the Store Proxies will accumulate in the proxy storage area.\nTurn On Proxy Aggregation We first select the Monitoring item of the Main Menu to bring up the Monitoring sub-menu.\nthen move down and select the Jobs sub-item then select the Proxy Aggregation Job to be presented with the Jobs configuration tab as seen below.\nNow, re-enable each node’s Proxy Aggregation check-box and the main Proxy Aggregation check-box.\nAfter checking the check-boxes, perform a refresh of the display by pressing the Refresh icon on the top right of the lower (node display) pane. You should note the Last Executed date/time change to see\n.\nStream Processors Enable Stream Processors To enable the Stream Processors task, move to the Monitoring item of the Main Menu and select it to bring up the Monitoring sub-menu.\nthen move down and select the Jobs sub-item to be presented with the Jobs configuration tab as seen below.\nAt this, we select the Stream Processor Job whose check-box is not selected and the tab will show the individual Stroom Processor nodes in the Stroom deployment.\nClearly, if it was a single node Stroom deployment, you would only see the one node at the bottom of the Jobs configuration tab.\nWe enable nodes nodes by selecting their check-boxes as well as the main Stream Processors check-box. Do so.\nThat is it. Stroom will automatically take note of these changes and internally start each node’s Stroom Processor task.\nEnable Stream Processors On New Node When one expands a Multi Node Stroom cluster deployment, after the installation of the Stroom Proxy and Application software and services on the new node, we need to enable it’s Stream Processors task.\nTo enable the Stream Processors for this new node, move to the Monitoring item of the Main Menu and select it to bring up the Monitoring sub-menu.\nthen move down and select the Jobs sub-item to be presented with the Jobs configuration tab as seen below.\nAt this we select the Stream Processor Job whose check-box is selected\nWe enable the new node by selecting it’s check-box.\n","categories":"","description":"This HOWTO demonstrates how to manage background tasks.\n","excerpt":"This HOWTO demonstrates how to manage background tasks.\n","ref":"/stroom-docs/hugo-docsy/docs/howtos/general/taskshowto/","tags":["tasks","jobs"],"title":"Task Management"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/tasks/","tags":"","title":"tasks"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/users/","tags":"","title":"users"},{"body":"Integrated Authentication The previously standalone (in v6) stroom-auth-service and stroom-auth-ui services have been integrated into the core stroom application. This simplifies the installation and configuration of stroom.\nConfiguration Properties Improvements Configuration is now provided by YAML files on boot Previously stroom used a flat .conf file to manage the application configuration. Application logging was configured either via a .yml file (in v6) or in an .xml file (in v5). Now stroom uses a single .yml file to configure the application and logging. This file is different to the .yml files(s) used in the docker compose configuration. The YAML file provides a more logical hierarchical structure and support for typed values (longs, doubles, maps, lists, etc.).\nThe YAML configuration is intended for configuration items that are either needed to bootstrap stroom or have values that are specific to a node. Cluster wide configuration properties are still stored in the database and managed via the UI.\nThere has been a change to the precedence of the configuration properties held in different locations (YAML, database, default) and this is described in Properties.\nStroom Home and relative paths The concept of Stroom Home has been introduced. Stroom Home allows for one path to be configured and for all other configurable paths to default to being a child of this path. This keeps all configured directories in one place by default. Each configured directory can be set to an absolute path if a location outside Stroom Home is required. If a relative path is used it will be relative to Stroom Home. Stroom Home can be configured with the property stroom.path.home.\nImproved Properties UI screens that tell you the values over the cluster Previously the Properties UI screens could only tell you the values held within the database and not the value that a node was actually using. The Properties screens have been improved to tell you the source of a property value and where multiple values exist across the cluster, which nodes have what values. See Properties.\nValidation of Configuration Property Values Validation of configuration property values is now possible. The validation rules are defined in the application code and allow for things like:\n Ensuring that a regex pattern is a valid pattern Setting maximum or minimum values to numeric properties. Ensuring a property has a value.  Validation will be enforced on application boot or when a value is edited via the UI.\nHot Loading of Node Configuration Now that node specific configuration is managed via the YAML configuration file stroom will detect changes to this file and update the configuration properties accordingly. Some properties however do not support being changed at runtime so will still require either the whole system or the UI nodes to be restarted.\nData retention impact summary The Data_Retention screen now provides an Impact Summary tab that will show you a summary of what will be deleted by the current active rules. The summary is based on the rules as they currently are in the UI, so it allows you to see the impact before saving rule changes. The summary is a count of the number of streams that will be deleted by each rule, broken down by feed and stream type. In very large systems with a lot of data or where complex rules are in place the summary may take a some time (minutes) to produce.\nSee Data Retention for more details.\nFuzzy Finding in Quick Filters and Suggestion Text Fields A richer fuzzy find algorithm has been added to the Quick filter search fields. It has also been added to some text input fields with suggestion fields, e.g. Feed Name input fields. This makes finding values or rows in a table faster and more precise.\nSee Finding Things for more details.\nNew (off-heap) memory efficient reference data The reference data feature in previous versions of stroom loaded the reference data on demand and held it in Java’s heap memory. In large systems or where a pipeline doing reference data lookups across a wide time range this can lead to very large heap sizes.\nIn v7 stroom now uses an off-heap, disk backed store (LMDB) for the reference data. This removes all (with the exception of context lookups) from the Java heap, so the -Xmx value can be reduced. In large systems this can mean keeping your -Xmx value below the 32Gb threshold to further reduce the memory usage. Because the store is disk backed frequently used reference data can be kept in the store to reduce the loading overhead. As the reference data is held off-heap it stroom can make use of all available free RAM for the reference data.\nSee Reference Data\nReference Data API A RESTful API has been added for the reference data store. This primarily allows reference lookups to be performed by external systems.\nSee Reference Data API\nText editor improvements The Ace text editor is used widely in Stroom for such things as editing XSLTs, editing dashboard column expressions, viewing stream data and stepping. There have been a number of improvements to this editor.\nSee Editing and Viewing Text Data\nEditor context menu Additional options have been added to the context menu in the text editor:\n Toggle soft line wrapping of long lines. Toggle viewing hidden characters, e.g. tabs, spaces, line breaks. Toggle Vim key bindings. The Ace editor does not implement all Vim functionality but supports the core key bindings. Toggle auto-completion. Completion is triggered using ctrl-space. Toggle live auto-completion. Completion is triggered as you type. Toggle the inclusion of snippets in the auto-complete suggestions.  Auto-completion and snippets Most editor screens now support basic auto-completion of existing words found in the text. Some editor screens, such as XSLT, dashboard column expressions and Javascript scripts also support keyword and snippet completion.\nData viewing improvements The way data is viewed in Stroom has changed to improve the viewing of large files or files with no line breaks. Previously a set number of lines of data would be fetched for display on the page in the Data Viewer. This did not work for data that has no line breaks as Stroom would then try to fetch all data.\nIn v7 Stroom works at the character level so can fetch a reasonable number of characters for display whether they are all one line or spread over multiple lines.\nThe viewing of data has been separated into two mechanisms, Data Preview and Source View.\nSee Editing and Viewing Text Data\nData Preview This is the default view of the data. It displays the first n characters (configurable) of the data. It will attempt the format the data, e.g. showing pretty-printed XML. You cannot navigate around the data.\nSource View This view is intended for seeing the actual data in its raw un-formatted form and for navigating around it. This view provides navigation controls to define the range of data being display, e.g. from a character offset, line number or line and column.\nYou can now query data, server tasks and processing tasks on dashboards TODO Complete this section  Data actions such as delete, download, reprocess now provide an impact summary before proceeding. TODO Complete this section  Index volume groups for easier index volume assignment TODO Complete this section  Kafka Integration New Kafka Configuration Entity Integration with Apache Kafka was introduced in v6 however the way the connection to Kafka cluster(s) is configured has been improved. We have introduced a new entity type called Kafka Configuration that can be created/managed via the explorer tree. This means stroom can integrate with many Kafka clusters or connect to a cluster using different sets of Kafka Configuration properties. The Kafka Configuration entity provides an editor for setting all the Kafka specific configuration properties. Pipeline elements that use Kafka now provide a means to select the Kafka Configuration to use.\nTODO Add user guide section on Kafka configuration  An Improved Pipeline Element for Sending Data to Kafka The previous Kafka pipeline elements in v6 have been replaced with a single StandardKafkaProducer element. The new element allows for the dynamic construction of a Kafka Producer message via an XML document conforming to the kafka-records XmlSchema. With this new element events can be translated into kafka records which will be then given to the Kafka Producer to send to the Kafka Cluster. This allows for complete control of things like timestamps, topics, keys, values, etc.\nTODO Add user guide section on Kafka Standard Producer  No limitations on data reprocessing TODO Complete this section  Improved REST API A rich REST API for all UI accessible functions The architecture of the stroom UI has been changed such that all communication between the UI and the back end is via REST calls. This means all of these REST calls are available as an API for users of stroom to take advantage of. It opens up the possibility for interacting with stoom via scripts or from other applications.\nSwagger UI to document REST API methods The Swagger UI and specification file have been improved to include all of the API methods available in stroom.\nImproved architecture with separate modules with individual DB access to spread load. The architecture of the core stroom application has been fundamentally changed in v7 to internally break up the application into its functional areas. This separation makes for a more logical code base and allows for the possibility of each functional area having its own database instance, if required.\nJava 12 stroom v7 now runs on the Java 12 JVM.\nMySQL 8 support. stroom v7 has been changed to support MySQL v8, opening up the possibility of using features like group replication.\n","categories":"","description":"This is my heading\n","excerpt":"This is my heading\n","ref":"/stroom-docs/hugo-docsy/news/releases/v07.00/","tags":"","title":"Version 7.0"},{"body":"This is old news!\n","categories":"","description":"","excerpt":"This is old news!\n","ref":"/stroom-docs/hugo-docsy/news/news/20210707-old-news/","tags":"","title":"Old News"},{"body":" TODO Version 6.1 release notes need populating.  ","categories":"","description":"","excerpt":" TODO Version 6.1 release notes need populating.  ","ref":"/stroom-docs/hugo-docsy/news/releases/v06.01/","tags":"","title":"Version 6.1"},{"body":"OAuth 2.0/OpenID Connect authentication Authentication for Stroom provided by an external service rather than a service internal to Stroom. This change allows support for broader corporate authentication schemes and is a key requirement for enabling the future microservice architecture for Stroom.\nAPI keys for third party clients Anyone wishing to make use of the data exposed by Stroom’s services can request an API key. This key acts as a password for their own applications. It allows administrators to secure and manage access to Stroom’s data.\nHBase backed statistics store This new implementation of statistics (Stroom-Stats) provides a vastly more scalable time series DB for large scale collection of Stroom’s data aggregated to various time buckets. Stroom-Stats uses Kafka for ingesting the source data.\nData receipt filtering Data arriving in Stroom has meta data that can be matched against a policy so that certain actions can be taken. This could be to receive, drop or reject the data.\nFiltering of data also applies to Stroom proxy where each proxy can get a filtering policy from an upstream proxy or a Stroom instance.\nData retention policies The length of time that data will be retained in Strooms stream store can be defined by creating data retention rules. These rules match streams based on their meta data and will automatically delete data once the retention period associated with the rule is exceeded.\nDashboard linking Links can be created in dashboards to jump to other dashboards or other external sites that provide additional contextual information.\nSearch API The search system used by Dashboards can be used via a restful API. This provides access to data stored in search indices (including the ability to extract data) and statistics stores. The data fetched via the search API can be received and processed via an external system.\nKafka appender and filter New pipeline elements for writing XML or text data to a Kafka topic. This provides more options for using Stroom’s data in other systems.\n","categories":"","description":"","excerpt":"OAuth 2.0/OpenID Connect authentication Authentication for Stroom …","ref":"/stroom-docs/hugo-docsy/news/releases/v06.00/","tags":"","title":"Version 6.0"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90’s four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven’t heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026B. I love this life we live in.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header.  Next level leggings before they sold out, PBR\u0026B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a “mixed” task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin' Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\";  Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) }  Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.  Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this.  ","categories":"","description":"A short lead description about this content page. It can be **bold** or _italic_ and can be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. It can be **bold** …","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/getting-started/example-page/","tags":"","title":"Example Page"},{"body":" This is a placeholder page. Replace it with your own content.\n Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90’s four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\n There should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\n First Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven’t heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026B. I love this life we live in.\nSecond Header 2  This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\n Header 3 This is a code block following a header.  Next level leggings before they sold out, PBR\u0026B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4  This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header.  Header 5  This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header.  Header 6    What Follows     A table A header   A table A header   A table A header     There’s a horizontal rule above and below this.\n Here is an unordered list:\n Liverpool F.C. Chelsea F.C. Manchester United F.C.  And an ordered list:\n Michael Brecker Seamus Blake Branford Marsalis  And an unordered task list:\n Create a Hugo theme Add task lists to it Take a vacation  And a “mixed” task list:\n Pack bags ? Travel!  And a nested list:\n Jackson 5  Michael Tito Jackie Marlon Jermaine   TMNT  Leonardo Michelangelo Donatello Raphael    Definition lists can be used with Markdown syntax. Definition headers are bold.\n Name Godzilla Born 1952 Birthplace Japan Color Green   Tables should have bold headings and alternating shaded rows.\n   Artist Album Year     Michael Jackson Thriller 1982   Prince Purple Rain 1984   Beastie Boys License to Ill 1986    If a table is too wide, it should scroll horizontally.\n   Artist Album Year Label Awards Songs     Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin' Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life   Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain   Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill     Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\";  Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) }  Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.  Inline code inside table cells should still be distinguishable.\n   Language Code     Javascript var foo = \"bar\";   Ruby foo = \"bar\"{     Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts  This is an alert.  Note This is an alert with a title.  Note This is an alert with a title and Markdown.  This is a successful alert.  This is a warning.  Warning This is a warning with a title.  Another Heading ","categories":"","description":"A short lead description about this content page. It can be **bold** or _italic_ and can be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. It can be **bold** …","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/reference/parameter-reference/","tags":"","title":"Parameter Reference"},{"body":"PUML Inline PUML @startuml Alice -\u003e Bob: Authentication Request Bob --\u003e Alice: Authentication Response Alice -\u003e Bob: Another authentication Request Alice \u003c-- Bob: Another authentication Response @enduml  SVG Local SVG Static SVG Page Resource This is some wordy text And so is this     PNG resized  SVG Figure   My PUML   Code highlighting YAML\n--- root: someKey: \"value\"  Bash\necho \"${VAR}\"  XML\n\u003croot\u003e \u003cchild attr=\"xxx\"\u003esome val\u003c/child\u003e \u003c/root\u003e  Links   PUML\n  Code Highlighting\n  Table    Data Type Example UI String Forms Example YAML form     Boolean true false true false   String This is a string \"This is a string\"   Integer/Long 123 123   Float 1.23 1.23   Stroom Duration P30D P1DT12H PT30S 30d 30s 30000 \"P30D\" \"P1DT12H\" \"PT30S\" \"30d\" \"30s\" \"30000\" See Stroom Duration Data Type.   List #red#Green#Blue ,1,2,3 See List Data Type   Map ,=red=FF0000,Green=00FF00,Blue=0000FF See Map Data Type   DocRef ,docRef(MyType,a56ff805-b214-4674-a7a7-a8fac288be60,My DocRef name) See DocRef Data Type   Enum HIGH LOW \"HIGH\" \"LOW\"   Path /some/path/to/a/file \"/some/path/to/a/file\"   ByteSize 32, 512Kib 32, 512Kib See Byte Size Data Type    ","categories":"","description":"A test for stroom\n","excerpt":"A test for stroom\n","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/getting-started/stroom_test/","tags":"","title":"Stroom Test Page"},{"body":" This is a placeholder page. Replace it with your own content.\n This is the section landing page.\n","categories":"","description":"A short lead description about this section page. Text here can also be **bold** or _italic_ and can even be split over multiple paragraphs.\n","excerpt":"A short lead description about this section page. Text here can also …","ref":"/stroom-docs/hugo-docsy/docs/docsy-examples/tasks/ponycopters/","tags":"","title":"Working with Ponycopters"},{"body":"  About Stroom Stroom is an application that was developed by the UK's Government Communication Headquarters for collecting, processing and analysing large volumes of log files. In 2016 it was made available to the open source community with an Apache 2.0 licence.    ","categories":"","description":"","excerpt":"  About Stroom Stroom is an application that was developed by the UK's …","ref":"/stroom-docs/hugo-docsy/about/","tags":"","title":"About Stroom"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/all-content/","tags":"","title":"All Content (DRAFT)"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/community/","tags":"","title":"Community"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/docker/","tags":"","title":"docker"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","categories":"","description":"","excerpt":"This is the blog section. It has two categories: News and Releases. …","ref":"/stroom-docs/hugo-docsy/news/","tags":"","title":"News / Releases"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/search/","tags":"","title":"Search Results"},{"body":"   Learn More   Download   Stroom is a data processing, storage and analysis platform. It is scalable - just add more CPUs / servers for greater throughput. It is suitable for processing high volume data such as system logs, to provide valuable insights into IT performance and usage.       Data Ingest  Receive and store large volumes of data such as native format logs. Ingested data is always available in its raw form.\n   Data transformation pipelines  Create sequences of XSL and text operations, in order to normalise or export data in any format. It is possible to enrich data using lookups and reference data.\n   Integrated transformation development  Easily add new data formats and debug the transformations if they don’t work as expected.\n   Scalable Search  Create multiple indexes with different retention periods. These can be sharded across your cluster.\n   Dashboards  Run queries against your indexes or statistics and view the results within custom visualisations.\n   Statistics  Record counts or values of items over time, providing answers to questions such as “how many times has a specific machine provided data in the last hour/day/month?”\n    ","categories":"","description":"","excerpt":"   Learn More   Download   Stroom is a data processing, storage and …","ref":"/stroom-docs/hugo-docsy/","tags":"","title":"Stroom"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/style/","tags":"","title":"style"},{"body":"","categories":"","description":"","excerpt":"","ref":"/stroom-docs/hugo-docsy/tags/v5/","tags":"","title":"v5"}]